
pitotTubeTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004ed4  08004ed4  00014ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fa4  08004fa4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004fa4  08004fa4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fa4  08004fa4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fa4  08004fa4  00014fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fa8  08004fa8  00014fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000248  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002a4  200002a4  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ccd3  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a88  00000000  00000000  0002cda2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009c0  00000000  00000000  0002e830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000798  00000000  00000000  0002f1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001da6b  00000000  00000000  0002f988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e129  00000000  00000000  0004d3f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b2bca  00000000  00000000  0005b51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002e14  00000000  00000000  0010e0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00110efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ebc 	.word	0x08004ebc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004ebc 	.word	0x08004ebc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a5c:	b5b0      	push	{r4, r5, r7, lr}
 8000a5e:	b0b0      	sub	sp, #192	; 0xc0
 8000a60:	af02      	add	r7, sp, #8
  HAL_Init();
 8000a62:	f000 fbb3 	bl	80011cc <HAL_Init>
  SystemClock_Config();
 8000a66:	f000 f911 	bl	8000c8c <SystemClock_Config>
  MX_GPIO_Init();
 8000a6a:	f000 f9e3 	bl	8000e34 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a6e:	f000 f971 	bl	8000d54 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000a72:	f000 f9af 	bl	8000dd4 <MX_USART1_UART_Init>

  uint8_t buf[9] = {
 8000a76:	2300      	movs	r3, #0
 8000a78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000a7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	711a      	strb	r2, [r3, #4]
    0
  };
  uint8_t cmd[] = {
 8000a86:	f641 6336 	movw	r3, #7734	; 0x1e36
 8000a8a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
    0x36,
    0x1E
  };
  uint8_t stop[] = {
 8000a8e:	f64f 133f 	movw	r3, #63807	; 0xf93f
 8000a92:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
  uint16_t scaleFactorDP;
  uint16_t scaledTemp;
  uint16_t scaledDP;

  HAL_StatusTypeDef ret;
  HAL_I2C_Master_Transmit( & hi2c1, SENSOR_ADDRESS, stop, sizeof(stop), HAL_MAX_DELAY);
 8000a96:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	214a      	movs	r1, #74	; 0x4a
 8000aa4:	4873      	ldr	r0, [pc, #460]	; (8000c74 <main+0x218>)
 8000aa6:	f000 ff2f 	bl	8001908 <HAL_I2C_Master_Transmit>
  HAL_Delay(20);
 8000aaa:	2014      	movs	r0, #20
 8000aac:	f000 fbf4 	bl	8001298 <HAL_Delay>
  ret = HAL_I2C_Master_Transmit( & hi2c1, SENSOR_ADDRESS, cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000ab0:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8000ab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	2302      	movs	r3, #2
 8000abc:	214a      	movs	r1, #74	; 0x4a
 8000abe:	486d      	ldr	r0, [pc, #436]	; (8000c74 <main+0x218>)
 8000ac0:	f000 ff22 	bl	8001908 <HAL_I2C_Master_Transmit>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
  HAL_Delay(20);
 8000aca:	2014      	movs	r0, #20
 8000acc:	f000 fbe4 	bl	8001298 <HAL_Delay>
  if (ret != HAL_OK) {
 8000ad0:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d018      	beq.n	8000b0a <main+0xae>
    char msg[] = "Failed to transmit I2C!\n\r";
 8000ad8:	4b67      	ldr	r3, [pc, #412]	; (8000c78 <main+0x21c>)
 8000ada:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000ade:	461d      	mov	r5, r3
 8000ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ae8:	c403      	stmia	r4!, {r0, r1}
 8000aea:	8022      	strh	r2, [r4, #0]
    HAL_UART_Transmit( & huart1, (uint8_t * ) msg, strlen(msg), HAL_MAX_DELAY);
 8000aec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fb6d 	bl	80001d0 <strlen>
 8000af6:	4603      	mov	r3, r0
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b02:	485e      	ldr	r0, [pc, #376]	; (8000c7c <main+0x220>)
 8000b04:	f003 f8a8 	bl	8003c58 <HAL_UART_Transmit>
 8000b08:	e028      	b.n	8000b5c <main+0x100>
  } else {
    // Receive product identifier data
    ret = HAL_I2C_Master_Receive( & hi2c1, SENSOR_ADDRESS, buf, sizeof(buf), HAL_MAX_DELAY);
 8000b0a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	2309      	movs	r3, #9
 8000b16:	214a      	movs	r1, #74	; 0x4a
 8000b18:	4856      	ldr	r0, [pc, #344]	; (8000c74 <main+0x218>)
 8000b1a:	f001 f80d 	bl	8001b38 <HAL_I2C_Master_Receive>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    if (ret != HAL_OK) {
 8000b24:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d017      	beq.n	8000b5c <main+0x100>
      char msg[] = "Failed to receive I2C!\n\r";
 8000b2c:	4b54      	ldr	r3, [pc, #336]	; (8000c80 <main+0x224>)
 8000b2e:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000b32:	461d      	mov	r5, r3
 8000b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b3c:	c403      	stmia	r4!, {r0, r1}
 8000b3e:	7022      	strb	r2, [r4, #0]
      HAL_UART_Transmit( & huart1, (uint8_t * ) msg, strlen(msg), HAL_MAX_DELAY);
 8000b40:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fb43 	bl	80001d0 <strlen>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b56:	4849      	ldr	r0, [pc, #292]	; (8000c7c <main+0x220>)
 8000b58:	f003 f87e 	bl	8003c58 <HAL_UART_Transmit>
  }
  while (1) {
    // Transmit command to read product identifier

    // Receive product identifier data
    ret = HAL_I2C_Master_Receive( & hi2c1, SENSOR_ADDRESS, buf, sizeof(buf), HAL_MAX_DELAY);
 8000b5c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	2309      	movs	r3, #9
 8000b68:	214a      	movs	r1, #74	; 0x4a
 8000b6a:	4842      	ldr	r0, [pc, #264]	; (8000c74 <main+0x218>)
 8000b6c:	f000 ffe4 	bl	8001b38 <HAL_I2C_Master_Receive>
 8000b70:	4603      	mov	r3, r0
 8000b72:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    if (ret != HAL_OK) {
 8000b76:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d018      	beq.n	8000bb0 <main+0x154>
      char msg[] = "Failed to receive I2C!\n\r";
 8000b7e:	4b40      	ldr	r3, [pc, #256]	; (8000c80 <main+0x224>)
 8000b80:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000b84:	461d      	mov	r5, r3
 8000b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b8e:	c403      	stmia	r4!, {r0, r1}
 8000b90:	7022      	strb	r2, [r4, #0]
      HAL_UART_Transmit( & huart1, (uint8_t * ) msg, strlen(msg), HAL_MAX_DELAY);
 8000b92:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fb1a 	bl	80001d0 <strlen>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ba8:	4834      	ldr	r0, [pc, #208]	; (8000c7c <main+0x220>)
 8000baa:	f003 f855 	bl	8003c58 <HAL_UART_Transmit>
 8000bae:	e05d      	b.n	8000c6c <main+0x210>
    } else {
      /* populate temp buf[3] is msb of temp, buf[4] is lsb of temp*/
      tempUnScaled = ((buf[3] << 8) | buf[4]);
 8000bb0:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8000bb4:	021b      	lsls	r3, r3, #8
 8000bb6:	b21a      	sxth	r2, r3
 8000bb8:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8000bbc:	b21b      	sxth	r3, r3
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
      scaledTemp = (int)tempUnScaled / tempScaleFactor;
 8000bc6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fcaa 	bl	8000524 <__aeabi_i2d>
 8000bd0:	f04f 0200 	mov.w	r2, #0
 8000bd4:	4b2b      	ldr	r3, [pc, #172]	; (8000c84 <main+0x228>)
 8000bd6:	f7ff fe39 	bl	800084c <__aeabi_ddiv>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	4610      	mov	r0, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	f7ff ff1b 	bl	8000a1c <__aeabi_d2uiz>
 8000be6:	4603      	mov	r3, r0
 8000be8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2

      /* populate differential pressure, buf[0] is dp msb, buf[1] is db lsb */
      diffPressureUnScaled = (buf[0] << 8) | buf[1];
 8000bec:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8000bf0:	021b      	lsls	r3, r3, #8
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8000bf8:	b21b      	sxth	r3, r3
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0

      /* populate differetial pressure scale factor buf[6] is msb, buf[7] is lsb (of scale factor)*/
      scaleFactorDP = (buf[6] << 8) | buf[7];
 8000c00:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b21b      	sxth	r3, r3
 8000c12:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae


      /* pressure is equal to diffPressureUnScaled / scaleFactorDP */
      scaledDP =  diffPressureUnScaled /scaleFactorDP;
 8000c16:	f9b7 20b0 	ldrsh.w	r2, [r7, #176]	; 0xb0
 8000c1a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000c1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c22:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

      // Process and print product identifier
      char output[64];
      //snprintf(output, sizeof(output), "Differential Pressure %d, Temperature: %d\n", scaledDP, scaledTemp);
      HAL_UART_Transmit( & huart1, (uint8_t * ) output, strlen(output), HAL_MAX_DELAY);
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fad1 	bl	80001d0 <strlen>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	1d39      	adds	r1, r7, #4
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c38:	4810      	ldr	r0, [pc, #64]	; (8000c7c <main+0x220>)
 8000c3a:	f003 f80d 	bl	8003c58 <HAL_UART_Transmit>

      snprintf(output, sizeof(output), "Differential unscaled %d, scalefactor: %d\n", diffPressureUnScaled, scaleFactorDP);
 8000c3e:	f9b7 20b0 	ldrsh.w	r2, [r7, #176]	; 0xb0
 8000c42:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000c46:	1d38      	adds	r0, r7, #4
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <main+0x22c>)
 8000c4e:	2140      	movs	r1, #64	; 0x40
 8000c50:	f003 fc7c 	bl	800454c <sniprintf>
      HAL_UART_Transmit( & huart1, (uint8_t * ) output, strlen(output), HAL_MAX_DELAY);
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff faba 	bl	80001d0 <strlen>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	1d39      	adds	r1, r7, #4
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <main+0x220>)
 8000c68:	f002 fff6 	bl	8003c58 <HAL_UART_Transmit>
    }
    // Delay between attempts
    HAL_Delay(100); // 1 ms delay
 8000c6c:	2064      	movs	r0, #100	; 0x64
 8000c6e:	f000 fb13 	bl	8001298 <HAL_Delay>
    ret = HAL_I2C_Master_Receive( & hi2c1, SENSOR_ADDRESS, buf, sizeof(buf), HAL_MAX_DELAY);
 8000c72:	e773      	b.n	8000b5c <main+0x100>
 8000c74:	20000078 	.word	0x20000078
 8000c78:	08004f00 	.word	0x08004f00
 8000c7c:	200000cc 	.word	0x200000cc
 8000c80:	08004f1c 	.word	0x08004f1c
 8000c84:	40690000 	.word	0x40690000
 8000c88:	08004ed4 	.word	0x08004ed4

08000c8c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b09e      	sub	sp, #120	; 0x78
 8000c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {
 8000c92:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c96:	2228      	movs	r2, #40	; 0x28
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f003 fc8a 	bl	80045b4 <memset>
    0
  };
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 8000ca0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
    0
  };
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	223c      	movs	r2, #60	; 0x3c
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f003 fc7c 	bl	80045b4 <memset>
  };

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSE;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cc0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cc4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cce:	2310      	movs	r3, #16
 8000cd0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cda:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000cdc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ce0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig( & RCC_OscInitStruct) != HAL_OK) {
 8000ce2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 fb5a 	bl	80023a0 <HAL_RCC_OscConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0x6a>
    Error_Handler();
 8000cf2:	f000 f91d 	bl	8000f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig( & RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000d0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d10:	2101      	movs	r1, #1
 8000d12:	4618      	mov	r0, r3
 8000d14:	f002 fb82 	bl	800341c <HAL_RCC_ClockConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0x96>
    Error_Handler();
 8000d1e:	f000 f907 	bl	8000f30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB | RCC_PERIPHCLK_USART1 |
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <SystemClock_Config+0xc4>)
 8000d24:	603b      	str	r3, [r7, #0]
    RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d32:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig( & PeriphClkInit) != HAL_OK) {
 8000d34:	463b      	mov	r3, r7
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 fd90 	bl	800385c <HAL_RCCEx_PeriphCLKConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0xba>
    Error_Handler();
 8000d42:	f000 f8f5 	bl	8000f30 <Error_Handler>
  }
}
 8000d46:	bf00      	nop
 8000d48:	3778      	adds	r7, #120	; 0x78
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	00020021 	.word	0x00020021

08000d54 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d5a:	4a1c      	ldr	r2, [pc, #112]	; (8000dcc <MX_I2C1_Init+0x78>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d60:	4a1b      	ldr	r2, [pc, #108]	; (8000dd0 <MX_I2C1_Init+0x7c>)
 8000d62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d64:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init( & hi2c1) != HAL_OK) {
 8000d8e:	480e      	ldr	r0, [pc, #56]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000d90:	f000 fd1e 	bl	80017d0 <HAL_I2C_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_I2C1_Init+0x4a>
    Error_Handler();
 8000d9a:	f000 f8c9 	bl	8000f30 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter( & hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4809      	ldr	r0, [pc, #36]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000da2:	f001 fa65 	bl	8002270 <HAL_I2CEx_ConfigAnalogFilter>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_I2C1_Init+0x5c>
    Error_Handler();
 8000dac:	f000 f8c0 	bl	8000f30 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter( & hi2c1, 0) != HAL_OK) {
 8000db0:	2100      	movs	r1, #0
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_I2C1_Init+0x74>)
 8000db4:	f001 faa7 	bl	8002306 <HAL_I2CEx_ConfigDigitalFilter>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_I2C1_Init+0x6e>
    Error_Handler();
 8000dbe:	f000 f8b7 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000078 	.word	0x20000078
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	2000090e 	.word	0x2000090e

08000dd4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000dda:	4a15      	ldr	r2, [pc, #84]	; (8000e30 <MX_USART1_UART_Init+0x5c>)
 8000ddc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init( & huart1) != HAL_OK) {
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_USART1_UART_Init+0x58>)
 8000e18:	f002 fed0 	bl	8003bbc <HAL_UART_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_USART1_UART_Init+0x52>
    Error_Handler();
 8000e22:	f000 f885 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	200000cc 	.word	0x200000cc
 8000e30:	40013800 	.word	0x40013800

08000e34 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]
  };
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4a:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <MX_GPIO_Init+0xf4>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	4a36      	ldr	r2, [pc, #216]	; (8000f28 <MX_GPIO_Init+0xf4>)
 8000e50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e54:	6153      	str	r3, [r2, #20]
 8000e56:	4b34      	ldr	r3, [pc, #208]	; (8000f28 <MX_GPIO_Init+0xf4>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <MX_GPIO_Init+0xf4>)
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	4a30      	ldr	r2, [pc, #192]	; (8000f28 <MX_GPIO_Init+0xf4>)
 8000e68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e6c:	6153      	str	r3, [r2, #20]
 8000e6e:	4b2e      	ldr	r3, [pc, #184]	; (8000f28 <MX_GPIO_Init+0xf4>)
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7a:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <MX_GPIO_Init+0xf4>)
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	4a2a      	ldr	r2, [pc, #168]	; (8000f28 <MX_GPIO_Init+0xf4>)
 8000e80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e84:	6153      	str	r3, [r2, #20]
 8000e86:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <MX_GPIO_Init+0xf4>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <MX_GPIO_Init+0xf4>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	4a24      	ldr	r2, [pc, #144]	; (8000f28 <MX_GPIO_Init+0xf4>)
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	6153      	str	r3, [r2, #20]
 8000e9e:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <MX_GPIO_Init+0xf4>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <MX_GPIO_Init+0xf4>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	4a1e      	ldr	r2, [pc, #120]	; (8000f28 <MX_GPIO_Init+0xf4>)
 8000eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb4:	6153      	str	r3, [r2, #20]
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <MX_GPIO_Init+0xf4>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin |
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000ec8:	4818      	ldr	r0, [pc, #96]	; (8000f2c <MX_GPIO_Init+0xf8>)
 8000eca:	f000 fc69 	bl	80017a0 <HAL_GPIO_WritePin>
    LD7_Pin | LD9_Pin | LD10_Pin | LD8_Pin |
    LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin | MEMS_INT3_Pin | MEMS_INT4_Pin | MEMS_INT1_Pin |
 8000ece:	2337      	movs	r3, #55	; 0x37
 8000ed0:	617b      	str	r3, [r7, #20]
    MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ed2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ed6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, & GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4812      	ldr	r0, [pc, #72]	; (8000f2c <MX_GPIO_Init+0xf8>)
 8000ee4:	f000 fae2 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin | LD4_Pin | LD3_Pin | LD5_Pin |
 8000ee8:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000eec:	617b      	str	r3, [r7, #20]
    LD7_Pin | LD9_Pin | LD10_Pin | LD8_Pin |
    LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, & GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	480a      	ldr	r0, [pc, #40]	; (8000f2c <MX_GPIO_Init+0xf8>)
 8000f02:	f000 fad3 	bl	80014ac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f06:	2301      	movs	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, & GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1c:	f000 fac6 	bl	80014ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f20:	bf00      	nop
 8000f22:	3728      	adds	r7, #40	; 0x28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	48001000 	.word	0x48001000

08000f30 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {}
 8000f38:	e7fe      	b.n	8000f38 <Error_Handler+0x8>
	...

08000f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <HAL_MspInit+0x44>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <HAL_MspInit+0x44>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6193      	str	r3, [r2, #24]
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_MspInit+0x44>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <HAL_MspInit+0x44>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <HAL_MspInit+0x44>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_MspInit+0x44>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f72:	2007      	movs	r0, #7
 8000f74:	f000 fa66 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000

08000f84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a17      	ldr	r2, [pc, #92]	; (8001000 <HAL_I2C_MspInit+0x7c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d127      	bne.n	8000ff6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_I2C_MspInit+0x80>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	4a16      	ldr	r2, [pc, #88]	; (8001004 <HAL_I2C_MspInit+0x80>)
 8000fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb0:	6153      	str	r3, [r2, #20]
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_I2C_MspInit+0x80>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000fbe:	23c0      	movs	r3, #192	; 0xc0
 8000fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc2:	2312      	movs	r3, #18
 8000fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <HAL_I2C_MspInit+0x84>)
 8000fda:	f000 fa67 	bl	80014ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_I2C_MspInit+0x80>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a08      	ldr	r2, [pc, #32]	; (8001004 <HAL_I2C_MspInit+0x80>)
 8000fe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fe8:	61d3      	str	r3, [r2, #28]
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_I2C_MspInit+0x80>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40005400 	.word	0x40005400
 8001004:	40021000 	.word	0x40021000
 8001008:	48000400 	.word	0x48000400

0800100c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a17      	ldr	r2, [pc, #92]	; (8001088 <HAL_UART_MspInit+0x7c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d127      	bne.n	800107e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_UART_MspInit+0x80>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	4a16      	ldr	r2, [pc, #88]	; (800108c <HAL_UART_MspInit+0x80>)
 8001034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001038:	6193      	str	r3, [r2, #24]
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <HAL_UART_MspInit+0x80>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_UART_MspInit+0x80>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	4a10      	ldr	r2, [pc, #64]	; (800108c <HAL_UART_MspInit+0x80>)
 800104c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001050:	6153      	str	r3, [r2, #20]
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_UART_MspInit+0x80>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800105e:	2330      	movs	r3, #48	; 0x30
 8001060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800106e:	2307      	movs	r3, #7
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_UART_MspInit+0x84>)
 800107a:	f000 fa17 	bl	80014ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40013800 	.word	0x40013800
 800108c:	40021000 	.word	0x40021000
 8001090:	48000800 	.word	0x48000800

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001098:	e7fe      	b.n	8001098 <NMI_Handler+0x4>

0800109a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <MemManage_Handler+0x4>

080010a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e0:	f000 f8ba 	bl	8001258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <_sbrk+0x5c>)
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <_sbrk+0x60>)
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <_sbrk+0x64>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <_sbrk+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	429a      	cmp	r2, r3
 8001116:	d207      	bcs.n	8001128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001118:	f003 fa54 	bl	80045c4 <__errno>
 800111c:	4603      	mov	r3, r0
 800111e:	220c      	movs	r2, #12
 8001120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001126:	e009      	b.n	800113c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <_sbrk+0x64>)
 8001138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000a000 	.word	0x2000a000
 8001148:	00000400 	.word	0x00000400
 800114c:	20000154 	.word	0x20000154
 8001150:	200002a8 	.word	0x200002a8

08001154 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <SystemInit+0x20>)
 800115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <SystemInit+0x20>)
 8001160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800117c:	f7ff ffea 	bl	8001154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001182:	490d      	ldr	r1, [pc, #52]	; (80011b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001184:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <LoopForever+0xe>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001188:	e002      	b.n	8001190 <LoopCopyDataInit>

0800118a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800118c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118e:	3304      	adds	r3, #4

08001190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001194:	d3f9      	bcc.n	800118a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001198:	4c0a      	ldr	r4, [pc, #40]	; (80011c4 <LoopForever+0x16>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800119c:	e001      	b.n	80011a2 <LoopFillZerobss>

0800119e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a0:	3204      	adds	r2, #4

080011a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a4:	d3fb      	bcc.n	800119e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a6:	f003 fa13 	bl	80045d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011aa:	f7ff fc57 	bl	8000a5c <main>

080011ae <LoopForever>:

LoopForever:
    b LoopForever
 80011ae:	e7fe      	b.n	80011ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011b0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011bc:	08004fac 	.word	0x08004fac
  ldr r2, =_sbss
 80011c0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011c4:	200002a4 	.word	0x200002a4

080011c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC1_2_IRQHandler>
	...

080011cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_Init+0x28>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <HAL_Init+0x28>)
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011dc:	2003      	movs	r0, #3
 80011de:	f000 f931 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f000 f808 	bl	80011f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e8:	f7ff fea8 	bl	8000f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40022000 	.word	0x40022000

080011f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_InitTick+0x54>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_InitTick+0x58>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f93b 	bl	8001492 <HAL_SYSTICK_Config>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e00e      	b.n	8001244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d80a      	bhi.n	8001242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001234:	f000 f911 	bl	800145a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001238:	4a06      	ldr	r2, [pc, #24]	; (8001254 <HAL_InitTick+0x5c>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	e000      	b.n	8001244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000000 	.word	0x20000000
 8001250:	20000008 	.word	0x20000008
 8001254:	20000004 	.word	0x20000004

08001258 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x20>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_IncTick+0x24>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <HAL_IncTick+0x24>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000008 	.word	0x20000008
 800127c:	20000158 	.word	0x20000158

08001280 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;  
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <HAL_GetTick+0x14>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000158 	.word	0x20000158

08001298 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff ffee 	bl	8001280 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012b0:	d005      	beq.n	80012be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_Delay+0x44>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012be:	bf00      	nop
 80012c0:	f7ff ffde 	bl	8001280 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <HAL_Delay+0x28>
  {
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000008 	.word	0x20000008

080012e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800130c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	2b00      	cmp	r3, #0
 8001356:	db0a      	blt.n	800136e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	490c      	ldr	r1, [pc, #48]	; (8001390 <__NVIC_SetPriority+0x4c>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	0112      	lsls	r2, r2, #4
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	440b      	add	r3, r1
 8001368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800136c:	e00a      	b.n	8001384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4908      	ldr	r1, [pc, #32]	; (8001394 <__NVIC_SetPriority+0x50>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	3b04      	subs	r3, #4
 800137c:	0112      	lsls	r2, r2, #4
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	440b      	add	r3, r1
 8001382:	761a      	strb	r2, [r3, #24]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f1c3 0307 	rsb	r3, r3, #7
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf28      	it	cs
 80013b6:	2304      	movcs	r3, #4
 80013b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3304      	adds	r3, #4
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d902      	bls.n	80013c8 <NVIC_EncodePriority+0x30>
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3b03      	subs	r3, #3
 80013c6:	e000      	b.n	80013ca <NVIC_EncodePriority+0x32>
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43da      	mvns	r2, r3
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	401a      	ands	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43d9      	mvns	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	4313      	orrs	r3, r2
         );
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001410:	d301      	bcc.n	8001416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001412:	2301      	movs	r3, #1
 8001414:	e00f      	b.n	8001436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <SysTick_Config+0x40>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141e:	210f      	movs	r1, #15
 8001420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001424:	f7ff ff8e 	bl	8001344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <SysTick_Config+0x40>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <SysTick_Config+0x40>)
 8001430:	2207      	movs	r2, #7
 8001432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	e000e010 	.word	0xe000e010

08001444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff47 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800146c:	f7ff ff5c 	bl	8001328 <__NVIC_GetPriorityGrouping>
 8001470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	6978      	ldr	r0, [r7, #20]
 8001478:	f7ff ff8e 	bl	8001398 <NVIC_EncodePriority>
 800147c:	4602      	mov	r2, r0
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff5d 	bl	8001344 <__NVIC_SetPriority>
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ffb0 	bl	8001400 <SysTick_Config>
 80014a0:	4603      	mov	r3, r0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ba:	e154      	b.n	8001766 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	2101      	movs	r1, #1
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	fa01 f303 	lsl.w	r3, r1, r3
 80014c8:	4013      	ands	r3, r2
 80014ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 8146 	beq.w	8001760 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d005      	beq.n	80014ec <HAL_GPIO_Init+0x40>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d130      	bne.n	800154e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	2203      	movs	r2, #3
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001522:	2201      	movs	r2, #1
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	091b      	lsrs	r3, r3, #4
 8001538:	f003 0201 	and.w	r2, r3, #1
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b03      	cmp	r3, #3
 8001558:	d017      	beq.n	800158a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	2203      	movs	r2, #3
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d123      	bne.n	80015de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	08da      	lsrs	r2, r3, #3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3208      	adds	r2, #8
 800159e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	220f      	movs	r2, #15
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	691a      	ldr	r2, [r3, #16]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	08da      	lsrs	r2, r3, #3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3208      	adds	r2, #8
 80015d8:	6939      	ldr	r1, [r7, #16]
 80015da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 0203 	and.w	r2, r3, #3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 80a0 	beq.w	8001760 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001620:	4b58      	ldr	r3, [pc, #352]	; (8001784 <HAL_GPIO_Init+0x2d8>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a57      	ldr	r2, [pc, #348]	; (8001784 <HAL_GPIO_Init+0x2d8>)
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b55      	ldr	r3, [pc, #340]	; (8001784 <HAL_GPIO_Init+0x2d8>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001638:	4a53      	ldr	r2, [pc, #332]	; (8001788 <HAL_GPIO_Init+0x2dc>)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	089b      	lsrs	r3, r3, #2
 800163e:	3302      	adds	r3, #2
 8001640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	220f      	movs	r2, #15
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001662:	d019      	beq.n	8001698 <HAL_GPIO_Init+0x1ec>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a49      	ldr	r2, [pc, #292]	; (800178c <HAL_GPIO_Init+0x2e0>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d013      	beq.n	8001694 <HAL_GPIO_Init+0x1e8>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a48      	ldr	r2, [pc, #288]	; (8001790 <HAL_GPIO_Init+0x2e4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d00d      	beq.n	8001690 <HAL_GPIO_Init+0x1e4>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a47      	ldr	r2, [pc, #284]	; (8001794 <HAL_GPIO_Init+0x2e8>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d007      	beq.n	800168c <HAL_GPIO_Init+0x1e0>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a46      	ldr	r2, [pc, #280]	; (8001798 <HAL_GPIO_Init+0x2ec>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d101      	bne.n	8001688 <HAL_GPIO_Init+0x1dc>
 8001684:	2304      	movs	r3, #4
 8001686:	e008      	b.n	800169a <HAL_GPIO_Init+0x1ee>
 8001688:	2305      	movs	r3, #5
 800168a:	e006      	b.n	800169a <HAL_GPIO_Init+0x1ee>
 800168c:	2303      	movs	r3, #3
 800168e:	e004      	b.n	800169a <HAL_GPIO_Init+0x1ee>
 8001690:	2302      	movs	r3, #2
 8001692:	e002      	b.n	800169a <HAL_GPIO_Init+0x1ee>
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <HAL_GPIO_Init+0x1ee>
 8001698:	2300      	movs	r3, #0
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	f002 0203 	and.w	r2, r2, #3
 80016a0:	0092      	lsls	r2, r2, #2
 80016a2:	4093      	lsls	r3, r2
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016aa:	4937      	ldr	r1, [pc, #220]	; (8001788 <HAL_GPIO_Init+0x2dc>)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3302      	adds	r3, #2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016b8:	4b38      	ldr	r3, [pc, #224]	; (800179c <HAL_GPIO_Init+0x2f0>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016dc:	4a2f      	ldr	r2, [pc, #188]	; (800179c <HAL_GPIO_Init+0x2f0>)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e2:	4b2e      	ldr	r3, [pc, #184]	; (800179c <HAL_GPIO_Init+0x2f0>)
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001706:	4a25      	ldr	r2, [pc, #148]	; (800179c <HAL_GPIO_Init+0x2f0>)
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800170c:	4b23      	ldr	r3, [pc, #140]	; (800179c <HAL_GPIO_Init+0x2f0>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001730:	4a1a      	ldr	r2, [pc, #104]	; (800179c <HAL_GPIO_Init+0x2f0>)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001736:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_GPIO_Init+0x2f0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4313      	orrs	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800175a:	4a10      	ldr	r2, [pc, #64]	; (800179c <HAL_GPIO_Init+0x2f0>)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	fa22 f303 	lsr.w	r3, r2, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	f47f aea3 	bne.w	80014bc <HAL_GPIO_Init+0x10>
  }
}
 8001776:	bf00      	nop
 8001778:	bf00      	nop
 800177a:	371c      	adds	r7, #28
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	40021000 	.word	0x40021000
 8001788:	40010000 	.word	0x40010000
 800178c:	48000400 	.word	0x48000400
 8001790:	48000800 	.word	0x48000800
 8001794:	48000c00 	.word	0x48000c00
 8001798:	48001000 	.word	0x48001000
 800179c:	40010400 	.word	0x40010400

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017bc:	e002      	b.n	80017c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017be:	887a      	ldrh	r2, [r7, #2]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e08d      	b.n	80018fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d106      	bne.n	80017fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fbc4 	bl	8000f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2224      	movs	r2, #36	; 0x24
 8001800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0201 	bic.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001820:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001830:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d107      	bne.n	800184a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	e006      	b.n	8001858 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001856:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d108      	bne.n	8001872 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	e007      	b.n	8001882 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001880:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001894:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691a      	ldr	r2, [r3, #16]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69d9      	ldr	r1, [r3, #28]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1a      	ldr	r2, [r3, #32]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2220      	movs	r2, #32
 80018ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af02      	add	r7, sp, #8
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	461a      	mov	r2, r3
 8001914:	460b      	mov	r3, r1
 8001916:	817b      	strh	r3, [r7, #10]
 8001918:	4613      	mov	r3, r2
 800191a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b20      	cmp	r3, #32
 8001926:	f040 80fd 	bne.w	8001b24 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001930:	2b01      	cmp	r3, #1
 8001932:	d101      	bne.n	8001938 <HAL_I2C_Master_Transmit+0x30>
 8001934:	2302      	movs	r3, #2
 8001936:	e0f6      	b.n	8001b26 <HAL_I2C_Master_Transmit+0x21e>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001940:	f7ff fc9e 	bl	8001280 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2319      	movs	r3, #25
 800194c:	2201      	movs	r2, #1
 800194e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 fa0a 	bl	8001d6c <I2C_WaitOnFlagUntilTimeout>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0e1      	b.n	8001b26 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2221      	movs	r2, #33	; 0x21
 8001966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2210      	movs	r2, #16
 800196e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	893a      	ldrh	r2, [r7, #8]
 8001982:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198e:	b29b      	uxth	r3, r3
 8001990:	2bff      	cmp	r3, #255	; 0xff
 8001992:	d906      	bls.n	80019a2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	22ff      	movs	r2, #255	; 0xff
 8001998:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800199a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	e007      	b.n	80019b2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80019ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019b0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d024      	beq.n	8001a04 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	3301      	adds	r3, #1
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	8979      	ldrh	r1, [r7, #10]
 80019f6:	4b4e      	ldr	r3, [pc, #312]	; (8001b30 <HAL_I2C_Master_Transmit+0x228>)
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f000 fc05 	bl	800220c <I2C_TransferConfig>
 8001a02:	e066      	b.n	8001ad2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	8979      	ldrh	r1, [r7, #10]
 8001a0c:	4b48      	ldr	r3, [pc, #288]	; (8001b30 <HAL_I2C_Master_Transmit+0x228>)
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 fbfa 	bl	800220c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001a18:	e05b      	b.n	8001ad2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	6a39      	ldr	r1, [r7, #32]
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 f9fd 	bl	8001e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e07b      	b.n	8001b26 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	781a      	ldrb	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d034      	beq.n	8001ad2 <HAL_I2C_Master_Transmit+0x1ca>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d130      	bne.n	8001ad2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	2200      	movs	r2, #0
 8001a78:	2180      	movs	r1, #128	; 0x80
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 f976 	bl	8001d6c <I2C_WaitOnFlagUntilTimeout>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e04d      	b.n	8001b26 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	2bff      	cmp	r3, #255	; 0xff
 8001a92:	d90e      	bls.n	8001ab2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	22ff      	movs	r2, #255	; 0xff
 8001a98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	8979      	ldrh	r1, [r7, #10]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 fbae 	bl	800220c <I2C_TransferConfig>
 8001ab0:	e00f      	b.n	8001ad2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	8979      	ldrh	r1, [r7, #10]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 fb9d 	bl	800220c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d19e      	bne.n	8001a1a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	6a39      	ldr	r1, [r7, #32]
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f000 f9e3 	bl	8001eac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e01a      	b.n	8001b26 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2220      	movs	r2, #32
 8001af6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6859      	ldr	r1, [r3, #4]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <HAL_I2C_Master_Transmit+0x22c>)
 8001b04:	400b      	ands	r3, r1
 8001b06:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e000      	b.n	8001b26 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001b24:	2302      	movs	r3, #2
  }
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	80002000 	.word	0x80002000
 8001b34:	fe00e800 	.word	0xfe00e800

08001b38 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	461a      	mov	r2, r3
 8001b44:	460b      	mov	r3, r1
 8001b46:	817b      	strh	r3, [r7, #10]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b20      	cmp	r3, #32
 8001b56:	f040 80db 	bne.w	8001d10 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_I2C_Master_Receive+0x30>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e0d4      	b.n	8001d12 <HAL_I2C_Master_Receive+0x1da>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b70:	f7ff fb86 	bl	8001280 <HAL_GetTick>
 8001b74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2319      	movs	r3, #25
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f8f2 	bl	8001d6c <I2C_WaitOnFlagUntilTimeout>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e0bf      	b.n	8001d12 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2222      	movs	r2, #34	; 0x22
 8001b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2210      	movs	r2, #16
 8001b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	893a      	ldrh	r2, [r7, #8]
 8001bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	2bff      	cmp	r3, #255	; 0xff
 8001bc2:	d90e      	bls.n	8001be2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	8979      	ldrh	r1, [r7, #10]
 8001bd2:	4b52      	ldr	r3, [pc, #328]	; (8001d1c <HAL_I2C_Master_Receive+0x1e4>)
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 fb16 	bl	800220c <I2C_TransferConfig>
 8001be0:	e06d      	b.n	8001cbe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	8979      	ldrh	r1, [r7, #10]
 8001bf4:	4b49      	ldr	r3, [pc, #292]	; (8001d1c <HAL_I2C_Master_Receive+0x1e4>)
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 fb05 	bl	800220c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001c02:	e05c      	b.n	8001cbe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	6a39      	ldr	r1, [r7, #32]
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f000 f993 	bl	8001f34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e07c      	b.n	8001d12 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d034      	beq.n	8001cbe <HAL_I2C_Master_Receive+0x186>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d130      	bne.n	8001cbe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	2200      	movs	r2, #0
 8001c64:	2180      	movs	r1, #128	; 0x80
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 f880 	bl	8001d6c <I2C_WaitOnFlagUntilTimeout>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e04d      	b.n	8001d12 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	2bff      	cmp	r3, #255	; 0xff
 8001c7e:	d90e      	bls.n	8001c9e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	22ff      	movs	r2, #255	; 0xff
 8001c84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	8979      	ldrh	r1, [r7, #10]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 fab8 	bl	800220c <I2C_TransferConfig>
 8001c9c:	e00f      	b.n	8001cbe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	8979      	ldrh	r1, [r7, #10]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 faa7 	bl	800220c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d19d      	bne.n	8001c04 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	6a39      	ldr	r1, [r7, #32]
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 f8ed 	bl	8001eac <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e01a      	b.n	8001d12 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6859      	ldr	r1, [r3, #4]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <HAL_I2C_Master_Receive+0x1e8>)
 8001cf0:	400b      	ands	r3, r1
 8001cf2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e000      	b.n	8001d12 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001d10:	2302      	movs	r3, #2
  }
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	80002400 	.word	0x80002400
 8001d20:	fe00e800 	.word	0xfe00e800

08001d24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d103      	bne.n	8001d42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d007      	beq.n	8001d60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699a      	ldr	r2, [r3, #24]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	619a      	str	r2, [r3, #24]
  }
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d7c:	e03b      	b.n	8001df6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	6839      	ldr	r1, [r7, #0]
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 f962 	bl	800204c <I2C_IsErrorOccurred>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e041      	b.n	8001e16 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d98:	d02d      	beq.n	8001df6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d9a:	f7ff fa71 	bl	8001280 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d302      	bcc.n	8001db0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d122      	bne.n	8001df6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699a      	ldr	r2, [r3, #24]
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	4013      	ands	r3, r2
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	bf0c      	ite	eq
 8001dc0:	2301      	moveq	r3, #1
 8001dc2:	2300      	movne	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d113      	bne.n	8001df6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f043 0220 	orr.w	r2, r3, #32
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00f      	b.n	8001e16 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699a      	ldr	r2, [r3, #24]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	bf0c      	ite	eq
 8001e06:	2301      	moveq	r3, #1
 8001e08:	2300      	movne	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d0b4      	beq.n	8001d7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e2a:	e033      	b.n	8001e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	68b9      	ldr	r1, [r7, #8]
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 f90b 	bl	800204c <I2C_IsErrorOccurred>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e031      	b.n	8001ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e46:	d025      	beq.n	8001e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e48:	f7ff fa1a 	bl	8001280 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d302      	bcc.n	8001e5e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d11a      	bne.n	8001e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d013      	beq.n	8001e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e70:	f043 0220 	orr.w	r2, r3, #32
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e007      	b.n	8001ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d1c4      	bne.n	8001e2c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eb8:	e02f      	b.n	8001f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 f8c4 	bl	800204c <I2C_IsErrorOccurred>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e02d      	b.n	8001f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ece:	f7ff f9d7 	bl	8001280 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d302      	bcc.n	8001ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d11a      	bne.n	8001f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b20      	cmp	r3, #32
 8001ef0:	d013      	beq.n	8001f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f043 0220 	orr.w	r2, r3, #32
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2220      	movs	r2, #32
 8001f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e007      	b.n	8001f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0320 	and.w	r3, r3, #32
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d1c8      	bne.n	8001eba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001f44:	e071      	b.n	800202a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 f87e 	bl	800204c <I2C_IsErrorOccurred>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d13b      	bne.n	8001fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d138      	bne.n	8001fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d105      	bne.n	8001f88 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b10      	cmp	r3, #16
 8001f94:	d121      	bne.n	8001fda <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6859      	ldr	r1, [r3, #4]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001fb8:	400b      	ands	r3, r1
 8001fba:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	75fb      	strb	r3, [r7, #23]
 8001fd8:	e002      	b.n	8001fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001fe0:	f7ff f94e 	bl	8001280 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d302      	bcc.n	8001ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d119      	bne.n	800202a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001ff6:	7dfb      	ldrb	r3, [r7, #23]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d116      	bne.n	800202a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b04      	cmp	r3, #4
 8002008:	d00f      	beq.n	800202a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f043 0220 	orr.w	r2, r3, #32
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2220      	movs	r2, #32
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b04      	cmp	r3, #4
 8002036:	d002      	beq.n	800203e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002038:	7dfb      	ldrb	r3, [r7, #23]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d083      	beq.n	8001f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800203e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	fe00e800 	.word	0xfe00e800

0800204c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	; 0x28
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b00      	cmp	r3, #0
 8002076:	d068      	beq.n	800214a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2210      	movs	r2, #16
 800207e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002080:	e049      	b.n	8002116 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002088:	d045      	beq.n	8002116 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800208a:	f7ff f8f9 	bl	8001280 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	429a      	cmp	r2, r3
 8002098:	d302      	bcc.n	80020a0 <I2C_IsErrorOccurred+0x54>
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d13a      	bne.n	8002116 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c2:	d121      	bne.n	8002108 <I2C_IsErrorOccurred+0xbc>
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020ca:	d01d      	beq.n	8002108 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80020cc:	7cfb      	ldrb	r3, [r7, #19]
 80020ce:	2b20      	cmp	r3, #32
 80020d0:	d01a      	beq.n	8002108 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80020e2:	f7ff f8cd 	bl	8001280 <HAL_GetTick>
 80020e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020e8:	e00e      	b.n	8002108 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80020ea:	f7ff f8c9 	bl	8001280 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b19      	cmp	r3, #25
 80020f6:	d907      	bls.n	8002108 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	f043 0320 	orr.w	r3, r3, #32
 80020fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002106:	e006      	b.n	8002116 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	2b20      	cmp	r3, #32
 8002114:	d1e9      	bne.n	80020ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b20      	cmp	r3, #32
 8002122:	d003      	beq.n	800212c <I2C_IsErrorOccurred+0xe0>
 8002124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0aa      	beq.n	8002082 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800212c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002130:	2b00      	cmp	r3, #0
 8002132:	d103      	bne.n	800213c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2220      	movs	r2, #32
 800213a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800213c:	6a3b      	ldr	r3, [r7, #32]
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00b      	beq.n	8002174 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800216c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00b      	beq.n	8002196 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	f043 0308 	orr.w	r3, r3, #8
 8002184:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800218e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00b      	beq.n	80021b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	f043 0302 	orr.w	r3, r3, #2
 80021a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80021b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d01c      	beq.n	80021fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7ff fdaf 	bl	8001d24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <I2C_IsErrorOccurred+0x1bc>)
 80021d2:	400b      	ands	r3, r1
 80021d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	431a      	orrs	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2220      	movs	r2, #32
 80021e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80021fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3728      	adds	r7, #40	; 0x28
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	fe00e800 	.word	0xfe00e800

0800220c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	817b      	strh	r3, [r7, #10]
 800221a:	4613      	mov	r3, r2
 800221c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800221e:	897b      	ldrh	r3, [r7, #10]
 8002220:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002224:	7a7b      	ldrb	r3, [r7, #9]
 8002226:	041b      	lsls	r3, r3, #16
 8002228:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800222c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	4313      	orrs	r3, r2
 8002236:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800223a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	0d5b      	lsrs	r3, r3, #21
 8002246:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <I2C_TransferConfig+0x60>)
 800224c:	430b      	orrs	r3, r1
 800224e:	43db      	mvns	r3, r3
 8002250:	ea02 0103 	and.w	r1, r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	430a      	orrs	r2, r1
 800225c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800225e:	bf00      	nop
 8002260:	371c      	adds	r7, #28
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	03ff63ff 	.word	0x03ff63ff

08002270 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b20      	cmp	r3, #32
 8002284:	d138      	bne.n	80022f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002290:	2302      	movs	r3, #2
 8002292:	e032      	b.n	80022fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2224      	movs	r2, #36	; 0x24
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6819      	ldr	r1, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e000      	b.n	80022fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022f8:	2302      	movs	r3, #2
  }
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002306:	b480      	push	{r7}
 8002308:	b085      	sub	sp, #20
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b20      	cmp	r3, #32
 800231a:	d139      	bne.n	8002390 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002326:	2302      	movs	r3, #2
 8002328:	e033      	b.n	8002392 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2224      	movs	r2, #36	; 0x24
 8002336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0201 	bic.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002358:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2220      	movs	r2, #32
 8002380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800238c:	2300      	movs	r3, #0
 800238e:	e000      	b.n	8002392 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002390:	2302      	movs	r3, #2
  }
}
 8002392:	4618      	mov	r0, r3
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023b0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	f001 b823 	b.w	800340c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 817d 	beq.w	80026d6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023dc:	4bbc      	ldr	r3, [pc, #752]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d00c      	beq.n	8002402 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023e8:	4bb9      	ldr	r3, [pc, #740]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d15c      	bne.n	80024ae <HAL_RCC_OscConfig+0x10e>
 80023f4:	4bb6      	ldr	r3, [pc, #728]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002400:	d155      	bne.n	80024ae <HAL_RCC_OscConfig+0x10e>
 8002402:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002406:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002416:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d102      	bne.n	8002434 <HAL_RCC_OscConfig+0x94>
 800242e:	4ba8      	ldr	r3, [pc, #672]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	e015      	b.n	8002460 <HAL_RCC_OscConfig+0xc0>
 8002434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002438:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800244c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002450:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800245c:	4b9c      	ldr	r3, [pc, #624]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002464:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002468:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800246c:	fa92 f2a2 	rbit	r2, r2
 8002470:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002474:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002478:	fab2 f282 	clz	r2, r2
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	f042 0220 	orr.w	r2, r2, #32
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	f002 021f 	and.w	r2, r2, #31
 8002488:	2101      	movs	r1, #1
 800248a:	fa01 f202 	lsl.w	r2, r1, r2
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 811f 	beq.w	80026d4 <HAL_RCC_OscConfig+0x334>
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f040 8116 	bne.w	80026d4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	f000 bfaf 	b.w	800340c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024be:	d106      	bne.n	80024ce <HAL_RCC_OscConfig+0x12e>
 80024c0:	4b83      	ldr	r3, [pc, #524]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a82      	ldr	r2, [pc, #520]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 80024c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	e036      	b.n	800253c <HAL_RCC_OscConfig+0x19c>
 80024ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x158>
 80024de:	4b7c      	ldr	r3, [pc, #496]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a7b      	ldr	r2, [pc, #492]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 80024e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	4b79      	ldr	r3, [pc, #484]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a78      	ldr	r2, [pc, #480]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 80024f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e021      	b.n	800253c <HAL_RCC_OscConfig+0x19c>
 80024f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002508:	d10c      	bne.n	8002524 <HAL_RCC_OscConfig+0x184>
 800250a:	4b71      	ldr	r3, [pc, #452]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a70      	ldr	r2, [pc, #448]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 8002510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	4b6e      	ldr	r3, [pc, #440]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a6d      	ldr	r2, [pc, #436]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 800251c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e00b      	b.n	800253c <HAL_RCC_OscConfig+0x19c>
 8002524:	4b6a      	ldr	r3, [pc, #424]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a69      	ldr	r2, [pc, #420]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 800252a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	4b67      	ldr	r3, [pc, #412]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a66      	ldr	r2, [pc, #408]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 8002536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800253c:	4b64      	ldr	r3, [pc, #400]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	f023 020f 	bic.w	r2, r3, #15
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	495f      	ldr	r1, [pc, #380]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 8002552:	4313      	orrs	r3, r2
 8002554:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800255a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d059      	beq.n	800261a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7fe fe8b 	bl	8001280 <HAL_GetTick>
 800256a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	e00a      	b.n	8002586 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002570:	f7fe fe86 	bl	8001280 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b64      	cmp	r3, #100	; 0x64
 800257e:	d902      	bls.n	8002586 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	f000 bf43 	b.w	800340c <HAL_RCC_OscConfig+0x106c>
 8002586:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800258a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800259a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d102      	bne.n	80025b8 <HAL_RCC_OscConfig+0x218>
 80025b2:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	e015      	b.n	80025e4 <HAL_RCC_OscConfig+0x244>
 80025b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025bc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80025cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025d0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80025d4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80025e0:	4b3b      	ldr	r3, [pc, #236]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025e8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80025ec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025f0:	fa92 f2a2 	rbit	r2, r2
 80025f4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80025f8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80025fc:	fab2 f282 	clz	r2, r2
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	f042 0220 	orr.w	r2, r2, #32
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	f002 021f 	and.w	r2, r2, #31
 800260c:	2101      	movs	r1, #1
 800260e:	fa01 f202 	lsl.w	r2, r1, r2
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ab      	beq.n	8002570 <HAL_RCC_OscConfig+0x1d0>
 8002618:	e05d      	b.n	80026d6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261a:	f7fe fe31 	bl	8001280 <HAL_GetTick>
 800261e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	e00a      	b.n	800263a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002624:	f7fe fe2c 	bl	8001280 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b64      	cmp	r3, #100	; 0x64
 8002632:	d902      	bls.n	800263a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	f000 bee9 	b.w	800340c <HAL_RCC_OscConfig+0x106c>
 800263a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800263e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800264e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d102      	bne.n	800266c <HAL_RCC_OscConfig+0x2cc>
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	e015      	b.n	8002698 <HAL_RCC_OscConfig+0x2f8>
 800266c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002670:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002680:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002684:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002688:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <HAL_RCC_OscConfig+0x330>)
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800269c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80026a0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80026a4:	fa92 f2a2 	rbit	r2, r2
 80026a8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80026ac:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80026b0:	fab2 f282 	clz	r2, r2
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	f042 0220 	orr.w	r2, r2, #32
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	f002 021f 	and.w	r2, r2, #31
 80026c0:	2101      	movs	r1, #1
 80026c2:	fa01 f202 	lsl.w	r2, r1, r2
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1ab      	bne.n	8002624 <HAL_RCC_OscConfig+0x284>
 80026cc:	e003      	b.n	80026d6 <HAL_RCC_OscConfig+0x336>
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 817d 	beq.w	80029e6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026ec:	4ba6      	ldr	r3, [pc, #664]	; (8002988 <HAL_RCC_OscConfig+0x5e8>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00b      	beq.n	8002710 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026f8:	4ba3      	ldr	r3, [pc, #652]	; (8002988 <HAL_RCC_OscConfig+0x5e8>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b08      	cmp	r3, #8
 8002702:	d172      	bne.n	80027ea <HAL_RCC_OscConfig+0x44a>
 8002704:	4ba0      	ldr	r3, [pc, #640]	; (8002988 <HAL_RCC_OscConfig+0x5e8>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d16c      	bne.n	80027ea <HAL_RCC_OscConfig+0x44a>
 8002710:	2302      	movs	r3, #2
 8002712:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002716:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002722:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b01      	cmp	r3, #1
 8002738:	d102      	bne.n	8002740 <HAL_RCC_OscConfig+0x3a0>
 800273a:	4b93      	ldr	r3, [pc, #588]	; (8002988 <HAL_RCC_OscConfig+0x5e8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	e013      	b.n	8002768 <HAL_RCC_OscConfig+0x3c8>
 8002740:	2302      	movs	r3, #2
 8002742:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002752:	2302      	movs	r3, #2
 8002754:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002758:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002764:	4b88      	ldr	r3, [pc, #544]	; (8002988 <HAL_RCC_OscConfig+0x5e8>)
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	2202      	movs	r2, #2
 800276a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800276e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002772:	fa92 f2a2 	rbit	r2, r2
 8002776:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800277a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800277e:	fab2 f282 	clz	r2, r2
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	f042 0220 	orr.w	r2, r2, #32
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	f002 021f 	and.w	r2, r2, #31
 800278e:	2101      	movs	r1, #1
 8002790:	fa01 f202 	lsl.w	r2, r1, r2
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <HAL_RCC_OscConfig+0x410>
 800279a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d002      	beq.n	80027b0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f000 be2e 	b.w	800340c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b0:	4b75      	ldr	r3, [pc, #468]	; (8002988 <HAL_RCC_OscConfig+0x5e8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	21f8      	movs	r1, #248	; 0xf8
 80027c6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80027ce:	fa91 f1a1 	rbit	r1, r1
 80027d2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80027d6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80027da:	fab1 f181 	clz	r1, r1
 80027de:	b2c9      	uxtb	r1, r1
 80027e0:	408b      	lsls	r3, r1
 80027e2:	4969      	ldr	r1, [pc, #420]	; (8002988 <HAL_RCC_OscConfig+0x5e8>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e8:	e0fd      	b.n	80029e6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 8088 	beq.w	800290c <HAL_RCC_OscConfig+0x56c>
 80027fc:	2301      	movs	r3, #1
 80027fe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002806:	fa93 f3a3 	rbit	r3, r3
 800280a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800280e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800281c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	461a      	mov	r2, r3
 8002824:	2301      	movs	r3, #1
 8002826:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7fe fd2a 	bl	8001280 <HAL_GetTick>
 800282c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002830:	e00a      	b.n	8002848 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002832:	f7fe fd25 	bl	8001280 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d902      	bls.n	8002848 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	f000 bde2 	b.w	800340c <HAL_RCC_OscConfig+0x106c>
 8002848:	2302      	movs	r3, #2
 800284a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800285a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d102      	bne.n	8002878 <HAL_RCC_OscConfig+0x4d8>
 8002872:	4b45      	ldr	r3, [pc, #276]	; (8002988 <HAL_RCC_OscConfig+0x5e8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	e013      	b.n	80028a0 <HAL_RCC_OscConfig+0x500>
 8002878:	2302      	movs	r3, #2
 800287a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800288a:	2302      	movs	r3, #2
 800288c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002890:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800289c:	4b3a      	ldr	r3, [pc, #232]	; (8002988 <HAL_RCC_OscConfig+0x5e8>)
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	2202      	movs	r2, #2
 80028a2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80028a6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80028aa:	fa92 f2a2 	rbit	r2, r2
 80028ae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80028b2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80028b6:	fab2 f282 	clz	r2, r2
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	f042 0220 	orr.w	r2, r2, #32
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	f002 021f 	and.w	r2, r2, #31
 80028c6:	2101      	movs	r1, #1
 80028c8:	fa01 f202 	lsl.w	r2, r1, r2
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0af      	beq.n	8002832 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d2:	4b2d      	ldr	r3, [pc, #180]	; (8002988 <HAL_RCC_OscConfig+0x5e8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	21f8      	movs	r1, #248	; 0xf8
 80028e8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ec:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80028f0:	fa91 f1a1 	rbit	r1, r1
 80028f4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80028f8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80028fc:	fab1 f181 	clz	r1, r1
 8002900:	b2c9      	uxtb	r1, r1
 8002902:	408b      	lsls	r3, r1
 8002904:	4920      	ldr	r1, [pc, #128]	; (8002988 <HAL_RCC_OscConfig+0x5e8>)
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
 800290a:	e06c      	b.n	80029e6 <HAL_RCC_OscConfig+0x646>
 800290c:	2301      	movs	r3, #1
 800290e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002912:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002916:	fa93 f3a3 	rbit	r3, r3
 800291a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800291e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002922:	fab3 f383 	clz	r3, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800292c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	461a      	mov	r2, r3
 8002934:	2300      	movs	r3, #0
 8002936:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7fe fca2 	bl	8001280 <HAL_GetTick>
 800293c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002940:	e00a      	b.n	8002958 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002942:	f7fe fc9d 	bl	8001280 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d902      	bls.n	8002958 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	f000 bd5a 	b.w	800340c <HAL_RCC_OscConfig+0x106c>
 8002958:	2302      	movs	r3, #2
 800295a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800296a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	095b      	lsrs	r3, r3, #5
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d104      	bne.n	800298c <HAL_RCC_OscConfig+0x5ec>
 8002982:	4b01      	ldr	r3, [pc, #4]	; (8002988 <HAL_RCC_OscConfig+0x5e8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	e015      	b.n	80029b4 <HAL_RCC_OscConfig+0x614>
 8002988:	40021000 	.word	0x40021000
 800298c:	2302      	movs	r3, #2
 800298e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800299e:	2302      	movs	r3, #2
 80029a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80029a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80029b0:	4bc8      	ldr	r3, [pc, #800]	; (8002cd4 <HAL_RCC_OscConfig+0x934>)
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	2202      	movs	r2, #2
 80029b6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80029ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80029be:	fa92 f2a2 	rbit	r2, r2
 80029c2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80029c6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80029ca:	fab2 f282 	clz	r2, r2
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	f042 0220 	orr.w	r2, r2, #32
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	f002 021f 	and.w	r2, r2, #31
 80029da:	2101      	movs	r1, #1
 80029dc:	fa01 f202 	lsl.w	r2, r1, r2
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1ad      	bne.n	8002942 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 8110 	beq.w	8002c1c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d079      	beq.n	8002b00 <HAL_RCC_OscConfig+0x760>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4bab      	ldr	r3, [pc, #684]	; (8002cd8 <HAL_RCC_OscConfig+0x938>)
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	461a      	mov	r2, r3
 8002a32:	2301      	movs	r3, #1
 8002a34:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a36:	f7fe fc23 	bl	8001280 <HAL_GetTick>
 8002a3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3e:	e00a      	b.n	8002a56 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a40:	f7fe fc1e 	bl	8001280 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d902      	bls.n	8002a56 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	f000 bcdb 	b.w	800340c <HAL_RCC_OscConfig+0x106c>
 8002a56:	2302      	movs	r3, #2
 8002a58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a70:	2202      	movs	r2, #2
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a78:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	fa93 f2a3 	rbit	r2, r3
 8002a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a94:	2202      	movs	r2, #2
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	fa93 f2a3 	rbit	r2, r3
 8002aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aaa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002aae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab0:	4b88      	ldr	r3, [pc, #544]	; (8002cd4 <HAL_RCC_OscConfig+0x934>)
 8002ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002abc:	2102      	movs	r1, #2
 8002abe:	6019      	str	r1, [r3, #0]
 8002ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	fa93 f1a3 	rbit	r1, r3
 8002ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ad6:	6019      	str	r1, [r3, #0]
  return result;
 8002ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002adc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f303 	lsl.w	r3, r1, r3
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0a0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x6a0>
 8002afe:	e08d      	b.n	8002c1c <HAL_RCC_OscConfig+0x87c>
 8002b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b04:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b10:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	fa93 f2a3 	rbit	r2, r3
 8002b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b22:	601a      	str	r2, [r3, #0]
  return result;
 8002b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b28:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b2c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b2e:	fab3 f383 	clz	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b68      	ldr	r3, [pc, #416]	; (8002cd8 <HAL_RCC_OscConfig+0x938>)
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2300      	movs	r3, #0
 8002b40:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b42:	f7fe fb9d 	bl	8001280 <HAL_GetTick>
 8002b46:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b4c:	f7fe fb98 	bl	8001280 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d902      	bls.n	8002b62 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	f000 bc55 	b.w	800340c <HAL_RCC_OscConfig+0x106c>
 8002b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b66:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b72:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	fa93 f2a3 	rbit	r2, r3
 8002b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b80:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b8e:	2202      	movs	r2, #2
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	fa93 f2a3 	rbit	r2, r3
 8002ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	fa93 f2a3 	rbit	r2, r3
 8002bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002bcc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bce:	4b41      	ldr	r3, [pc, #260]	; (8002cd4 <HAL_RCC_OscConfig+0x934>)
 8002bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002bda:	2102      	movs	r1, #2
 8002bdc:	6019      	str	r1, [r3, #0]
 8002bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	fa93 f1a3 	rbit	r1, r3
 8002bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002bf4:	6019      	str	r1, [r3, #0]
  return result;
 8002bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	fab3 f383 	clz	r3, r3
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	2101      	movs	r1, #1
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d197      	bne.n	8002b4c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 81a1 	beq.w	8002f74 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c38:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <HAL_RCC_OscConfig+0x934>)
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d116      	bne.n	8002c72 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c44:	4b23      	ldr	r3, [pc, #140]	; (8002cd4 <HAL_RCC_OscConfig+0x934>)
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	4a22      	ldr	r2, [pc, #136]	; (8002cd4 <HAL_RCC_OscConfig+0x934>)
 8002c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	61d3      	str	r3, [r2, #28]
 8002c50:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <HAL_RCC_OscConfig+0x934>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c5c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c66:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002c6a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c72:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <HAL_RCC_OscConfig+0x93c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d11a      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <HAL_RCC_OscConfig+0x93c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a16      	ldr	r2, [pc, #88]	; (8002cdc <HAL_RCC_OscConfig+0x93c>)
 8002c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c88:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c8a:	f7fe faf9 	bl	8001280 <HAL_GetTick>
 8002c8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c92:	e009      	b.n	8002ca8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c94:	f7fe faf4 	bl	8001280 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b64      	cmp	r3, #100	; 0x64
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e3b1      	b.n	800340c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <HAL_RCC_OscConfig+0x93c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ef      	beq.n	8002c94 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d10d      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x940>
 8002cc4:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <HAL_RCC_OscConfig+0x934>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	4a02      	ldr	r2, [pc, #8]	; (8002cd4 <HAL_RCC_OscConfig+0x934>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	6213      	str	r3, [r2, #32]
 8002cd0:	e03c      	b.n	8002d4c <HAL_RCC_OscConfig+0x9ac>
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	10908120 	.word	0x10908120
 8002cdc:	40007000 	.word	0x40007000
 8002ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10c      	bne.n	8002d0a <HAL_RCC_OscConfig+0x96a>
 8002cf0:	4bc1      	ldr	r3, [pc, #772]	; (8002ff8 <HAL_RCC_OscConfig+0xc58>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	4ac0      	ldr	r2, [pc, #768]	; (8002ff8 <HAL_RCC_OscConfig+0xc58>)
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	6213      	str	r3, [r2, #32]
 8002cfc:	4bbe      	ldr	r3, [pc, #760]	; (8002ff8 <HAL_RCC_OscConfig+0xc58>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	4abd      	ldr	r2, [pc, #756]	; (8002ff8 <HAL_RCC_OscConfig+0xc58>)
 8002d02:	f023 0304 	bic.w	r3, r3, #4
 8002d06:	6213      	str	r3, [r2, #32]
 8002d08:	e020      	b.n	8002d4c <HAL_RCC_OscConfig+0x9ac>
 8002d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	2b05      	cmp	r3, #5
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x994>
 8002d1a:	4bb7      	ldr	r3, [pc, #732]	; (8002ff8 <HAL_RCC_OscConfig+0xc58>)
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	4ab6      	ldr	r2, [pc, #728]	; (8002ff8 <HAL_RCC_OscConfig+0xc58>)
 8002d20:	f043 0304 	orr.w	r3, r3, #4
 8002d24:	6213      	str	r3, [r2, #32]
 8002d26:	4bb4      	ldr	r3, [pc, #720]	; (8002ff8 <HAL_RCC_OscConfig+0xc58>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4ab3      	ldr	r2, [pc, #716]	; (8002ff8 <HAL_RCC_OscConfig+0xc58>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6213      	str	r3, [r2, #32]
 8002d32:	e00b      	b.n	8002d4c <HAL_RCC_OscConfig+0x9ac>
 8002d34:	4bb0      	ldr	r3, [pc, #704]	; (8002ff8 <HAL_RCC_OscConfig+0xc58>)
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	4aaf      	ldr	r2, [pc, #700]	; (8002ff8 <HAL_RCC_OscConfig+0xc58>)
 8002d3a:	f023 0301 	bic.w	r3, r3, #1
 8002d3e:	6213      	str	r3, [r2, #32]
 8002d40:	4bad      	ldr	r3, [pc, #692]	; (8002ff8 <HAL_RCC_OscConfig+0xc58>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	4aac      	ldr	r2, [pc, #688]	; (8002ff8 <HAL_RCC_OscConfig+0xc58>)
 8002d46:	f023 0304 	bic.w	r3, r3, #4
 8002d4a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8081 	beq.w	8002e60 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5e:	f7fe fa8f 	bl	8001280 <HAL_GetTick>
 8002d62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d66:	e00b      	b.n	8002d80 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d68:	f7fe fa8a 	bl	8001280 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e345      	b.n	800340c <HAL_RCC_OscConfig+0x106c>
 8002d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d84:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d88:	2202      	movs	r2, #2
 8002d8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d90:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	fa93 f2a3 	rbit	r2, r3
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002dac:	2202      	movs	r2, #2
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	fa93 f2a3 	rbit	r2, r3
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002dc6:	601a      	str	r2, [r3, #0]
  return result;
 8002dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dcc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002dd0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	f043 0302 	orr.w	r3, r3, #2
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d102      	bne.n	8002dec <HAL_RCC_OscConfig+0xa4c>
 8002de6:	4b84      	ldr	r3, [pc, #528]	; (8002ff8 <HAL_RCC_OscConfig+0xc58>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	e013      	b.n	8002e14 <HAL_RCC_OscConfig+0xa74>
 8002dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002df4:	2202      	movs	r2, #2
 8002df6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	fa93 f2a3 	rbit	r2, r3
 8002e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	4b79      	ldr	r3, [pc, #484]	; (8002ff8 <HAL_RCC_OscConfig+0xc58>)
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e18:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e1c:	2102      	movs	r1, #2
 8002e1e:	6011      	str	r1, [r2, #0]
 8002e20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e24:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	fa92 f1a2 	rbit	r1, r2
 8002e2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e32:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e36:	6011      	str	r1, [r2, #0]
  return result;
 8002e38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e3c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	fab2 f282 	clz	r2, r2
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	f002 021f 	and.w	r2, r2, #31
 8002e52:	2101      	movs	r1, #1
 8002e54:	fa01 f202 	lsl.w	r2, r1, r2
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d084      	beq.n	8002d68 <HAL_RCC_OscConfig+0x9c8>
 8002e5e:	e07f      	b.n	8002f60 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e60:	f7fe fa0e 	bl	8001280 <HAL_GetTick>
 8002e64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e68:	e00b      	b.n	8002e82 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fe fa09 	bl	8001280 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e2c4      	b.n	800340c <HAL_RCC_OscConfig+0x106c>
 8002e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e86:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e92:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	fa93 f2a3 	rbit	r2, r3
 8002e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eaa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002eae:	2202      	movs	r2, #2
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	fa93 f2a3 	rbit	r2, r3
 8002ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ec8:	601a      	str	r2, [r3, #0]
  return result;
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ed2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	f043 0302 	orr.w	r3, r3, #2
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d102      	bne.n	8002eee <HAL_RCC_OscConfig+0xb4e>
 8002ee8:	4b43      	ldr	r3, [pc, #268]	; (8002ff8 <HAL_RCC_OscConfig+0xc58>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	e013      	b.n	8002f16 <HAL_RCC_OscConfig+0xb76>
 8002eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	fa93 f2a3 	rbit	r2, r3
 8002f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	4b39      	ldr	r3, [pc, #228]	; (8002ff8 <HAL_RCC_OscConfig+0xc58>)
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f1a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f1e:	2102      	movs	r1, #2
 8002f20:	6011      	str	r1, [r2, #0]
 8002f22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f26:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	fa92 f1a2 	rbit	r1, r2
 8002f30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f34:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f38:	6011      	str	r1, [r2, #0]
  return result;
 8002f3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f3e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	fab2 f282 	clz	r2, r2
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	f002 021f 	and.w	r2, r2, #31
 8002f54:	2101      	movs	r1, #1
 8002f56:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d184      	bne.n	8002e6a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f60:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d105      	bne.n	8002f74 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f68:	4b23      	ldr	r3, [pc, #140]	; (8002ff8 <HAL_RCC_OscConfig+0xc58>)
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	4a22      	ldr	r2, [pc, #136]	; (8002ff8 <HAL_RCC_OscConfig+0xc58>)
 8002f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f72:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 8242 	beq.w	800340a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f86:	4b1c      	ldr	r3, [pc, #112]	; (8002ff8 <HAL_RCC_OscConfig+0xc58>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	f000 8213 	beq.w	80033ba <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	f040 8162 	bne.w	800326a <HAL_RCC_OscConfig+0xeca>
 8002fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002faa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002fae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	fa93 f2a3 	rbit	r2, r3
 8002fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fca:	601a      	str	r2, [r3, #0]
  return result;
 8002fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fd4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fe0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	2300      	movs	r3, #0
 8002fea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fe f948 	bl	8001280 <HAL_GetTick>
 8002ff0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff4:	e00c      	b.n	8003010 <HAL_RCC_OscConfig+0xc70>
 8002ff6:	bf00      	nop
 8002ff8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ffc:	f7fe f940 	bl	8001280 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e1fd      	b.n	800340c <HAL_RCC_OscConfig+0x106c>
 8003010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003014:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003018:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800301c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003022:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	fa93 f2a3 	rbit	r2, r3
 800302c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003030:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003034:	601a      	str	r2, [r3, #0]
  return result;
 8003036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800303e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003040:	fab3 f383 	clz	r3, r3
 8003044:	b2db      	uxtb	r3, r3
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	b2db      	uxtb	r3, r3
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d102      	bne.n	800305a <HAL_RCC_OscConfig+0xcba>
 8003054:	4bb0      	ldr	r3, [pc, #704]	; (8003318 <HAL_RCC_OscConfig+0xf78>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	e027      	b.n	80030aa <HAL_RCC_OscConfig+0xd0a>
 800305a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003062:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003066:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	fa93 f2a3 	rbit	r2, r3
 8003076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003084:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003088:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003092:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	fa93 f2a3 	rbit	r2, r3
 800309c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	4b9c      	ldr	r3, [pc, #624]	; (8003318 <HAL_RCC_OscConfig+0xf78>)
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030ae:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80030b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030b6:	6011      	str	r1, [r2, #0]
 80030b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030bc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	fa92 f1a2 	rbit	r1, r2
 80030c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030ca:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030ce:	6011      	str	r1, [r2, #0]
  return result;
 80030d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030d4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	fab2 f282 	clz	r2, r2
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	f042 0220 	orr.w	r2, r2, #32
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	f002 021f 	and.w	r2, r2, #31
 80030ea:	2101      	movs	r1, #1
 80030ec:	fa01 f202 	lsl.w	r2, r1, r2
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d182      	bne.n	8002ffc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030f6:	4b88      	ldr	r3, [pc, #544]	; (8003318 <HAL_RCC_OscConfig+0xf78>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003102:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800310a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	430b      	orrs	r3, r1
 8003118:	497f      	ldr	r1, [pc, #508]	; (8003318 <HAL_RCC_OscConfig+0xf78>)
 800311a:	4313      	orrs	r3, r2
 800311c:	604b      	str	r3, [r1, #4]
 800311e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003122:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003126:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800312a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003130:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	fa93 f2a3 	rbit	r2, r3
 800313a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003142:	601a      	str	r2, [r3, #0]
  return result;
 8003144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003148:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800314c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003158:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	461a      	mov	r2, r3
 8003160:	2301      	movs	r3, #1
 8003162:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003164:	f7fe f88c 	bl	8001280 <HAL_GetTick>
 8003168:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800316c:	e009      	b.n	8003182 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800316e:	f7fe f887 	bl	8001280 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e144      	b.n	800340c <HAL_RCC_OscConfig+0x106c>
 8003182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003186:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800318a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800318e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003194:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	fa93 f2a3 	rbit	r2, r3
 800319e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031a6:	601a      	str	r2, [r3, #0]
  return result;
 80031a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	095b      	lsrs	r3, r3, #5
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d102      	bne.n	80031cc <HAL_RCC_OscConfig+0xe2c>
 80031c6:	4b54      	ldr	r3, [pc, #336]	; (8003318 <HAL_RCC_OscConfig+0xf78>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	e027      	b.n	800321c <HAL_RCC_OscConfig+0xe7c>
 80031cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031de:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	fa93 f2a3 	rbit	r2, r3
 80031e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80031fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003204:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	fa93 f2a3 	rbit	r2, r3
 800320e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003212:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	4b3f      	ldr	r3, [pc, #252]	; (8003318 <HAL_RCC_OscConfig+0xf78>)
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003220:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003224:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003228:	6011      	str	r1, [r2, #0]
 800322a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800322e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	fa92 f1a2 	rbit	r1, r2
 8003238:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800323c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003240:	6011      	str	r1, [r2, #0]
  return result;
 8003242:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003246:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	fab2 f282 	clz	r2, r2
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	f042 0220 	orr.w	r2, r2, #32
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	f002 021f 	and.w	r2, r2, #31
 800325c:	2101      	movs	r1, #1
 800325e:	fa01 f202 	lsl.w	r2, r1, r2
 8003262:	4013      	ands	r3, r2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d082      	beq.n	800316e <HAL_RCC_OscConfig+0xdce>
 8003268:	e0cf      	b.n	800340a <HAL_RCC_OscConfig+0x106a>
 800326a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003272:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003276:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	fa93 f2a3 	rbit	r2, r3
 8003286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800328e:	601a      	str	r2, [r3, #0]
  return result;
 8003290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003294:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003298:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	461a      	mov	r2, r3
 80032ac:	2300      	movs	r3, #0
 80032ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b0:	f7fd ffe6 	bl	8001280 <HAL_GetTick>
 80032b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b8:	e009      	b.n	80032ce <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ba:	f7fd ffe1 	bl	8001280 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e09e      	b.n	800340c <HAL_RCC_OscConfig+0x106c>
 80032ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	fa93 f2a3 	rbit	r2, r3
 80032ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ee:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032f2:	601a      	str	r2, [r3, #0]
  return result;
 80032f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032fc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032fe:	fab3 f383 	clz	r3, r3
 8003302:	b2db      	uxtb	r3, r3
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f043 0301 	orr.w	r3, r3, #1
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b01      	cmp	r3, #1
 8003310:	d104      	bne.n	800331c <HAL_RCC_OscConfig+0xf7c>
 8003312:	4b01      	ldr	r3, [pc, #4]	; (8003318 <HAL_RCC_OscConfig+0xf78>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	e029      	b.n	800336c <HAL_RCC_OscConfig+0xfcc>
 8003318:	40021000 	.word	0x40021000
 800331c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003320:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003324:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003328:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	fa93 f2a3 	rbit	r2, r3
 8003338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003346:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800334a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003354:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	fa93 f2a3 	rbit	r2, r3
 800335e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003362:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCC_OscConfig+0x1078>)
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003370:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003374:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003378:	6011      	str	r1, [r2, #0]
 800337a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800337e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003382:	6812      	ldr	r2, [r2, #0]
 8003384:	fa92 f1a2 	rbit	r1, r2
 8003388:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800338c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003390:	6011      	str	r1, [r2, #0]
  return result;
 8003392:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003396:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	fab2 f282 	clz	r2, r2
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	f042 0220 	orr.w	r2, r2, #32
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	f002 021f 	and.w	r2, r2, #31
 80033ac:	2101      	movs	r1, #1
 80033ae:	fa01 f202 	lsl.w	r2, r1, r2
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d180      	bne.n	80032ba <HAL_RCC_OscConfig+0xf1a>
 80033b8:	e027      	b.n	800340a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e01e      	b.n	800340c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_RCC_OscConfig+0x1078>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033da:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d10b      	bne.n	8003406 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80033ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80033f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003402:	429a      	cmp	r2, r3
 8003404:	d001      	beq.n	800340a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000

0800341c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b09e      	sub	sp, #120	; 0x78
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003426:	2300      	movs	r3, #0
 8003428:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e162      	b.n	80036fa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003434:	4b90      	ldr	r3, [pc, #576]	; (8003678 <HAL_RCC_ClockConfig+0x25c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d910      	bls.n	8003464 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b8d      	ldr	r3, [pc, #564]	; (8003678 <HAL_RCC_ClockConfig+0x25c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 0207 	bic.w	r2, r3, #7
 800344a:	498b      	ldr	r1, [pc, #556]	; (8003678 <HAL_RCC_ClockConfig+0x25c>)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	4b89      	ldr	r3, [pc, #548]	; (8003678 <HAL_RCC_ClockConfig+0x25c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e14a      	b.n	80036fa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003470:	4b82      	ldr	r3, [pc, #520]	; (800367c <HAL_RCC_ClockConfig+0x260>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	497f      	ldr	r1, [pc, #508]	; (800367c <HAL_RCC_ClockConfig+0x260>)
 800347e:	4313      	orrs	r3, r2
 8003480:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 80dc 	beq.w	8003648 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d13c      	bne.n	8003512 <HAL_RCC_ClockConfig+0xf6>
 8003498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800349c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80034a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a8:	fab3 f383 	clz	r3, r3
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d102      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xa6>
 80034bc:	4b6f      	ldr	r3, [pc, #444]	; (800367c <HAL_RCC_ClockConfig+0x260>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	e00f      	b.n	80034e2 <HAL_RCC_ClockConfig+0xc6>
 80034c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034ca:	fa93 f3a3 	rbit	r3, r3
 80034ce:	667b      	str	r3, [r7, #100]	; 0x64
 80034d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034d4:	663b      	str	r3, [r7, #96]	; 0x60
 80034d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034de:	4b67      	ldr	r3, [pc, #412]	; (800367c <HAL_RCC_ClockConfig+0x260>)
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80034e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034ea:	fa92 f2a2 	rbit	r2, r2
 80034ee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80034f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034f2:	fab2 f282 	clz	r2, r2
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	f042 0220 	orr.w	r2, r2, #32
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	f002 021f 	and.w	r2, r2, #31
 8003502:	2101      	movs	r1, #1
 8003504:	fa01 f202 	lsl.w	r2, r1, r2
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d17b      	bne.n	8003606 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e0f3      	b.n	80036fa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d13c      	bne.n	8003594 <HAL_RCC_ClockConfig+0x178>
 800351a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800351e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352a:	fab3 f383 	clz	r3, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d102      	bne.n	8003544 <HAL_RCC_ClockConfig+0x128>
 800353e:	4b4f      	ldr	r3, [pc, #316]	; (800367c <HAL_RCC_ClockConfig+0x260>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	e00f      	b.n	8003564 <HAL_RCC_ClockConfig+0x148>
 8003544:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003548:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800354c:	fa93 f3a3 	rbit	r3, r3
 8003550:	647b      	str	r3, [r7, #68]	; 0x44
 8003552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003556:	643b      	str	r3, [r7, #64]	; 0x40
 8003558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003560:	4b46      	ldr	r3, [pc, #280]	; (800367c <HAL_RCC_ClockConfig+0x260>)
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003568:	63ba      	str	r2, [r7, #56]	; 0x38
 800356a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800356c:	fa92 f2a2 	rbit	r2, r2
 8003570:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003572:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003574:	fab2 f282 	clz	r2, r2
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	f042 0220 	orr.w	r2, r2, #32
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	f002 021f 	and.w	r2, r2, #31
 8003584:	2101      	movs	r1, #1
 8003586:	fa01 f202 	lsl.w	r2, r1, r2
 800358a:	4013      	ands	r3, r2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d13a      	bne.n	8003606 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0b2      	b.n	80036fa <HAL_RCC_ClockConfig+0x2de>
 8003594:	2302      	movs	r3, #2
 8003596:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359a:	fa93 f3a3 	rbit	r3, r3
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a2:	fab3 f383 	clz	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	095b      	lsrs	r3, r3, #5
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d102      	bne.n	80035bc <HAL_RCC_ClockConfig+0x1a0>
 80035b6:	4b31      	ldr	r3, [pc, #196]	; (800367c <HAL_RCC_ClockConfig+0x260>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	e00d      	b.n	80035d8 <HAL_RCC_ClockConfig+0x1bc>
 80035bc:	2302      	movs	r3, #2
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	627b      	str	r3, [r7, #36]	; 0x24
 80035c8:	2302      	movs	r3, #2
 80035ca:	623b      	str	r3, [r7, #32]
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	fa93 f3a3 	rbit	r3, r3
 80035d2:	61fb      	str	r3, [r7, #28]
 80035d4:	4b29      	ldr	r3, [pc, #164]	; (800367c <HAL_RCC_ClockConfig+0x260>)
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	2202      	movs	r2, #2
 80035da:	61ba      	str	r2, [r7, #24]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	fa92 f2a2 	rbit	r2, r2
 80035e2:	617a      	str	r2, [r7, #20]
  return result;
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	fab2 f282 	clz	r2, r2
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	f042 0220 	orr.w	r2, r2, #32
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	f002 021f 	and.w	r2, r2, #31
 80035f6:	2101      	movs	r1, #1
 80035f8:	fa01 f202 	lsl.w	r2, r1, r2
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e079      	b.n	80036fa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003606:	4b1d      	ldr	r3, [pc, #116]	; (800367c <HAL_RCC_ClockConfig+0x260>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f023 0203 	bic.w	r2, r3, #3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	491a      	ldr	r1, [pc, #104]	; (800367c <HAL_RCC_ClockConfig+0x260>)
 8003614:	4313      	orrs	r3, r2
 8003616:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003618:	f7fd fe32 	bl	8001280 <HAL_GetTick>
 800361c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	e00a      	b.n	8003636 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003620:	f7fd fe2e 	bl	8001280 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	; 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e061      	b.n	80036fa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	4b11      	ldr	r3, [pc, #68]	; (800367c <HAL_RCC_ClockConfig+0x260>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 020c 	and.w	r2, r3, #12
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	429a      	cmp	r2, r3
 8003646:	d1eb      	bne.n	8003620 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_RCC_ClockConfig+0x25c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d214      	bcs.n	8003680 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b08      	ldr	r3, [pc, #32]	; (8003678 <HAL_RCC_ClockConfig+0x25c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f023 0207 	bic.w	r2, r3, #7
 800365e:	4906      	ldr	r1, [pc, #24]	; (8003678 <HAL_RCC_ClockConfig+0x25c>)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003666:	4b04      	ldr	r3, [pc, #16]	; (8003678 <HAL_RCC_ClockConfig+0x25c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d005      	beq.n	8003680 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e040      	b.n	80036fa <HAL_RCC_ClockConfig+0x2de>
 8003678:	40022000 	.word	0x40022000
 800367c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <HAL_RCC_ClockConfig+0x2e8>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	491a      	ldr	r1, [pc, #104]	; (8003704 <HAL_RCC_ClockConfig+0x2e8>)
 800369a:	4313      	orrs	r3, r2
 800369c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d009      	beq.n	80036be <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036aa:	4b16      	ldr	r3, [pc, #88]	; (8003704 <HAL_RCC_ClockConfig+0x2e8>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4912      	ldr	r1, [pc, #72]	; (8003704 <HAL_RCC_ClockConfig+0x2e8>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036be:	f000 f829 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 80036c2:	4601      	mov	r1, r0
 80036c4:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <HAL_RCC_ClockConfig+0x2e8>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036cc:	22f0      	movs	r2, #240	; 0xf0
 80036ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	fa92 f2a2 	rbit	r2, r2
 80036d6:	60fa      	str	r2, [r7, #12]
  return result;
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	fab2 f282 	clz	r2, r2
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	40d3      	lsrs	r3, r2
 80036e2:	4a09      	ldr	r2, [pc, #36]	; (8003708 <HAL_RCC_ClockConfig+0x2ec>)
 80036e4:	5cd3      	ldrb	r3, [r2, r3]
 80036e6:	fa21 f303 	lsr.w	r3, r1, r3
 80036ea:	4a08      	ldr	r2, [pc, #32]	; (800370c <HAL_RCC_ClockConfig+0x2f0>)
 80036ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80036ee:	4b08      	ldr	r3, [pc, #32]	; (8003710 <HAL_RCC_ClockConfig+0x2f4>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fd fd80 	bl	80011f8 <HAL_InitTick>
  
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3778      	adds	r7, #120	; 0x78
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40021000 	.word	0x40021000
 8003708:	08004f38 	.word	0x08004f38
 800370c:	20000000 	.word	0x20000000
 8003710:	20000004 	.word	0x20000004

08003714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	2300      	movs	r3, #0
 8003728:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800372e:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b04      	cmp	r3, #4
 800373c:	d002      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x30>
 800373e:	2b08      	cmp	r3, #8
 8003740:	d003      	beq.n	800374a <HAL_RCC_GetSysClockFreq+0x36>
 8003742:	e026      	b.n	8003792 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003744:	4b19      	ldr	r3, [pc, #100]	; (80037ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003746:	613b      	str	r3, [r7, #16]
      break;
 8003748:	e026      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	0c9b      	lsrs	r3, r3, #18
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	4a17      	ldr	r2, [pc, #92]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003754:	5cd3      	ldrb	r3, [r2, r3]
 8003756:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003758:	4b13      	ldr	r3, [pc, #76]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x94>)
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003762:	5cd3      	ldrb	r3, [r2, r3]
 8003764:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003770:	4a0e      	ldr	r2, [pc, #56]	; (80037ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	fbb2 f2f3 	udiv	r2, r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	fb02 f303 	mul.w	r3, r2, r3
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	e004      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a0c      	ldr	r2, [pc, #48]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003786:	fb02 f303 	mul.w	r3, r2, r3
 800378a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	613b      	str	r3, [r7, #16]
      break;
 8003790:	e002      	b.n	8003798 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <HAL_RCC_GetSysClockFreq+0x98>)
 8003794:	613b      	str	r3, [r7, #16]
      break;
 8003796:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003798:	693b      	ldr	r3, [r7, #16]
}
 800379a:	4618      	mov	r0, r3
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40021000 	.word	0x40021000
 80037ac:	007a1200 	.word	0x007a1200
 80037b0:	08004f50 	.word	0x08004f50
 80037b4:	08004f60 	.word	0x08004f60
 80037b8:	003d0900 	.word	0x003d0900

080037bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c0:	4b03      	ldr	r3, [pc, #12]	; (80037d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	20000000 	.word	0x20000000

080037d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80037da:	f7ff ffef 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 80037de:	4601      	mov	r1, r0
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037e8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80037ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	fa92 f2a2 	rbit	r2, r2
 80037f4:	603a      	str	r2, [r7, #0]
  return result;
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	fab2 f282 	clz	r2, r2
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	40d3      	lsrs	r3, r2
 8003800:	4a04      	ldr	r2, [pc, #16]	; (8003814 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003802:	5cd3      	ldrb	r3, [r2, r3]
 8003804:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40021000 	.word	0x40021000
 8003814:	08004f48 	.word	0x08004f48

08003818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800381e:	f7ff ffcd 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 8003822:	4601      	mov	r1, r0
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800382c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003830:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	fa92 f2a2 	rbit	r2, r2
 8003838:	603a      	str	r2, [r7, #0]
  return result;
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	fab2 f282 	clz	r2, r2
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	40d3      	lsrs	r3, r2
 8003844:	4a04      	ldr	r2, [pc, #16]	; (8003858 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003846:	5cd3      	ldrb	r3, [r2, r3]
 8003848:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40021000 	.word	0x40021000
 8003858:	08004f48 	.word	0x08004f48

0800385c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b092      	sub	sp, #72	; 0x48
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800386c:	2300      	movs	r3, #0
 800386e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80d4 	beq.w	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003880:	4b4e      	ldr	r3, [pc, #312]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10e      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800388c:	4b4b      	ldr	r3, [pc, #300]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	4a4a      	ldr	r2, [pc, #296]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003896:	61d3      	str	r3, [r2, #28]
 8003898:	4b48      	ldr	r3, [pc, #288]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a0:	60bb      	str	r3, [r7, #8]
 80038a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038aa:	4b45      	ldr	r3, [pc, #276]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d118      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038b6:	4b42      	ldr	r3, [pc, #264]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a41      	ldr	r2, [pc, #260]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038c2:	f7fd fcdd 	bl	8001280 <HAL_GetTick>
 80038c6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c8:	e008      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ca:	f7fd fcd9 	bl	8001280 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b64      	cmp	r3, #100	; 0x64
 80038d6:	d901      	bls.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e169      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038dc:	4b38      	ldr	r3, [pc, #224]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0f0      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038e8:	4b34      	ldr	r3, [pc, #208]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 8084 	beq.w	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003902:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003904:	429a      	cmp	r2, r3
 8003906:	d07c      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003908:	4b2c      	ldr	r3, [pc, #176]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003912:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003916:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003922:	fab3 f383 	clz	r3, r3
 8003926:	b2db      	uxtb	r3, r3
 8003928:	461a      	mov	r2, r3
 800392a:	4b26      	ldr	r3, [pc, #152]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	461a      	mov	r2, r3
 8003932:	2301      	movs	r3, #1
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800393a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393e:	fa93 f3a3 	rbit	r3, r3
 8003942:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	b2db      	uxtb	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	461a      	mov	r2, r3
 8003956:	2300      	movs	r3, #0
 8003958:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800395a:	4a18      	ldr	r2, [pc, #96]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800395c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800395e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d04b      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396a:	f7fd fc89 	bl	8001280 <HAL_GetTick>
 800396e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003970:	e00a      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003972:	f7fd fc85 	bl	8001280 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003980:	4293      	cmp	r3, r2
 8003982:	d901      	bls.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e113      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003988:	2302      	movs	r3, #2
 800398a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
 8003994:	2302      	movs	r3, #2
 8003996:	623b      	str	r3, [r7, #32]
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	fa93 f3a3 	rbit	r3, r3
 800399e:	61fb      	str	r3, [r7, #28]
  return result;
 80039a0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f043 0302 	orr.w	r3, r3, #2
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d108      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80039b6:	4b01      	ldr	r3, [pc, #4]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	e00d      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40007000 	.word	0x40007000
 80039c4:	10908100 	.word	0x10908100
 80039c8:	2302      	movs	r3, #2
 80039ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	fa93 f3a3 	rbit	r3, r3
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	4b78      	ldr	r3, [pc, #480]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	2202      	movs	r2, #2
 80039da:	613a      	str	r2, [r7, #16]
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	fa92 f2a2 	rbit	r2, r2
 80039e2:	60fa      	str	r2, [r7, #12]
  return result;
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	fab2 f282 	clz	r2, r2
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	f002 021f 	and.w	r2, r2, #31
 80039f6:	2101      	movs	r1, #1
 80039f8:	fa01 f202 	lsl.w	r2, r1, r2
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0b7      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a02:	4b6d      	ldr	r3, [pc, #436]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	496a      	ldr	r1, [pc, #424]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d105      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a1c:	4b66      	ldr	r3, [pc, #408]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	4a65      	ldr	r2, [pc, #404]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a34:	4b60      	ldr	r3, [pc, #384]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a38:	f023 0203 	bic.w	r2, r3, #3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	495d      	ldr	r1, [pc, #372]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a52:	4b59      	ldr	r3, [pc, #356]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	4956      	ldr	r1, [pc, #344]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a70:	4b51      	ldr	r3, [pc, #324]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	494e      	ldr	r1, [pc, #312]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d008      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a8e:	4b4a      	ldr	r3, [pc, #296]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	f023 0210 	bic.w	r2, r3, #16
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	4947      	ldr	r1, [pc, #284]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d008      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003aac:	4b42      	ldr	r3, [pc, #264]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	493f      	ldr	r1, [pc, #252]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d008      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aca:	4b3b      	ldr	r3, [pc, #236]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	f023 0220 	bic.w	r2, r3, #32
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	4938      	ldr	r1, [pc, #224]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ae8:	4b33      	ldr	r3, [pc, #204]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	4930      	ldr	r1, [pc, #192]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b06:	4b2c      	ldr	r3, [pc, #176]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	4929      	ldr	r1, [pc, #164]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b24:	4b24      	ldr	r3, [pc, #144]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	4921      	ldr	r1, [pc, #132]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b42:	4b1d      	ldr	r3, [pc, #116]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	491a      	ldr	r1, [pc, #104]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003b60:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	4912      	ldr	r1, [pc, #72]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d008      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b7e:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	490b      	ldr	r1, [pc, #44]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d008      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba8:	4903      	ldr	r1, [pc, #12]	; (8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3748      	adds	r7, #72	; 0x48
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40021000 	.word	0x40021000

08003bbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e040      	b.n	8003c50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd fa14 	bl	800100c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2224      	movs	r2, #36	; 0x24
 8003be8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0201 	bic.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fa86 	bl	8004114 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f8af 	bl	8003d6c <UART_SetConfig>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e01b      	b.n	8003c50 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fb05 	bl	8004258 <UART_CheckIdleState>
 8003c4e:	4603      	mov	r3, r0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	; 0x28
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d178      	bne.n	8003d62 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_UART_Transmit+0x24>
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e071      	b.n	8003d64 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2221      	movs	r2, #33	; 0x21
 8003c8c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c8e:	f7fd faf7 	bl	8001280 <HAL_GetTick>
 8003c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	88fa      	ldrh	r2, [r7, #6]
 8003c98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	88fa      	ldrh	r2, [r7, #6]
 8003ca0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cac:	d108      	bne.n	8003cc0 <HAL_UART_Transmit+0x68>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d104      	bne.n	8003cc0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	e003      	b.n	8003cc8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cc8:	e030      	b.n	8003d2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2180      	movs	r1, #128	; 0x80
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 fb67 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d004      	beq.n	8003cea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e03c      	b.n	8003d64 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10b      	bne.n	8003d08 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	881a      	ldrh	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cfc:	b292      	uxth	r2, r2
 8003cfe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	3302      	adds	r3, #2
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	e008      	b.n	8003d1a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	781a      	ldrb	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	b292      	uxth	r2, r2
 8003d12:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	3301      	adds	r3, #1
 8003d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1c8      	bne.n	8003cca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2140      	movs	r1, #64	; 0x40
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fb30 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d004      	beq.n	8003d58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2220      	movs	r2, #32
 8003d52:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e005      	b.n	8003d64 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e000      	b.n	8003d64 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003d62:	2302      	movs	r3, #2
  }
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d9a:	f023 030c 	bic.w	r3, r3, #12
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	6979      	ldr	r1, [r7, #20]
 8003da4:	430b      	orrs	r3, r1
 8003da6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4aa7      	ldr	r2, [pc, #668]	; (8004084 <UART_SetConfig+0x318>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d120      	bne.n	8003e2e <UART_SetConfig+0xc2>
 8003dec:	4ba6      	ldr	r3, [pc, #664]	; (8004088 <UART_SetConfig+0x31c>)
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d817      	bhi.n	8003e28 <UART_SetConfig+0xbc>
 8003df8:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <UART_SetConfig+0x94>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	08003e11 	.word	0x08003e11
 8003e04:	08003e1d 	.word	0x08003e1d
 8003e08:	08003e23 	.word	0x08003e23
 8003e0c:	08003e17 	.word	0x08003e17
 8003e10:	2301      	movs	r3, #1
 8003e12:	77fb      	strb	r3, [r7, #31]
 8003e14:	e0b5      	b.n	8003f82 <UART_SetConfig+0x216>
 8003e16:	2302      	movs	r3, #2
 8003e18:	77fb      	strb	r3, [r7, #31]
 8003e1a:	e0b2      	b.n	8003f82 <UART_SetConfig+0x216>
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	77fb      	strb	r3, [r7, #31]
 8003e20:	e0af      	b.n	8003f82 <UART_SetConfig+0x216>
 8003e22:	2308      	movs	r3, #8
 8003e24:	77fb      	strb	r3, [r7, #31]
 8003e26:	e0ac      	b.n	8003f82 <UART_SetConfig+0x216>
 8003e28:	2310      	movs	r3, #16
 8003e2a:	77fb      	strb	r3, [r7, #31]
 8003e2c:	e0a9      	b.n	8003f82 <UART_SetConfig+0x216>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a96      	ldr	r2, [pc, #600]	; (800408c <UART_SetConfig+0x320>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d124      	bne.n	8003e82 <UART_SetConfig+0x116>
 8003e38:	4b93      	ldr	r3, [pc, #588]	; (8004088 <UART_SetConfig+0x31c>)
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e44:	d011      	beq.n	8003e6a <UART_SetConfig+0xfe>
 8003e46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e4a:	d817      	bhi.n	8003e7c <UART_SetConfig+0x110>
 8003e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e50:	d011      	beq.n	8003e76 <UART_SetConfig+0x10a>
 8003e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e56:	d811      	bhi.n	8003e7c <UART_SetConfig+0x110>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <UART_SetConfig+0xf8>
 8003e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e60:	d006      	beq.n	8003e70 <UART_SetConfig+0x104>
 8003e62:	e00b      	b.n	8003e7c <UART_SetConfig+0x110>
 8003e64:	2300      	movs	r3, #0
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e08b      	b.n	8003f82 <UART_SetConfig+0x216>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	77fb      	strb	r3, [r7, #31]
 8003e6e:	e088      	b.n	8003f82 <UART_SetConfig+0x216>
 8003e70:	2304      	movs	r3, #4
 8003e72:	77fb      	strb	r3, [r7, #31]
 8003e74:	e085      	b.n	8003f82 <UART_SetConfig+0x216>
 8003e76:	2308      	movs	r3, #8
 8003e78:	77fb      	strb	r3, [r7, #31]
 8003e7a:	e082      	b.n	8003f82 <UART_SetConfig+0x216>
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	77fb      	strb	r3, [r7, #31]
 8003e80:	e07f      	b.n	8003f82 <UART_SetConfig+0x216>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a82      	ldr	r2, [pc, #520]	; (8004090 <UART_SetConfig+0x324>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d124      	bne.n	8003ed6 <UART_SetConfig+0x16a>
 8003e8c:	4b7e      	ldr	r3, [pc, #504]	; (8004088 <UART_SetConfig+0x31c>)
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003e94:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e98:	d011      	beq.n	8003ebe <UART_SetConfig+0x152>
 8003e9a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e9e:	d817      	bhi.n	8003ed0 <UART_SetConfig+0x164>
 8003ea0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ea4:	d011      	beq.n	8003eca <UART_SetConfig+0x15e>
 8003ea6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003eaa:	d811      	bhi.n	8003ed0 <UART_SetConfig+0x164>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <UART_SetConfig+0x14c>
 8003eb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003eb4:	d006      	beq.n	8003ec4 <UART_SetConfig+0x158>
 8003eb6:	e00b      	b.n	8003ed0 <UART_SetConfig+0x164>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	77fb      	strb	r3, [r7, #31]
 8003ebc:	e061      	b.n	8003f82 <UART_SetConfig+0x216>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	77fb      	strb	r3, [r7, #31]
 8003ec2:	e05e      	b.n	8003f82 <UART_SetConfig+0x216>
 8003ec4:	2304      	movs	r3, #4
 8003ec6:	77fb      	strb	r3, [r7, #31]
 8003ec8:	e05b      	b.n	8003f82 <UART_SetConfig+0x216>
 8003eca:	2308      	movs	r3, #8
 8003ecc:	77fb      	strb	r3, [r7, #31]
 8003ece:	e058      	b.n	8003f82 <UART_SetConfig+0x216>
 8003ed0:	2310      	movs	r3, #16
 8003ed2:	77fb      	strb	r3, [r7, #31]
 8003ed4:	e055      	b.n	8003f82 <UART_SetConfig+0x216>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a6e      	ldr	r2, [pc, #440]	; (8004094 <UART_SetConfig+0x328>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d124      	bne.n	8003f2a <UART_SetConfig+0x1be>
 8003ee0:	4b69      	ldr	r3, [pc, #420]	; (8004088 <UART_SetConfig+0x31c>)
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003ee8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003eec:	d011      	beq.n	8003f12 <UART_SetConfig+0x1a6>
 8003eee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ef2:	d817      	bhi.n	8003f24 <UART_SetConfig+0x1b8>
 8003ef4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ef8:	d011      	beq.n	8003f1e <UART_SetConfig+0x1b2>
 8003efa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003efe:	d811      	bhi.n	8003f24 <UART_SetConfig+0x1b8>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <UART_SetConfig+0x1a0>
 8003f04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f08:	d006      	beq.n	8003f18 <UART_SetConfig+0x1ac>
 8003f0a:	e00b      	b.n	8003f24 <UART_SetConfig+0x1b8>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	77fb      	strb	r3, [r7, #31]
 8003f10:	e037      	b.n	8003f82 <UART_SetConfig+0x216>
 8003f12:	2302      	movs	r3, #2
 8003f14:	77fb      	strb	r3, [r7, #31]
 8003f16:	e034      	b.n	8003f82 <UART_SetConfig+0x216>
 8003f18:	2304      	movs	r3, #4
 8003f1a:	77fb      	strb	r3, [r7, #31]
 8003f1c:	e031      	b.n	8003f82 <UART_SetConfig+0x216>
 8003f1e:	2308      	movs	r3, #8
 8003f20:	77fb      	strb	r3, [r7, #31]
 8003f22:	e02e      	b.n	8003f82 <UART_SetConfig+0x216>
 8003f24:	2310      	movs	r3, #16
 8003f26:	77fb      	strb	r3, [r7, #31]
 8003f28:	e02b      	b.n	8003f82 <UART_SetConfig+0x216>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a5a      	ldr	r2, [pc, #360]	; (8004098 <UART_SetConfig+0x32c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d124      	bne.n	8003f7e <UART_SetConfig+0x212>
 8003f34:	4b54      	ldr	r3, [pc, #336]	; (8004088 <UART_SetConfig+0x31c>)
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003f3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f40:	d011      	beq.n	8003f66 <UART_SetConfig+0x1fa>
 8003f42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f46:	d817      	bhi.n	8003f78 <UART_SetConfig+0x20c>
 8003f48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f4c:	d011      	beq.n	8003f72 <UART_SetConfig+0x206>
 8003f4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f52:	d811      	bhi.n	8003f78 <UART_SetConfig+0x20c>
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <UART_SetConfig+0x1f4>
 8003f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f5c:	d006      	beq.n	8003f6c <UART_SetConfig+0x200>
 8003f5e:	e00b      	b.n	8003f78 <UART_SetConfig+0x20c>
 8003f60:	2300      	movs	r3, #0
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e00d      	b.n	8003f82 <UART_SetConfig+0x216>
 8003f66:	2302      	movs	r3, #2
 8003f68:	77fb      	strb	r3, [r7, #31]
 8003f6a:	e00a      	b.n	8003f82 <UART_SetConfig+0x216>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e007      	b.n	8003f82 <UART_SetConfig+0x216>
 8003f72:	2308      	movs	r3, #8
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e004      	b.n	8003f82 <UART_SetConfig+0x216>
 8003f78:	2310      	movs	r3, #16
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e001      	b.n	8003f82 <UART_SetConfig+0x216>
 8003f7e:	2310      	movs	r3, #16
 8003f80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8a:	d15b      	bne.n	8004044 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003f8c:	7ffb      	ldrb	r3, [r7, #31]
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d827      	bhi.n	8003fe2 <UART_SetConfig+0x276>
 8003f92:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <UART_SetConfig+0x22c>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08003fbd 	.word	0x08003fbd
 8003f9c:	08003fc5 	.word	0x08003fc5
 8003fa0:	08003fcd 	.word	0x08003fcd
 8003fa4:	08003fe3 	.word	0x08003fe3
 8003fa8:	08003fd3 	.word	0x08003fd3
 8003fac:	08003fe3 	.word	0x08003fe3
 8003fb0:	08003fe3 	.word	0x08003fe3
 8003fb4:	08003fe3 	.word	0x08003fe3
 8003fb8:	08003fdb 	.word	0x08003fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fbc:	f7ff fc0a 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8003fc0:	61b8      	str	r0, [r7, #24]
        break;
 8003fc2:	e013      	b.n	8003fec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc4:	f7ff fc28 	bl	8003818 <HAL_RCC_GetPCLK2Freq>
 8003fc8:	61b8      	str	r0, [r7, #24]
        break;
 8003fca:	e00f      	b.n	8003fec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fcc:	4b33      	ldr	r3, [pc, #204]	; (800409c <UART_SetConfig+0x330>)
 8003fce:	61bb      	str	r3, [r7, #24]
        break;
 8003fd0:	e00c      	b.n	8003fec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd2:	f7ff fb9f 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 8003fd6:	61b8      	str	r0, [r7, #24]
        break;
 8003fd8:	e008      	b.n	8003fec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fde:	61bb      	str	r3, [r7, #24]
        break;
 8003fe0:	e004      	b.n	8003fec <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	77bb      	strb	r3, [r7, #30]
        break;
 8003fea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 8082 	beq.w	80040f8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	005a      	lsls	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	085b      	lsrs	r3, r3, #1
 8003ffe:	441a      	add	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	fbb2 f3f3 	udiv	r3, r2, r3
 8004008:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b0f      	cmp	r3, #15
 800400e:	d916      	bls.n	800403e <UART_SetConfig+0x2d2>
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004016:	d212      	bcs.n	800403e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	b29b      	uxth	r3, r3
 800401c:	f023 030f 	bic.w	r3, r3, #15
 8004020:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	085b      	lsrs	r3, r3, #1
 8004026:	b29b      	uxth	r3, r3
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	b29a      	uxth	r2, r3
 800402e:	89fb      	ldrh	r3, [r7, #14]
 8004030:	4313      	orrs	r3, r2
 8004032:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	89fa      	ldrh	r2, [r7, #14]
 800403a:	60da      	str	r2, [r3, #12]
 800403c:	e05c      	b.n	80040f8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	77bb      	strb	r3, [r7, #30]
 8004042:	e059      	b.n	80040f8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004044:	7ffb      	ldrb	r3, [r7, #31]
 8004046:	2b08      	cmp	r3, #8
 8004048:	d835      	bhi.n	80040b6 <UART_SetConfig+0x34a>
 800404a:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <UART_SetConfig+0x2e4>)
 800404c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004050:	08004075 	.word	0x08004075
 8004054:	0800407d 	.word	0x0800407d
 8004058:	080040a1 	.word	0x080040a1
 800405c:	080040b7 	.word	0x080040b7
 8004060:	080040a7 	.word	0x080040a7
 8004064:	080040b7 	.word	0x080040b7
 8004068:	080040b7 	.word	0x080040b7
 800406c:	080040b7 	.word	0x080040b7
 8004070:	080040af 	.word	0x080040af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004074:	f7ff fbae 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8004078:	61b8      	str	r0, [r7, #24]
        break;
 800407a:	e021      	b.n	80040c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800407c:	f7ff fbcc 	bl	8003818 <HAL_RCC_GetPCLK2Freq>
 8004080:	61b8      	str	r0, [r7, #24]
        break;
 8004082:	e01d      	b.n	80040c0 <UART_SetConfig+0x354>
 8004084:	40013800 	.word	0x40013800
 8004088:	40021000 	.word	0x40021000
 800408c:	40004400 	.word	0x40004400
 8004090:	40004800 	.word	0x40004800
 8004094:	40004c00 	.word	0x40004c00
 8004098:	40005000 	.word	0x40005000
 800409c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a0:	4b1b      	ldr	r3, [pc, #108]	; (8004110 <UART_SetConfig+0x3a4>)
 80040a2:	61bb      	str	r3, [r7, #24]
        break;
 80040a4:	e00c      	b.n	80040c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a6:	f7ff fb35 	bl	8003714 <HAL_RCC_GetSysClockFreq>
 80040aa:	61b8      	str	r0, [r7, #24]
        break;
 80040ac:	e008      	b.n	80040c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040b2:	61bb      	str	r3, [r7, #24]
        break;
 80040b4:	e004      	b.n	80040c0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	77bb      	strb	r3, [r7, #30]
        break;
 80040be:	bf00      	nop
    }

    if (pclk != 0U)
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d018      	beq.n	80040f8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	085a      	lsrs	r2, r3, #1
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	441a      	add	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b0f      	cmp	r3, #15
 80040de:	d909      	bls.n	80040f4 <UART_SetConfig+0x388>
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e6:	d205      	bcs.n	80040f4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	60da      	str	r2, [r3, #12]
 80040f2:	e001      	b.n	80040f8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004104:	7fbb      	ldrb	r3, [r7, #30]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	007a1200 	.word	0x007a1200

08004114 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d01a      	beq.n	800422a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004212:	d10a      	bne.n	800422a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	605a      	str	r2, [r3, #4]
  }
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b098      	sub	sp, #96	; 0x60
 800425c:	af02      	add	r7, sp, #8
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004268:	f7fd f80a 	bl	8001280 <HAL_GetTick>
 800426c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b08      	cmp	r3, #8
 800427a:	d12e      	bne.n	80042da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800427c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004284:	2200      	movs	r2, #0
 8004286:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f88c 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d021      	beq.n	80042da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042aa:	653b      	str	r3, [r7, #80]	; 0x50
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b4:	647b      	str	r3, [r7, #68]	; 0x44
 80042b6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e6      	bne.n	8004296 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e062      	b.n	80043a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d149      	bne.n	800437c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f0:	2200      	movs	r2, #0
 80042f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f856 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d03c      	beq.n	800437c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	623b      	str	r3, [r7, #32]
   return(result);
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004320:	633b      	str	r3, [r7, #48]	; 0x30
 8004322:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004328:	e841 2300 	strex	r3, r2, [r1]
 800432c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e6      	bne.n	8004302 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3308      	adds	r3, #8
 800433a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	e853 3f00 	ldrex	r3, [r3]
 8004342:	60fb      	str	r3, [r7, #12]
   return(result);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0301 	bic.w	r3, r3, #1
 800434a:	64bb      	str	r3, [r7, #72]	; 0x48
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3308      	adds	r3, #8
 8004352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004354:	61fa      	str	r2, [r7, #28]
 8004356:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	69b9      	ldr	r1, [r7, #24]
 800435a:	69fa      	ldr	r2, [r7, #28]
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	617b      	str	r3, [r7, #20]
   return(result);
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e5      	bne.n	8004334 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e011      	b.n	80043a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2220      	movs	r2, #32
 8004386:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3758      	adds	r7, #88	; 0x58
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b8:	e04f      	b.n	800445a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043c0:	d04b      	beq.n	800445a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c2:	f7fc ff5d 	bl	8001280 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d302      	bcc.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e04e      	b.n	800447a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d037      	beq.n	800445a <UART_WaitOnFlagUntilTimeout+0xb2>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b80      	cmp	r3, #128	; 0x80
 80043ee:	d034      	beq.n	800445a <UART_WaitOnFlagUntilTimeout+0xb2>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b40      	cmp	r3, #64	; 0x40
 80043f4:	d031      	beq.n	800445a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b08      	cmp	r3, #8
 8004402:	d110      	bne.n	8004426 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2208      	movs	r2, #8
 800440a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 f838 	bl	8004482 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2208      	movs	r2, #8
 8004416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e029      	b.n	800447a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004434:	d111      	bne.n	800445a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800443e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 f81e 	bl	8004482 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e00f      	b.n	800447a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69da      	ldr	r2, [r3, #28]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4013      	ands	r3, r2
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	429a      	cmp	r2, r3
 8004468:	bf0c      	ite	eq
 800446a:	2301      	moveq	r3, #1
 800446c:	2300      	movne	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	429a      	cmp	r2, r3
 8004476:	d0a0      	beq.n	80043ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004482:	b480      	push	{r7}
 8004484:	b095      	sub	sp, #84	; 0x54
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004492:	e853 3f00 	ldrex	r3, [r3]
 8004496:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800449e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	461a      	mov	r2, r3
 80044a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a8:	643b      	str	r3, [r7, #64]	; 0x40
 80044aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044b0:	e841 2300 	strex	r3, r2, [r1]
 80044b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e6      	bne.n	800448a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3308      	adds	r3, #8
 80044c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f023 0301 	bic.w	r3, r3, #1
 80044d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3308      	adds	r3, #8
 80044da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e5      	bne.n	80044bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d118      	bne.n	800452a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	60bb      	str	r3, [r7, #8]
   return(result);
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f023 0310 	bic.w	r3, r3, #16
 800450c:	647b      	str	r3, [r7, #68]	; 0x44
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004516:	61bb      	str	r3, [r7, #24]
 8004518:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	6979      	ldr	r1, [r7, #20]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	613b      	str	r3, [r7, #16]
   return(result);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e6      	bne.n	80044f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800453e:	bf00      	nop
 8004540:	3754      	adds	r7, #84	; 0x54
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
	...

0800454c <sniprintf>:
 800454c:	b40c      	push	{r2, r3}
 800454e:	b530      	push	{r4, r5, lr}
 8004550:	4b17      	ldr	r3, [pc, #92]	; (80045b0 <sniprintf+0x64>)
 8004552:	1e0c      	subs	r4, r1, #0
 8004554:	681d      	ldr	r5, [r3, #0]
 8004556:	b09d      	sub	sp, #116	; 0x74
 8004558:	da08      	bge.n	800456c <sniprintf+0x20>
 800455a:	238b      	movs	r3, #139	; 0x8b
 800455c:	602b      	str	r3, [r5, #0]
 800455e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004562:	b01d      	add	sp, #116	; 0x74
 8004564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004568:	b002      	add	sp, #8
 800456a:	4770      	bx	lr
 800456c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004570:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004574:	bf14      	ite	ne
 8004576:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800457a:	4623      	moveq	r3, r4
 800457c:	9304      	str	r3, [sp, #16]
 800457e:	9307      	str	r3, [sp, #28]
 8004580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004584:	9002      	str	r0, [sp, #8]
 8004586:	9006      	str	r0, [sp, #24]
 8004588:	f8ad 3016 	strh.w	r3, [sp, #22]
 800458c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800458e:	ab21      	add	r3, sp, #132	; 0x84
 8004590:	a902      	add	r1, sp, #8
 8004592:	4628      	mov	r0, r5
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	f000 f89b 	bl	80046d0 <_svfiprintf_r>
 800459a:	1c43      	adds	r3, r0, #1
 800459c:	bfbc      	itt	lt
 800459e:	238b      	movlt	r3, #139	; 0x8b
 80045a0:	602b      	strlt	r3, [r5, #0]
 80045a2:	2c00      	cmp	r4, #0
 80045a4:	d0dd      	beq.n	8004562 <sniprintf+0x16>
 80045a6:	9b02      	ldr	r3, [sp, #8]
 80045a8:	2200      	movs	r2, #0
 80045aa:	701a      	strb	r2, [r3, #0]
 80045ac:	e7d9      	b.n	8004562 <sniprintf+0x16>
 80045ae:	bf00      	nop
 80045b0:	20000058 	.word	0x20000058

080045b4 <memset>:
 80045b4:	4402      	add	r2, r0
 80045b6:	4603      	mov	r3, r0
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d100      	bne.n	80045be <memset+0xa>
 80045bc:	4770      	bx	lr
 80045be:	f803 1b01 	strb.w	r1, [r3], #1
 80045c2:	e7f9      	b.n	80045b8 <memset+0x4>

080045c4 <__errno>:
 80045c4:	4b01      	ldr	r3, [pc, #4]	; (80045cc <__errno+0x8>)
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	20000058 	.word	0x20000058

080045d0 <__libc_init_array>:
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	4d0d      	ldr	r5, [pc, #52]	; (8004608 <__libc_init_array+0x38>)
 80045d4:	4c0d      	ldr	r4, [pc, #52]	; (800460c <__libc_init_array+0x3c>)
 80045d6:	1b64      	subs	r4, r4, r5
 80045d8:	10a4      	asrs	r4, r4, #2
 80045da:	2600      	movs	r6, #0
 80045dc:	42a6      	cmp	r6, r4
 80045de:	d109      	bne.n	80045f4 <__libc_init_array+0x24>
 80045e0:	4d0b      	ldr	r5, [pc, #44]	; (8004610 <__libc_init_array+0x40>)
 80045e2:	4c0c      	ldr	r4, [pc, #48]	; (8004614 <__libc_init_array+0x44>)
 80045e4:	f000 fc6a 	bl	8004ebc <_init>
 80045e8:	1b64      	subs	r4, r4, r5
 80045ea:	10a4      	asrs	r4, r4, #2
 80045ec:	2600      	movs	r6, #0
 80045ee:	42a6      	cmp	r6, r4
 80045f0:	d105      	bne.n	80045fe <__libc_init_array+0x2e>
 80045f2:	bd70      	pop	{r4, r5, r6, pc}
 80045f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f8:	4798      	blx	r3
 80045fa:	3601      	adds	r6, #1
 80045fc:	e7ee      	b.n	80045dc <__libc_init_array+0xc>
 80045fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004602:	4798      	blx	r3
 8004604:	3601      	adds	r6, #1
 8004606:	e7f2      	b.n	80045ee <__libc_init_array+0x1e>
 8004608:	08004fa4 	.word	0x08004fa4
 800460c:	08004fa4 	.word	0x08004fa4
 8004610:	08004fa4 	.word	0x08004fa4
 8004614:	08004fa8 	.word	0x08004fa8

08004618 <__retarget_lock_acquire_recursive>:
 8004618:	4770      	bx	lr

0800461a <__retarget_lock_release_recursive>:
 800461a:	4770      	bx	lr

0800461c <__ssputs_r>:
 800461c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004620:	688e      	ldr	r6, [r1, #8]
 8004622:	461f      	mov	r7, r3
 8004624:	42be      	cmp	r6, r7
 8004626:	680b      	ldr	r3, [r1, #0]
 8004628:	4682      	mov	sl, r0
 800462a:	460c      	mov	r4, r1
 800462c:	4690      	mov	r8, r2
 800462e:	d82c      	bhi.n	800468a <__ssputs_r+0x6e>
 8004630:	898a      	ldrh	r2, [r1, #12]
 8004632:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004636:	d026      	beq.n	8004686 <__ssputs_r+0x6a>
 8004638:	6965      	ldr	r5, [r4, #20]
 800463a:	6909      	ldr	r1, [r1, #16]
 800463c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004640:	eba3 0901 	sub.w	r9, r3, r1
 8004644:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004648:	1c7b      	adds	r3, r7, #1
 800464a:	444b      	add	r3, r9
 800464c:	106d      	asrs	r5, r5, #1
 800464e:	429d      	cmp	r5, r3
 8004650:	bf38      	it	cc
 8004652:	461d      	movcc	r5, r3
 8004654:	0553      	lsls	r3, r2, #21
 8004656:	d527      	bpl.n	80046a8 <__ssputs_r+0x8c>
 8004658:	4629      	mov	r1, r5
 800465a:	f000 f957 	bl	800490c <_malloc_r>
 800465e:	4606      	mov	r6, r0
 8004660:	b360      	cbz	r0, 80046bc <__ssputs_r+0xa0>
 8004662:	6921      	ldr	r1, [r4, #16]
 8004664:	464a      	mov	r2, r9
 8004666:	f000 fbc7 	bl	8004df8 <memcpy>
 800466a:	89a3      	ldrh	r3, [r4, #12]
 800466c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004674:	81a3      	strh	r3, [r4, #12]
 8004676:	6126      	str	r6, [r4, #16]
 8004678:	6165      	str	r5, [r4, #20]
 800467a:	444e      	add	r6, r9
 800467c:	eba5 0509 	sub.w	r5, r5, r9
 8004680:	6026      	str	r6, [r4, #0]
 8004682:	60a5      	str	r5, [r4, #8]
 8004684:	463e      	mov	r6, r7
 8004686:	42be      	cmp	r6, r7
 8004688:	d900      	bls.n	800468c <__ssputs_r+0x70>
 800468a:	463e      	mov	r6, r7
 800468c:	6820      	ldr	r0, [r4, #0]
 800468e:	4632      	mov	r2, r6
 8004690:	4641      	mov	r1, r8
 8004692:	f000 fb86 	bl	8004da2 <memmove>
 8004696:	68a3      	ldr	r3, [r4, #8]
 8004698:	1b9b      	subs	r3, r3, r6
 800469a:	60a3      	str	r3, [r4, #8]
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	4433      	add	r3, r6
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	2000      	movs	r0, #0
 80046a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a8:	462a      	mov	r2, r5
 80046aa:	f000 fb4b 	bl	8004d44 <_realloc_r>
 80046ae:	4606      	mov	r6, r0
 80046b0:	2800      	cmp	r0, #0
 80046b2:	d1e0      	bne.n	8004676 <__ssputs_r+0x5a>
 80046b4:	6921      	ldr	r1, [r4, #16]
 80046b6:	4650      	mov	r0, sl
 80046b8:	f000 fbac 	bl	8004e14 <_free_r>
 80046bc:	230c      	movs	r3, #12
 80046be:	f8ca 3000 	str.w	r3, [sl]
 80046c2:	89a3      	ldrh	r3, [r4, #12]
 80046c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046c8:	81a3      	strh	r3, [r4, #12]
 80046ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046ce:	e7e9      	b.n	80046a4 <__ssputs_r+0x88>

080046d0 <_svfiprintf_r>:
 80046d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d4:	4698      	mov	r8, r3
 80046d6:	898b      	ldrh	r3, [r1, #12]
 80046d8:	061b      	lsls	r3, r3, #24
 80046da:	b09d      	sub	sp, #116	; 0x74
 80046dc:	4607      	mov	r7, r0
 80046de:	460d      	mov	r5, r1
 80046e0:	4614      	mov	r4, r2
 80046e2:	d50e      	bpl.n	8004702 <_svfiprintf_r+0x32>
 80046e4:	690b      	ldr	r3, [r1, #16]
 80046e6:	b963      	cbnz	r3, 8004702 <_svfiprintf_r+0x32>
 80046e8:	2140      	movs	r1, #64	; 0x40
 80046ea:	f000 f90f 	bl	800490c <_malloc_r>
 80046ee:	6028      	str	r0, [r5, #0]
 80046f0:	6128      	str	r0, [r5, #16]
 80046f2:	b920      	cbnz	r0, 80046fe <_svfiprintf_r+0x2e>
 80046f4:	230c      	movs	r3, #12
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046fc:	e0d0      	b.n	80048a0 <_svfiprintf_r+0x1d0>
 80046fe:	2340      	movs	r3, #64	; 0x40
 8004700:	616b      	str	r3, [r5, #20]
 8004702:	2300      	movs	r3, #0
 8004704:	9309      	str	r3, [sp, #36]	; 0x24
 8004706:	2320      	movs	r3, #32
 8004708:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800470c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004710:	2330      	movs	r3, #48	; 0x30
 8004712:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80048b8 <_svfiprintf_r+0x1e8>
 8004716:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800471a:	f04f 0901 	mov.w	r9, #1
 800471e:	4623      	mov	r3, r4
 8004720:	469a      	mov	sl, r3
 8004722:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004726:	b10a      	cbz	r2, 800472c <_svfiprintf_r+0x5c>
 8004728:	2a25      	cmp	r2, #37	; 0x25
 800472a:	d1f9      	bne.n	8004720 <_svfiprintf_r+0x50>
 800472c:	ebba 0b04 	subs.w	fp, sl, r4
 8004730:	d00b      	beq.n	800474a <_svfiprintf_r+0x7a>
 8004732:	465b      	mov	r3, fp
 8004734:	4622      	mov	r2, r4
 8004736:	4629      	mov	r1, r5
 8004738:	4638      	mov	r0, r7
 800473a:	f7ff ff6f 	bl	800461c <__ssputs_r>
 800473e:	3001      	adds	r0, #1
 8004740:	f000 80a9 	beq.w	8004896 <_svfiprintf_r+0x1c6>
 8004744:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004746:	445a      	add	r2, fp
 8004748:	9209      	str	r2, [sp, #36]	; 0x24
 800474a:	f89a 3000 	ldrb.w	r3, [sl]
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 80a1 	beq.w	8004896 <_svfiprintf_r+0x1c6>
 8004754:	2300      	movs	r3, #0
 8004756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800475a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800475e:	f10a 0a01 	add.w	sl, sl, #1
 8004762:	9304      	str	r3, [sp, #16]
 8004764:	9307      	str	r3, [sp, #28]
 8004766:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800476a:	931a      	str	r3, [sp, #104]	; 0x68
 800476c:	4654      	mov	r4, sl
 800476e:	2205      	movs	r2, #5
 8004770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004774:	4850      	ldr	r0, [pc, #320]	; (80048b8 <_svfiprintf_r+0x1e8>)
 8004776:	f7fb fd33 	bl	80001e0 <memchr>
 800477a:	9a04      	ldr	r2, [sp, #16]
 800477c:	b9d8      	cbnz	r0, 80047b6 <_svfiprintf_r+0xe6>
 800477e:	06d0      	lsls	r0, r2, #27
 8004780:	bf44      	itt	mi
 8004782:	2320      	movmi	r3, #32
 8004784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004788:	0711      	lsls	r1, r2, #28
 800478a:	bf44      	itt	mi
 800478c:	232b      	movmi	r3, #43	; 0x2b
 800478e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004792:	f89a 3000 	ldrb.w	r3, [sl]
 8004796:	2b2a      	cmp	r3, #42	; 0x2a
 8004798:	d015      	beq.n	80047c6 <_svfiprintf_r+0xf6>
 800479a:	9a07      	ldr	r2, [sp, #28]
 800479c:	4654      	mov	r4, sl
 800479e:	2000      	movs	r0, #0
 80047a0:	f04f 0c0a 	mov.w	ip, #10
 80047a4:	4621      	mov	r1, r4
 80047a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047aa:	3b30      	subs	r3, #48	; 0x30
 80047ac:	2b09      	cmp	r3, #9
 80047ae:	d94d      	bls.n	800484c <_svfiprintf_r+0x17c>
 80047b0:	b1b0      	cbz	r0, 80047e0 <_svfiprintf_r+0x110>
 80047b2:	9207      	str	r2, [sp, #28]
 80047b4:	e014      	b.n	80047e0 <_svfiprintf_r+0x110>
 80047b6:	eba0 0308 	sub.w	r3, r0, r8
 80047ba:	fa09 f303 	lsl.w	r3, r9, r3
 80047be:	4313      	orrs	r3, r2
 80047c0:	9304      	str	r3, [sp, #16]
 80047c2:	46a2      	mov	sl, r4
 80047c4:	e7d2      	b.n	800476c <_svfiprintf_r+0x9c>
 80047c6:	9b03      	ldr	r3, [sp, #12]
 80047c8:	1d19      	adds	r1, r3, #4
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	9103      	str	r1, [sp, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bfbb      	ittet	lt
 80047d2:	425b      	neglt	r3, r3
 80047d4:	f042 0202 	orrlt.w	r2, r2, #2
 80047d8:	9307      	strge	r3, [sp, #28]
 80047da:	9307      	strlt	r3, [sp, #28]
 80047dc:	bfb8      	it	lt
 80047de:	9204      	strlt	r2, [sp, #16]
 80047e0:	7823      	ldrb	r3, [r4, #0]
 80047e2:	2b2e      	cmp	r3, #46	; 0x2e
 80047e4:	d10c      	bne.n	8004800 <_svfiprintf_r+0x130>
 80047e6:	7863      	ldrb	r3, [r4, #1]
 80047e8:	2b2a      	cmp	r3, #42	; 0x2a
 80047ea:	d134      	bne.n	8004856 <_svfiprintf_r+0x186>
 80047ec:	9b03      	ldr	r3, [sp, #12]
 80047ee:	1d1a      	adds	r2, r3, #4
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	9203      	str	r2, [sp, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bfb8      	it	lt
 80047f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80047fc:	3402      	adds	r4, #2
 80047fe:	9305      	str	r3, [sp, #20]
 8004800:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80048c8 <_svfiprintf_r+0x1f8>
 8004804:	7821      	ldrb	r1, [r4, #0]
 8004806:	2203      	movs	r2, #3
 8004808:	4650      	mov	r0, sl
 800480a:	f7fb fce9 	bl	80001e0 <memchr>
 800480e:	b138      	cbz	r0, 8004820 <_svfiprintf_r+0x150>
 8004810:	9b04      	ldr	r3, [sp, #16]
 8004812:	eba0 000a 	sub.w	r0, r0, sl
 8004816:	2240      	movs	r2, #64	; 0x40
 8004818:	4082      	lsls	r2, r0
 800481a:	4313      	orrs	r3, r2
 800481c:	3401      	adds	r4, #1
 800481e:	9304      	str	r3, [sp, #16]
 8004820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004824:	4825      	ldr	r0, [pc, #148]	; (80048bc <_svfiprintf_r+0x1ec>)
 8004826:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800482a:	2206      	movs	r2, #6
 800482c:	f7fb fcd8 	bl	80001e0 <memchr>
 8004830:	2800      	cmp	r0, #0
 8004832:	d038      	beq.n	80048a6 <_svfiprintf_r+0x1d6>
 8004834:	4b22      	ldr	r3, [pc, #136]	; (80048c0 <_svfiprintf_r+0x1f0>)
 8004836:	bb1b      	cbnz	r3, 8004880 <_svfiprintf_r+0x1b0>
 8004838:	9b03      	ldr	r3, [sp, #12]
 800483a:	3307      	adds	r3, #7
 800483c:	f023 0307 	bic.w	r3, r3, #7
 8004840:	3308      	adds	r3, #8
 8004842:	9303      	str	r3, [sp, #12]
 8004844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004846:	4433      	add	r3, r6
 8004848:	9309      	str	r3, [sp, #36]	; 0x24
 800484a:	e768      	b.n	800471e <_svfiprintf_r+0x4e>
 800484c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004850:	460c      	mov	r4, r1
 8004852:	2001      	movs	r0, #1
 8004854:	e7a6      	b.n	80047a4 <_svfiprintf_r+0xd4>
 8004856:	2300      	movs	r3, #0
 8004858:	3401      	adds	r4, #1
 800485a:	9305      	str	r3, [sp, #20]
 800485c:	4619      	mov	r1, r3
 800485e:	f04f 0c0a 	mov.w	ip, #10
 8004862:	4620      	mov	r0, r4
 8004864:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004868:	3a30      	subs	r2, #48	; 0x30
 800486a:	2a09      	cmp	r2, #9
 800486c:	d903      	bls.n	8004876 <_svfiprintf_r+0x1a6>
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0c6      	beq.n	8004800 <_svfiprintf_r+0x130>
 8004872:	9105      	str	r1, [sp, #20]
 8004874:	e7c4      	b.n	8004800 <_svfiprintf_r+0x130>
 8004876:	fb0c 2101 	mla	r1, ip, r1, r2
 800487a:	4604      	mov	r4, r0
 800487c:	2301      	movs	r3, #1
 800487e:	e7f0      	b.n	8004862 <_svfiprintf_r+0x192>
 8004880:	ab03      	add	r3, sp, #12
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	462a      	mov	r2, r5
 8004886:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <_svfiprintf_r+0x1f4>)
 8004888:	a904      	add	r1, sp, #16
 800488a:	4638      	mov	r0, r7
 800488c:	f3af 8000 	nop.w
 8004890:	1c42      	adds	r2, r0, #1
 8004892:	4606      	mov	r6, r0
 8004894:	d1d6      	bne.n	8004844 <_svfiprintf_r+0x174>
 8004896:	89ab      	ldrh	r3, [r5, #12]
 8004898:	065b      	lsls	r3, r3, #25
 800489a:	f53f af2d 	bmi.w	80046f8 <_svfiprintf_r+0x28>
 800489e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048a0:	b01d      	add	sp, #116	; 0x74
 80048a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a6:	ab03      	add	r3, sp, #12
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	462a      	mov	r2, r5
 80048ac:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <_svfiprintf_r+0x1f4>)
 80048ae:	a904      	add	r1, sp, #16
 80048b0:	4638      	mov	r0, r7
 80048b2:	f000 f919 	bl	8004ae8 <_printf_i>
 80048b6:	e7eb      	b.n	8004890 <_svfiprintf_r+0x1c0>
 80048b8:	08004f70 	.word	0x08004f70
 80048bc:	08004f7a 	.word	0x08004f7a
 80048c0:	00000000 	.word	0x00000000
 80048c4:	0800461d 	.word	0x0800461d
 80048c8:	08004f76 	.word	0x08004f76

080048cc <sbrk_aligned>:
 80048cc:	b570      	push	{r4, r5, r6, lr}
 80048ce:	4e0e      	ldr	r6, [pc, #56]	; (8004908 <sbrk_aligned+0x3c>)
 80048d0:	460c      	mov	r4, r1
 80048d2:	6831      	ldr	r1, [r6, #0]
 80048d4:	4605      	mov	r5, r0
 80048d6:	b911      	cbnz	r1, 80048de <sbrk_aligned+0x12>
 80048d8:	f000 fa7e 	bl	8004dd8 <_sbrk_r>
 80048dc:	6030      	str	r0, [r6, #0]
 80048de:	4621      	mov	r1, r4
 80048e0:	4628      	mov	r0, r5
 80048e2:	f000 fa79 	bl	8004dd8 <_sbrk_r>
 80048e6:	1c43      	adds	r3, r0, #1
 80048e8:	d00a      	beq.n	8004900 <sbrk_aligned+0x34>
 80048ea:	1cc4      	adds	r4, r0, #3
 80048ec:	f024 0403 	bic.w	r4, r4, #3
 80048f0:	42a0      	cmp	r0, r4
 80048f2:	d007      	beq.n	8004904 <sbrk_aligned+0x38>
 80048f4:	1a21      	subs	r1, r4, r0
 80048f6:	4628      	mov	r0, r5
 80048f8:	f000 fa6e 	bl	8004dd8 <_sbrk_r>
 80048fc:	3001      	adds	r0, #1
 80048fe:	d101      	bne.n	8004904 <sbrk_aligned+0x38>
 8004900:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004904:	4620      	mov	r0, r4
 8004906:	bd70      	pop	{r4, r5, r6, pc}
 8004908:	2000029c 	.word	0x2000029c

0800490c <_malloc_r>:
 800490c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004910:	1ccd      	adds	r5, r1, #3
 8004912:	f025 0503 	bic.w	r5, r5, #3
 8004916:	3508      	adds	r5, #8
 8004918:	2d0c      	cmp	r5, #12
 800491a:	bf38      	it	cc
 800491c:	250c      	movcc	r5, #12
 800491e:	2d00      	cmp	r5, #0
 8004920:	4607      	mov	r7, r0
 8004922:	db01      	blt.n	8004928 <_malloc_r+0x1c>
 8004924:	42a9      	cmp	r1, r5
 8004926:	d905      	bls.n	8004934 <_malloc_r+0x28>
 8004928:	230c      	movs	r3, #12
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	2600      	movs	r6, #0
 800492e:	4630      	mov	r0, r6
 8004930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004934:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a08 <_malloc_r+0xfc>
 8004938:	f000 f9f8 	bl	8004d2c <__malloc_lock>
 800493c:	f8d8 3000 	ldr.w	r3, [r8]
 8004940:	461c      	mov	r4, r3
 8004942:	bb5c      	cbnz	r4, 800499c <_malloc_r+0x90>
 8004944:	4629      	mov	r1, r5
 8004946:	4638      	mov	r0, r7
 8004948:	f7ff ffc0 	bl	80048cc <sbrk_aligned>
 800494c:	1c43      	adds	r3, r0, #1
 800494e:	4604      	mov	r4, r0
 8004950:	d155      	bne.n	80049fe <_malloc_r+0xf2>
 8004952:	f8d8 4000 	ldr.w	r4, [r8]
 8004956:	4626      	mov	r6, r4
 8004958:	2e00      	cmp	r6, #0
 800495a:	d145      	bne.n	80049e8 <_malloc_r+0xdc>
 800495c:	2c00      	cmp	r4, #0
 800495e:	d048      	beq.n	80049f2 <_malloc_r+0xe6>
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	4631      	mov	r1, r6
 8004964:	4638      	mov	r0, r7
 8004966:	eb04 0903 	add.w	r9, r4, r3
 800496a:	f000 fa35 	bl	8004dd8 <_sbrk_r>
 800496e:	4581      	cmp	r9, r0
 8004970:	d13f      	bne.n	80049f2 <_malloc_r+0xe6>
 8004972:	6821      	ldr	r1, [r4, #0]
 8004974:	1a6d      	subs	r5, r5, r1
 8004976:	4629      	mov	r1, r5
 8004978:	4638      	mov	r0, r7
 800497a:	f7ff ffa7 	bl	80048cc <sbrk_aligned>
 800497e:	3001      	adds	r0, #1
 8004980:	d037      	beq.n	80049f2 <_malloc_r+0xe6>
 8004982:	6823      	ldr	r3, [r4, #0]
 8004984:	442b      	add	r3, r5
 8004986:	6023      	str	r3, [r4, #0]
 8004988:	f8d8 3000 	ldr.w	r3, [r8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d038      	beq.n	8004a02 <_malloc_r+0xf6>
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	42a2      	cmp	r2, r4
 8004994:	d12b      	bne.n	80049ee <_malloc_r+0xe2>
 8004996:	2200      	movs	r2, #0
 8004998:	605a      	str	r2, [r3, #4]
 800499a:	e00f      	b.n	80049bc <_malloc_r+0xb0>
 800499c:	6822      	ldr	r2, [r4, #0]
 800499e:	1b52      	subs	r2, r2, r5
 80049a0:	d41f      	bmi.n	80049e2 <_malloc_r+0xd6>
 80049a2:	2a0b      	cmp	r2, #11
 80049a4:	d917      	bls.n	80049d6 <_malloc_r+0xca>
 80049a6:	1961      	adds	r1, r4, r5
 80049a8:	42a3      	cmp	r3, r4
 80049aa:	6025      	str	r5, [r4, #0]
 80049ac:	bf18      	it	ne
 80049ae:	6059      	strne	r1, [r3, #4]
 80049b0:	6863      	ldr	r3, [r4, #4]
 80049b2:	bf08      	it	eq
 80049b4:	f8c8 1000 	streq.w	r1, [r8]
 80049b8:	5162      	str	r2, [r4, r5]
 80049ba:	604b      	str	r3, [r1, #4]
 80049bc:	4638      	mov	r0, r7
 80049be:	f104 060b 	add.w	r6, r4, #11
 80049c2:	f000 f9b9 	bl	8004d38 <__malloc_unlock>
 80049c6:	f026 0607 	bic.w	r6, r6, #7
 80049ca:	1d23      	adds	r3, r4, #4
 80049cc:	1af2      	subs	r2, r6, r3
 80049ce:	d0ae      	beq.n	800492e <_malloc_r+0x22>
 80049d0:	1b9b      	subs	r3, r3, r6
 80049d2:	50a3      	str	r3, [r4, r2]
 80049d4:	e7ab      	b.n	800492e <_malloc_r+0x22>
 80049d6:	42a3      	cmp	r3, r4
 80049d8:	6862      	ldr	r2, [r4, #4]
 80049da:	d1dd      	bne.n	8004998 <_malloc_r+0x8c>
 80049dc:	f8c8 2000 	str.w	r2, [r8]
 80049e0:	e7ec      	b.n	80049bc <_malloc_r+0xb0>
 80049e2:	4623      	mov	r3, r4
 80049e4:	6864      	ldr	r4, [r4, #4]
 80049e6:	e7ac      	b.n	8004942 <_malloc_r+0x36>
 80049e8:	4634      	mov	r4, r6
 80049ea:	6876      	ldr	r6, [r6, #4]
 80049ec:	e7b4      	b.n	8004958 <_malloc_r+0x4c>
 80049ee:	4613      	mov	r3, r2
 80049f0:	e7cc      	b.n	800498c <_malloc_r+0x80>
 80049f2:	230c      	movs	r3, #12
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	4638      	mov	r0, r7
 80049f8:	f000 f99e 	bl	8004d38 <__malloc_unlock>
 80049fc:	e797      	b.n	800492e <_malloc_r+0x22>
 80049fe:	6025      	str	r5, [r4, #0]
 8004a00:	e7dc      	b.n	80049bc <_malloc_r+0xb0>
 8004a02:	605b      	str	r3, [r3, #4]
 8004a04:	deff      	udf	#255	; 0xff
 8004a06:	bf00      	nop
 8004a08:	20000298 	.word	0x20000298

08004a0c <_printf_common>:
 8004a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a10:	4616      	mov	r6, r2
 8004a12:	4699      	mov	r9, r3
 8004a14:	688a      	ldr	r2, [r1, #8]
 8004a16:	690b      	ldr	r3, [r1, #16]
 8004a18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	bfb8      	it	lt
 8004a20:	4613      	movlt	r3, r2
 8004a22:	6033      	str	r3, [r6, #0]
 8004a24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a28:	4607      	mov	r7, r0
 8004a2a:	460c      	mov	r4, r1
 8004a2c:	b10a      	cbz	r2, 8004a32 <_printf_common+0x26>
 8004a2e:	3301      	adds	r3, #1
 8004a30:	6033      	str	r3, [r6, #0]
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	0699      	lsls	r1, r3, #26
 8004a36:	bf42      	ittt	mi
 8004a38:	6833      	ldrmi	r3, [r6, #0]
 8004a3a:	3302      	addmi	r3, #2
 8004a3c:	6033      	strmi	r3, [r6, #0]
 8004a3e:	6825      	ldr	r5, [r4, #0]
 8004a40:	f015 0506 	ands.w	r5, r5, #6
 8004a44:	d106      	bne.n	8004a54 <_printf_common+0x48>
 8004a46:	f104 0a19 	add.w	sl, r4, #25
 8004a4a:	68e3      	ldr	r3, [r4, #12]
 8004a4c:	6832      	ldr	r2, [r6, #0]
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	42ab      	cmp	r3, r5
 8004a52:	dc26      	bgt.n	8004aa2 <_printf_common+0x96>
 8004a54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a58:	1e13      	subs	r3, r2, #0
 8004a5a:	6822      	ldr	r2, [r4, #0]
 8004a5c:	bf18      	it	ne
 8004a5e:	2301      	movne	r3, #1
 8004a60:	0692      	lsls	r2, r2, #26
 8004a62:	d42b      	bmi.n	8004abc <_printf_common+0xb0>
 8004a64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a68:	4649      	mov	r1, r9
 8004a6a:	4638      	mov	r0, r7
 8004a6c:	47c0      	blx	r8
 8004a6e:	3001      	adds	r0, #1
 8004a70:	d01e      	beq.n	8004ab0 <_printf_common+0xa4>
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	6922      	ldr	r2, [r4, #16]
 8004a76:	f003 0306 	and.w	r3, r3, #6
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	bf02      	ittt	eq
 8004a7e:	68e5      	ldreq	r5, [r4, #12]
 8004a80:	6833      	ldreq	r3, [r6, #0]
 8004a82:	1aed      	subeq	r5, r5, r3
 8004a84:	68a3      	ldr	r3, [r4, #8]
 8004a86:	bf0c      	ite	eq
 8004a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a8c:	2500      	movne	r5, #0
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	bfc4      	itt	gt
 8004a92:	1a9b      	subgt	r3, r3, r2
 8004a94:	18ed      	addgt	r5, r5, r3
 8004a96:	2600      	movs	r6, #0
 8004a98:	341a      	adds	r4, #26
 8004a9a:	42b5      	cmp	r5, r6
 8004a9c:	d11a      	bne.n	8004ad4 <_printf_common+0xc8>
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	e008      	b.n	8004ab4 <_printf_common+0xa8>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	4652      	mov	r2, sl
 8004aa6:	4649      	mov	r1, r9
 8004aa8:	4638      	mov	r0, r7
 8004aaa:	47c0      	blx	r8
 8004aac:	3001      	adds	r0, #1
 8004aae:	d103      	bne.n	8004ab8 <_printf_common+0xac>
 8004ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab8:	3501      	adds	r5, #1
 8004aba:	e7c6      	b.n	8004a4a <_printf_common+0x3e>
 8004abc:	18e1      	adds	r1, r4, r3
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	2030      	movs	r0, #48	; 0x30
 8004ac2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ac6:	4422      	add	r2, r4
 8004ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004acc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ad0:	3302      	adds	r3, #2
 8004ad2:	e7c7      	b.n	8004a64 <_printf_common+0x58>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	4622      	mov	r2, r4
 8004ad8:	4649      	mov	r1, r9
 8004ada:	4638      	mov	r0, r7
 8004adc:	47c0      	blx	r8
 8004ade:	3001      	adds	r0, #1
 8004ae0:	d0e6      	beq.n	8004ab0 <_printf_common+0xa4>
 8004ae2:	3601      	adds	r6, #1
 8004ae4:	e7d9      	b.n	8004a9a <_printf_common+0x8e>
	...

08004ae8 <_printf_i>:
 8004ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aec:	7e0f      	ldrb	r7, [r1, #24]
 8004aee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004af0:	2f78      	cmp	r7, #120	; 0x78
 8004af2:	4691      	mov	r9, r2
 8004af4:	4680      	mov	r8, r0
 8004af6:	460c      	mov	r4, r1
 8004af8:	469a      	mov	sl, r3
 8004afa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004afe:	d807      	bhi.n	8004b10 <_printf_i+0x28>
 8004b00:	2f62      	cmp	r7, #98	; 0x62
 8004b02:	d80a      	bhi.n	8004b1a <_printf_i+0x32>
 8004b04:	2f00      	cmp	r7, #0
 8004b06:	f000 80d4 	beq.w	8004cb2 <_printf_i+0x1ca>
 8004b0a:	2f58      	cmp	r7, #88	; 0x58
 8004b0c:	f000 80c0 	beq.w	8004c90 <_printf_i+0x1a8>
 8004b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b18:	e03a      	b.n	8004b90 <_printf_i+0xa8>
 8004b1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b1e:	2b15      	cmp	r3, #21
 8004b20:	d8f6      	bhi.n	8004b10 <_printf_i+0x28>
 8004b22:	a101      	add	r1, pc, #4	; (adr r1, 8004b28 <_printf_i+0x40>)
 8004b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b28:	08004b81 	.word	0x08004b81
 8004b2c:	08004b95 	.word	0x08004b95
 8004b30:	08004b11 	.word	0x08004b11
 8004b34:	08004b11 	.word	0x08004b11
 8004b38:	08004b11 	.word	0x08004b11
 8004b3c:	08004b11 	.word	0x08004b11
 8004b40:	08004b95 	.word	0x08004b95
 8004b44:	08004b11 	.word	0x08004b11
 8004b48:	08004b11 	.word	0x08004b11
 8004b4c:	08004b11 	.word	0x08004b11
 8004b50:	08004b11 	.word	0x08004b11
 8004b54:	08004c99 	.word	0x08004c99
 8004b58:	08004bc1 	.word	0x08004bc1
 8004b5c:	08004c53 	.word	0x08004c53
 8004b60:	08004b11 	.word	0x08004b11
 8004b64:	08004b11 	.word	0x08004b11
 8004b68:	08004cbb 	.word	0x08004cbb
 8004b6c:	08004b11 	.word	0x08004b11
 8004b70:	08004bc1 	.word	0x08004bc1
 8004b74:	08004b11 	.word	0x08004b11
 8004b78:	08004b11 	.word	0x08004b11
 8004b7c:	08004c5b 	.word	0x08004c5b
 8004b80:	682b      	ldr	r3, [r5, #0]
 8004b82:	1d1a      	adds	r2, r3, #4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	602a      	str	r2, [r5, #0]
 8004b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b90:	2301      	movs	r3, #1
 8004b92:	e09f      	b.n	8004cd4 <_printf_i+0x1ec>
 8004b94:	6820      	ldr	r0, [r4, #0]
 8004b96:	682b      	ldr	r3, [r5, #0]
 8004b98:	0607      	lsls	r7, r0, #24
 8004b9a:	f103 0104 	add.w	r1, r3, #4
 8004b9e:	6029      	str	r1, [r5, #0]
 8004ba0:	d501      	bpl.n	8004ba6 <_printf_i+0xbe>
 8004ba2:	681e      	ldr	r6, [r3, #0]
 8004ba4:	e003      	b.n	8004bae <_printf_i+0xc6>
 8004ba6:	0646      	lsls	r6, r0, #25
 8004ba8:	d5fb      	bpl.n	8004ba2 <_printf_i+0xba>
 8004baa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004bae:	2e00      	cmp	r6, #0
 8004bb0:	da03      	bge.n	8004bba <_printf_i+0xd2>
 8004bb2:	232d      	movs	r3, #45	; 0x2d
 8004bb4:	4276      	negs	r6, r6
 8004bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bba:	485a      	ldr	r0, [pc, #360]	; (8004d24 <_printf_i+0x23c>)
 8004bbc:	230a      	movs	r3, #10
 8004bbe:	e012      	b.n	8004be6 <_printf_i+0xfe>
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	6820      	ldr	r0, [r4, #0]
 8004bc4:	1d19      	adds	r1, r3, #4
 8004bc6:	6029      	str	r1, [r5, #0]
 8004bc8:	0605      	lsls	r5, r0, #24
 8004bca:	d501      	bpl.n	8004bd0 <_printf_i+0xe8>
 8004bcc:	681e      	ldr	r6, [r3, #0]
 8004bce:	e002      	b.n	8004bd6 <_printf_i+0xee>
 8004bd0:	0641      	lsls	r1, r0, #25
 8004bd2:	d5fb      	bpl.n	8004bcc <_printf_i+0xe4>
 8004bd4:	881e      	ldrh	r6, [r3, #0]
 8004bd6:	4853      	ldr	r0, [pc, #332]	; (8004d24 <_printf_i+0x23c>)
 8004bd8:	2f6f      	cmp	r7, #111	; 0x6f
 8004bda:	bf0c      	ite	eq
 8004bdc:	2308      	moveq	r3, #8
 8004bde:	230a      	movne	r3, #10
 8004be0:	2100      	movs	r1, #0
 8004be2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004be6:	6865      	ldr	r5, [r4, #4]
 8004be8:	60a5      	str	r5, [r4, #8]
 8004bea:	2d00      	cmp	r5, #0
 8004bec:	bfa2      	ittt	ge
 8004bee:	6821      	ldrge	r1, [r4, #0]
 8004bf0:	f021 0104 	bicge.w	r1, r1, #4
 8004bf4:	6021      	strge	r1, [r4, #0]
 8004bf6:	b90e      	cbnz	r6, 8004bfc <_printf_i+0x114>
 8004bf8:	2d00      	cmp	r5, #0
 8004bfa:	d04b      	beq.n	8004c94 <_printf_i+0x1ac>
 8004bfc:	4615      	mov	r5, r2
 8004bfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c02:	fb03 6711 	mls	r7, r3, r1, r6
 8004c06:	5dc7      	ldrb	r7, [r0, r7]
 8004c08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c0c:	4637      	mov	r7, r6
 8004c0e:	42bb      	cmp	r3, r7
 8004c10:	460e      	mov	r6, r1
 8004c12:	d9f4      	bls.n	8004bfe <_printf_i+0x116>
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d10b      	bne.n	8004c30 <_printf_i+0x148>
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	07de      	lsls	r6, r3, #31
 8004c1c:	d508      	bpl.n	8004c30 <_printf_i+0x148>
 8004c1e:	6923      	ldr	r3, [r4, #16]
 8004c20:	6861      	ldr	r1, [r4, #4]
 8004c22:	4299      	cmp	r1, r3
 8004c24:	bfde      	ittt	le
 8004c26:	2330      	movle	r3, #48	; 0x30
 8004c28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c2c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004c30:	1b52      	subs	r2, r2, r5
 8004c32:	6122      	str	r2, [r4, #16]
 8004c34:	f8cd a000 	str.w	sl, [sp]
 8004c38:	464b      	mov	r3, r9
 8004c3a:	aa03      	add	r2, sp, #12
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	4640      	mov	r0, r8
 8004c40:	f7ff fee4 	bl	8004a0c <_printf_common>
 8004c44:	3001      	adds	r0, #1
 8004c46:	d14a      	bne.n	8004cde <_printf_i+0x1f6>
 8004c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c4c:	b004      	add	sp, #16
 8004c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	f043 0320 	orr.w	r3, r3, #32
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	4833      	ldr	r0, [pc, #204]	; (8004d28 <_printf_i+0x240>)
 8004c5c:	2778      	movs	r7, #120	; 0x78
 8004c5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	6829      	ldr	r1, [r5, #0]
 8004c66:	061f      	lsls	r7, r3, #24
 8004c68:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c6c:	d402      	bmi.n	8004c74 <_printf_i+0x18c>
 8004c6e:	065f      	lsls	r7, r3, #25
 8004c70:	bf48      	it	mi
 8004c72:	b2b6      	uxthmi	r6, r6
 8004c74:	07df      	lsls	r7, r3, #31
 8004c76:	bf48      	it	mi
 8004c78:	f043 0320 	orrmi.w	r3, r3, #32
 8004c7c:	6029      	str	r1, [r5, #0]
 8004c7e:	bf48      	it	mi
 8004c80:	6023      	strmi	r3, [r4, #0]
 8004c82:	b91e      	cbnz	r6, 8004c8c <_printf_i+0x1a4>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	f023 0320 	bic.w	r3, r3, #32
 8004c8a:	6023      	str	r3, [r4, #0]
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	e7a7      	b.n	8004be0 <_printf_i+0xf8>
 8004c90:	4824      	ldr	r0, [pc, #144]	; (8004d24 <_printf_i+0x23c>)
 8004c92:	e7e4      	b.n	8004c5e <_printf_i+0x176>
 8004c94:	4615      	mov	r5, r2
 8004c96:	e7bd      	b.n	8004c14 <_printf_i+0x12c>
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	6826      	ldr	r6, [r4, #0]
 8004c9c:	6961      	ldr	r1, [r4, #20]
 8004c9e:	1d18      	adds	r0, r3, #4
 8004ca0:	6028      	str	r0, [r5, #0]
 8004ca2:	0635      	lsls	r5, r6, #24
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	d501      	bpl.n	8004cac <_printf_i+0x1c4>
 8004ca8:	6019      	str	r1, [r3, #0]
 8004caa:	e002      	b.n	8004cb2 <_printf_i+0x1ca>
 8004cac:	0670      	lsls	r0, r6, #25
 8004cae:	d5fb      	bpl.n	8004ca8 <_printf_i+0x1c0>
 8004cb0:	8019      	strh	r1, [r3, #0]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	6123      	str	r3, [r4, #16]
 8004cb6:	4615      	mov	r5, r2
 8004cb8:	e7bc      	b.n	8004c34 <_printf_i+0x14c>
 8004cba:	682b      	ldr	r3, [r5, #0]
 8004cbc:	1d1a      	adds	r2, r3, #4
 8004cbe:	602a      	str	r2, [r5, #0]
 8004cc0:	681d      	ldr	r5, [r3, #0]
 8004cc2:	6862      	ldr	r2, [r4, #4]
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f7fb fa8a 	bl	80001e0 <memchr>
 8004ccc:	b108      	cbz	r0, 8004cd2 <_printf_i+0x1ea>
 8004cce:	1b40      	subs	r0, r0, r5
 8004cd0:	6060      	str	r0, [r4, #4]
 8004cd2:	6863      	ldr	r3, [r4, #4]
 8004cd4:	6123      	str	r3, [r4, #16]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cdc:	e7aa      	b.n	8004c34 <_printf_i+0x14c>
 8004cde:	6923      	ldr	r3, [r4, #16]
 8004ce0:	462a      	mov	r2, r5
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	4640      	mov	r0, r8
 8004ce6:	47d0      	blx	sl
 8004ce8:	3001      	adds	r0, #1
 8004cea:	d0ad      	beq.n	8004c48 <_printf_i+0x160>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	079b      	lsls	r3, r3, #30
 8004cf0:	d413      	bmi.n	8004d1a <_printf_i+0x232>
 8004cf2:	68e0      	ldr	r0, [r4, #12]
 8004cf4:	9b03      	ldr	r3, [sp, #12]
 8004cf6:	4298      	cmp	r0, r3
 8004cf8:	bfb8      	it	lt
 8004cfa:	4618      	movlt	r0, r3
 8004cfc:	e7a6      	b.n	8004c4c <_printf_i+0x164>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	4632      	mov	r2, r6
 8004d02:	4649      	mov	r1, r9
 8004d04:	4640      	mov	r0, r8
 8004d06:	47d0      	blx	sl
 8004d08:	3001      	adds	r0, #1
 8004d0a:	d09d      	beq.n	8004c48 <_printf_i+0x160>
 8004d0c:	3501      	adds	r5, #1
 8004d0e:	68e3      	ldr	r3, [r4, #12]
 8004d10:	9903      	ldr	r1, [sp, #12]
 8004d12:	1a5b      	subs	r3, r3, r1
 8004d14:	42ab      	cmp	r3, r5
 8004d16:	dcf2      	bgt.n	8004cfe <_printf_i+0x216>
 8004d18:	e7eb      	b.n	8004cf2 <_printf_i+0x20a>
 8004d1a:	2500      	movs	r5, #0
 8004d1c:	f104 0619 	add.w	r6, r4, #25
 8004d20:	e7f5      	b.n	8004d0e <_printf_i+0x226>
 8004d22:	bf00      	nop
 8004d24:	08004f81 	.word	0x08004f81
 8004d28:	08004f92 	.word	0x08004f92

08004d2c <__malloc_lock>:
 8004d2c:	4801      	ldr	r0, [pc, #4]	; (8004d34 <__malloc_lock+0x8>)
 8004d2e:	f7ff bc73 	b.w	8004618 <__retarget_lock_acquire_recursive>
 8004d32:	bf00      	nop
 8004d34:	20000294 	.word	0x20000294

08004d38 <__malloc_unlock>:
 8004d38:	4801      	ldr	r0, [pc, #4]	; (8004d40 <__malloc_unlock+0x8>)
 8004d3a:	f7ff bc6e 	b.w	800461a <__retarget_lock_release_recursive>
 8004d3e:	bf00      	nop
 8004d40:	20000294 	.word	0x20000294

08004d44 <_realloc_r>:
 8004d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d48:	4680      	mov	r8, r0
 8004d4a:	4614      	mov	r4, r2
 8004d4c:	460e      	mov	r6, r1
 8004d4e:	b921      	cbnz	r1, 8004d5a <_realloc_r+0x16>
 8004d50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d54:	4611      	mov	r1, r2
 8004d56:	f7ff bdd9 	b.w	800490c <_malloc_r>
 8004d5a:	b92a      	cbnz	r2, 8004d68 <_realloc_r+0x24>
 8004d5c:	f000 f85a 	bl	8004e14 <_free_r>
 8004d60:	4625      	mov	r5, r4
 8004d62:	4628      	mov	r0, r5
 8004d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d68:	f000 f8a0 	bl	8004eac <_malloc_usable_size_r>
 8004d6c:	4284      	cmp	r4, r0
 8004d6e:	4607      	mov	r7, r0
 8004d70:	d802      	bhi.n	8004d78 <_realloc_r+0x34>
 8004d72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d76:	d812      	bhi.n	8004d9e <_realloc_r+0x5a>
 8004d78:	4621      	mov	r1, r4
 8004d7a:	4640      	mov	r0, r8
 8004d7c:	f7ff fdc6 	bl	800490c <_malloc_r>
 8004d80:	4605      	mov	r5, r0
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d0ed      	beq.n	8004d62 <_realloc_r+0x1e>
 8004d86:	42bc      	cmp	r4, r7
 8004d88:	4622      	mov	r2, r4
 8004d8a:	4631      	mov	r1, r6
 8004d8c:	bf28      	it	cs
 8004d8e:	463a      	movcs	r2, r7
 8004d90:	f000 f832 	bl	8004df8 <memcpy>
 8004d94:	4631      	mov	r1, r6
 8004d96:	4640      	mov	r0, r8
 8004d98:	f000 f83c 	bl	8004e14 <_free_r>
 8004d9c:	e7e1      	b.n	8004d62 <_realloc_r+0x1e>
 8004d9e:	4635      	mov	r5, r6
 8004da0:	e7df      	b.n	8004d62 <_realloc_r+0x1e>

08004da2 <memmove>:
 8004da2:	4288      	cmp	r0, r1
 8004da4:	b510      	push	{r4, lr}
 8004da6:	eb01 0402 	add.w	r4, r1, r2
 8004daa:	d902      	bls.n	8004db2 <memmove+0x10>
 8004dac:	4284      	cmp	r4, r0
 8004dae:	4623      	mov	r3, r4
 8004db0:	d807      	bhi.n	8004dc2 <memmove+0x20>
 8004db2:	1e43      	subs	r3, r0, #1
 8004db4:	42a1      	cmp	r1, r4
 8004db6:	d008      	beq.n	8004dca <memmove+0x28>
 8004db8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dbc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dc0:	e7f8      	b.n	8004db4 <memmove+0x12>
 8004dc2:	4402      	add	r2, r0
 8004dc4:	4601      	mov	r1, r0
 8004dc6:	428a      	cmp	r2, r1
 8004dc8:	d100      	bne.n	8004dcc <memmove+0x2a>
 8004dca:	bd10      	pop	{r4, pc}
 8004dcc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dd0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dd4:	e7f7      	b.n	8004dc6 <memmove+0x24>
	...

08004dd8 <_sbrk_r>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	4d06      	ldr	r5, [pc, #24]	; (8004df4 <_sbrk_r+0x1c>)
 8004ddc:	2300      	movs	r3, #0
 8004dde:	4604      	mov	r4, r0
 8004de0:	4608      	mov	r0, r1
 8004de2:	602b      	str	r3, [r5, #0]
 8004de4:	f7fc f980 	bl	80010e8 <_sbrk>
 8004de8:	1c43      	adds	r3, r0, #1
 8004dea:	d102      	bne.n	8004df2 <_sbrk_r+0x1a>
 8004dec:	682b      	ldr	r3, [r5, #0]
 8004dee:	b103      	cbz	r3, 8004df2 <_sbrk_r+0x1a>
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	bd38      	pop	{r3, r4, r5, pc}
 8004df4:	200002a0 	.word	0x200002a0

08004df8 <memcpy>:
 8004df8:	440a      	add	r2, r1
 8004dfa:	4291      	cmp	r1, r2
 8004dfc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004e00:	d100      	bne.n	8004e04 <memcpy+0xc>
 8004e02:	4770      	bx	lr
 8004e04:	b510      	push	{r4, lr}
 8004e06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e0e:	4291      	cmp	r1, r2
 8004e10:	d1f9      	bne.n	8004e06 <memcpy+0xe>
 8004e12:	bd10      	pop	{r4, pc}

08004e14 <_free_r>:
 8004e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e16:	2900      	cmp	r1, #0
 8004e18:	d044      	beq.n	8004ea4 <_free_r+0x90>
 8004e1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e1e:	9001      	str	r0, [sp, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f1a1 0404 	sub.w	r4, r1, #4
 8004e26:	bfb8      	it	lt
 8004e28:	18e4      	addlt	r4, r4, r3
 8004e2a:	f7ff ff7f 	bl	8004d2c <__malloc_lock>
 8004e2e:	4a1e      	ldr	r2, [pc, #120]	; (8004ea8 <_free_r+0x94>)
 8004e30:	9801      	ldr	r0, [sp, #4]
 8004e32:	6813      	ldr	r3, [r2, #0]
 8004e34:	b933      	cbnz	r3, 8004e44 <_free_r+0x30>
 8004e36:	6063      	str	r3, [r4, #4]
 8004e38:	6014      	str	r4, [r2, #0]
 8004e3a:	b003      	add	sp, #12
 8004e3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e40:	f7ff bf7a 	b.w	8004d38 <__malloc_unlock>
 8004e44:	42a3      	cmp	r3, r4
 8004e46:	d908      	bls.n	8004e5a <_free_r+0x46>
 8004e48:	6825      	ldr	r5, [r4, #0]
 8004e4a:	1961      	adds	r1, r4, r5
 8004e4c:	428b      	cmp	r3, r1
 8004e4e:	bf01      	itttt	eq
 8004e50:	6819      	ldreq	r1, [r3, #0]
 8004e52:	685b      	ldreq	r3, [r3, #4]
 8004e54:	1949      	addeq	r1, r1, r5
 8004e56:	6021      	streq	r1, [r4, #0]
 8004e58:	e7ed      	b.n	8004e36 <_free_r+0x22>
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	b10b      	cbz	r3, 8004e64 <_free_r+0x50>
 8004e60:	42a3      	cmp	r3, r4
 8004e62:	d9fa      	bls.n	8004e5a <_free_r+0x46>
 8004e64:	6811      	ldr	r1, [r2, #0]
 8004e66:	1855      	adds	r5, r2, r1
 8004e68:	42a5      	cmp	r5, r4
 8004e6a:	d10b      	bne.n	8004e84 <_free_r+0x70>
 8004e6c:	6824      	ldr	r4, [r4, #0]
 8004e6e:	4421      	add	r1, r4
 8004e70:	1854      	adds	r4, r2, r1
 8004e72:	42a3      	cmp	r3, r4
 8004e74:	6011      	str	r1, [r2, #0]
 8004e76:	d1e0      	bne.n	8004e3a <_free_r+0x26>
 8004e78:	681c      	ldr	r4, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	6053      	str	r3, [r2, #4]
 8004e7e:	440c      	add	r4, r1
 8004e80:	6014      	str	r4, [r2, #0]
 8004e82:	e7da      	b.n	8004e3a <_free_r+0x26>
 8004e84:	d902      	bls.n	8004e8c <_free_r+0x78>
 8004e86:	230c      	movs	r3, #12
 8004e88:	6003      	str	r3, [r0, #0]
 8004e8a:	e7d6      	b.n	8004e3a <_free_r+0x26>
 8004e8c:	6825      	ldr	r5, [r4, #0]
 8004e8e:	1961      	adds	r1, r4, r5
 8004e90:	428b      	cmp	r3, r1
 8004e92:	bf04      	itt	eq
 8004e94:	6819      	ldreq	r1, [r3, #0]
 8004e96:	685b      	ldreq	r3, [r3, #4]
 8004e98:	6063      	str	r3, [r4, #4]
 8004e9a:	bf04      	itt	eq
 8004e9c:	1949      	addeq	r1, r1, r5
 8004e9e:	6021      	streq	r1, [r4, #0]
 8004ea0:	6054      	str	r4, [r2, #4]
 8004ea2:	e7ca      	b.n	8004e3a <_free_r+0x26>
 8004ea4:	b003      	add	sp, #12
 8004ea6:	bd30      	pop	{r4, r5, pc}
 8004ea8:	20000298 	.word	0x20000298

08004eac <_malloc_usable_size_r>:
 8004eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eb0:	1f18      	subs	r0, r3, #4
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	bfbc      	itt	lt
 8004eb6:	580b      	ldrlt	r3, [r1, r0]
 8004eb8:	18c0      	addlt	r0, r0, r3
 8004eba:	4770      	bx	lr

08004ebc <_init>:
 8004ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebe:	bf00      	nop
 8004ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ec2:	bc08      	pop	{r3}
 8004ec4:	469e      	mov	lr, r3
 8004ec6:	4770      	bx	lr

08004ec8 <_fini>:
 8004ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eca:	bf00      	nop
 8004ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ece:	bc08      	pop	{r3}
 8004ed0:	469e      	mov	lr, r3
 8004ed2:	4770      	bx	lr
