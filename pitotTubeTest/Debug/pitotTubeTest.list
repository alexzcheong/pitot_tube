
pitotTubeTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004548  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080046d8  080046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047a8  080047a8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080047a8  080047a8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047a8  080047a8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047a8  080047a8  000147a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047ac  080047ac  000147ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080047b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000248  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002a4  200002a4  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ccaa  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a8a  00000000  00000000  0002cd79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009c0  00000000  00000000  0002e808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000798  00000000  00000000  0002f1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001da65  00000000  00000000  0002f960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e124  00000000  00000000  0004d3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b2b4d  00000000  00000000  0005b4e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002cf8  00000000  00000000  0010e038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00110d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080046c0 	.word	0x080046c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080046c0 	.word	0x080046c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000282:	b0b1      	sub	sp, #196	; 0xc4
 8000284:	af06      	add	r7, sp, #24
    HAL_Init();
 8000286:	f000 fba3 	bl	80009d0 <HAL_Init>
    SystemClock_Config();
 800028a:	f000 f901 	bl	8000490 <SystemClock_Config>
    MX_GPIO_Init();
 800028e:	f000 f9d3 	bl	8000638 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000292:	f000 f961 	bl	8000558 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 8000296:	f000 f99f 	bl	80005d8 <MX_USART1_UART_Init>

    uint8_t buf[9] = {0};
 800029a:	2300      	movs	r3, #0
 800029c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80002a0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	711a      	strb	r2, [r3, #4]
    uint8_t cmd[] = {0x36, 0x1E};
 80002aa:	f641 6336 	movw	r3, #7734	; 0x1e36
 80002ae:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
    uint8_t stop[] = {0x3F, 0xF9};
 80002b2:	f64f 133f 	movw	r3, #63807	; 0xf93f
 80002b6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
    HAL_StatusTypeDef ret;
    HAL_I2C_Master_Transmit(&hi2c1, SENSOR_ADDRESS, stop, sizeof(stop), HAL_MAX_DELAY);
 80002ba:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80002be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002c2:	9300      	str	r3, [sp, #0]
 80002c4:	2302      	movs	r3, #2
 80002c6:	214a      	movs	r1, #74	; 0x4a
 80002c8:	486c      	ldr	r0, [pc, #432]	; (800047c <main+0x1fc>)
 80002ca:	f000 ff1f 	bl	800110c <HAL_I2C_Master_Transmit>
    HAL_Delay(1000);
 80002ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d2:	f000 fbe3 	bl	8000a9c <HAL_Delay>
    ret = HAL_I2C_Master_Transmit(&hi2c1, SENSOR_ADDRESS, cmd, sizeof(cmd), HAL_MAX_DELAY);
 80002d6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80002da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002de:	9300      	str	r3, [sp, #0]
 80002e0:	2302      	movs	r3, #2
 80002e2:	214a      	movs	r1, #74	; 0x4a
 80002e4:	4865      	ldr	r0, [pc, #404]	; (800047c <main+0x1fc>)
 80002e6:	f000 ff11 	bl	800110c <HAL_I2C_Master_Transmit>
 80002ea:	4603      	mov	r3, r0
 80002ec:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    HAL_Delay(1000);
 80002f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f4:	f000 fbd2 	bl	8000a9c <HAL_Delay>
            if (ret != HAL_OK) {
 80002f8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d018      	beq.n	8000332 <main+0xb2>
                char msg[] = "Failed to transmit I2C!\n\r";
 8000300:	4b5f      	ldr	r3, [pc, #380]	; (8000480 <main+0x200>)
 8000302:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8000306:	461d      	mov	r5, r3
 8000308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800030a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800030c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000310:	c403      	stmia	r4!, {r0, r1}
 8000312:	8022      	strh	r2, [r4, #0]
                HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000314:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff59 	bl	80001d0 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	b29a      	uxth	r2, r3
 8000322:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800032a:	4856      	ldr	r0, [pc, #344]	; (8000484 <main+0x204>)
 800032c:	f003 f896 	bl	800345c <HAL_UART_Transmit>
 8000330:	e04f      	b.n	80003d2 <main+0x152>
            }
            else {
                       // Receive product identifier data
                       ret = HAL_I2C_Master_Receive(&hi2c1, SENSOR_ADDRESS, buf, sizeof(buf), HAL_MAX_DELAY);
 8000332:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8000336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	2309      	movs	r3, #9
 800033e:	214a      	movs	r1, #74	; 0x4a
 8000340:	484e      	ldr	r0, [pc, #312]	; (800047c <main+0x1fc>)
 8000342:	f000 fffb 	bl	800133c <HAL_I2C_Master_Receive>
 8000346:	4603      	mov	r3, r0
 8000348:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
                       if (ret != HAL_OK) {
 800034c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000350:	2b00      	cmp	r3, #0
 8000352:	d018      	beq.n	8000386 <main+0x106>
                           char msg[] = "Failed to receive I2C!\n\r";
 8000354:	4b4c      	ldr	r3, [pc, #304]	; (8000488 <main+0x208>)
 8000356:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 800035a:	461d      	mov	r5, r3
 800035c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800035e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000360:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000364:	c403      	stmia	r4!, {r0, r1}
 8000366:	7022      	strb	r2, [r4, #0]
                           HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000368:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff ff2f 	bl	80001d0 <strlen>
 8000372:	4603      	mov	r3, r0
 8000374:	b29a      	uxth	r2, r3
 8000376:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800037a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800037e:	4841      	ldr	r0, [pc, #260]	; (8000484 <main+0x204>)
 8000380:	f003 f86c 	bl	800345c <HAL_UART_Transmit>
 8000384:	e025      	b.n	80003d2 <main+0x152>
                       } else {

                           // Process and print product identifier
                           char output[64];
                           snprintf(output, sizeof(output), "Output: %02X%02X \t %02X%02X \t %02X%02X\n\r", buf[0], buf[1], buf[3], buf[4], buf[6], buf[7]);
 8000386:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 800038a:	461e      	mov	r6, r3
 800038c:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8000390:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8000394:	f897 10a0 	ldrb.w	r1, [r7, #160]	; 0xa0
 8000398:	f897 00a2 	ldrb.w	r0, [r7, #162]	; 0xa2
 800039c:	4604      	mov	r4, r0
 800039e:	f897 00a3 	ldrb.w	r0, [r7, #163]	; 0xa3
 80003a2:	4605      	mov	r5, r0
 80003a4:	4638      	mov	r0, r7
 80003a6:	9504      	str	r5, [sp, #16]
 80003a8:	9403      	str	r4, [sp, #12]
 80003aa:	9102      	str	r1, [sp, #8]
 80003ac:	9201      	str	r2, [sp, #4]
 80003ae:	9300      	str	r3, [sp, #0]
 80003b0:	4633      	mov	r3, r6
 80003b2:	4a36      	ldr	r2, [pc, #216]	; (800048c <main+0x20c>)
 80003b4:	2140      	movs	r1, #64	; 0x40
 80003b6:	f003 fccb 	bl	8003d50 <sniprintf>
                           HAL_UART_Transmit(&huart1, (uint8_t*)output, strlen(output), HAL_MAX_DELAY);
 80003ba:	463b      	mov	r3, r7
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff ff07 	bl	80001d0 <strlen>
 80003c2:	4603      	mov	r3, r0
 80003c4:	b29a      	uxth	r2, r3
 80003c6:	4639      	mov	r1, r7
 80003c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003cc:	482d      	ldr	r0, [pc, #180]	; (8000484 <main+0x204>)
 80003ce:	f003 f845 	bl	800345c <HAL_UART_Transmit>
                   }
    while (1) {
        // Transmit command to read product identifier

    	// Receive product identifier data
    	                       ret = HAL_I2C_Master_Receive(&hi2c1, SENSOR_ADDRESS, buf, sizeof(buf), HAL_MAX_DELAY);
 80003d2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80003d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003da:	9300      	str	r3, [sp, #0]
 80003dc:	2309      	movs	r3, #9
 80003de:	214a      	movs	r1, #74	; 0x4a
 80003e0:	4826      	ldr	r0, [pc, #152]	; (800047c <main+0x1fc>)
 80003e2:	f000 ffab 	bl	800133c <HAL_I2C_Master_Receive>
 80003e6:	4603      	mov	r3, r0
 80003e8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    	                       if (ret != HAL_OK) {
 80003ec:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d018      	beq.n	8000426 <main+0x1a6>
    	                           char msg[] = "Failed to receive I2C!\n\r";
 80003f4:	4b24      	ldr	r3, [pc, #144]	; (8000488 <main+0x208>)
 80003f6:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80003fa:	461d      	mov	r5, r3
 80003fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000400:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000404:	c403      	stmia	r4!, {r0, r1}
 8000406:	7022      	strb	r2, [r4, #0]
    	                           HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000408:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff fedf 	bl	80001d0 <strlen>
 8000412:	4603      	mov	r3, r0
 8000414:	b29a      	uxth	r2, r3
 8000416:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800041a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800041e:	4819      	ldr	r0, [pc, #100]	; (8000484 <main+0x204>)
 8000420:	f003 f81c 	bl	800345c <HAL_UART_Transmit>
 8000424:	e025      	b.n	8000472 <main+0x1f2>
    	                       } else {

    	                           // Process and print product identifier
    	                           char output[64];
    	                           snprintf(output, sizeof(output), "Output: %02X%02X \t %02X%02X \t %02X%02X\n\r", buf[0], buf[1], buf[3], buf[4],buf[6], buf[7]);
 8000426:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 800042a:	461e      	mov	r6, r3
 800042c:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8000430:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8000434:	f897 10a0 	ldrb.w	r1, [r7, #160]	; 0xa0
 8000438:	f897 00a2 	ldrb.w	r0, [r7, #162]	; 0xa2
 800043c:	4604      	mov	r4, r0
 800043e:	f897 00a3 	ldrb.w	r0, [r7, #163]	; 0xa3
 8000442:	4605      	mov	r5, r0
 8000444:	4638      	mov	r0, r7
 8000446:	9504      	str	r5, [sp, #16]
 8000448:	9403      	str	r4, [sp, #12]
 800044a:	9102      	str	r1, [sp, #8]
 800044c:	9201      	str	r2, [sp, #4]
 800044e:	9300      	str	r3, [sp, #0]
 8000450:	4633      	mov	r3, r6
 8000452:	4a0e      	ldr	r2, [pc, #56]	; (800048c <main+0x20c>)
 8000454:	2140      	movs	r1, #64	; 0x40
 8000456:	f003 fc7b 	bl	8003d50 <sniprintf>
    	                           HAL_UART_Transmit(&huart1, (uint8_t*)output, strlen(output), HAL_MAX_DELAY);
 800045a:	463b      	mov	r3, r7
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff feb7 	bl	80001d0 <strlen>
 8000462:	4603      	mov	r3, r0
 8000464:	b29a      	uxth	r2, r3
 8000466:	4639      	mov	r1, r7
 8000468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800046c:	4805      	ldr	r0, [pc, #20]	; (8000484 <main+0x204>)
 800046e:	f002 fff5 	bl	800345c <HAL_UART_Transmit>
    	                       }
        // Delay between attempts
        HAL_Delay(100); // 1 second delay
 8000472:	2064      	movs	r0, #100	; 0x64
 8000474:	f000 fb12 	bl	8000a9c <HAL_Delay>
    	                       ret = HAL_I2C_Master_Receive(&hi2c1, SENSOR_ADDRESS, buf, sizeof(buf), HAL_MAX_DELAY);
 8000478:	e7ab      	b.n	80003d2 <main+0x152>
 800047a:	bf00      	nop
 800047c:	20000078 	.word	0x20000078
 8000480:	08004704 	.word	0x08004704
 8000484:	200000cc 	.word	0x200000cc
 8000488:	08004720 	.word	0x08004720
 800048c:	080046d8 	.word	0x080046d8

08000490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b09e      	sub	sp, #120	; 0x78
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800049a:	2228      	movs	r2, #40	; 0x28
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f003 fc8a 	bl	8003db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004b4:	463b      	mov	r3, r7
 80004b6:	223c      	movs	r2, #60	; 0x3c
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f003 fc7c 	bl	8003db8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80004c0:	2303      	movs	r3, #3
 80004c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80004c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ce:	2301      	movs	r3, #1
 80004d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004d2:	2310      	movs	r3, #16
 80004d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004d6:	2302      	movs	r3, #2
 80004d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004de:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004e4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004ea:	4618      	mov	r0, r3
 80004ec:	f001 fb5a 	bl	8001ba4 <HAL_RCC_OscConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004f6:	f000 f91d 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fa:	230f      	movs	r3, #15
 80004fc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fe:	2302      	movs	r3, #2
 8000500:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800050a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050c:	2300      	movs	r3, #0
 800050e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000510:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000514:	2101      	movs	r1, #1
 8000516:	4618      	mov	r0, r3
 8000518:	f002 fb82 	bl	8002c20 <HAL_RCC_ClockConfig>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000522:	f000 f907 	bl	8000734 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <SystemClock_Config+0xc4>)
 8000528:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800052a:	2300      	movs	r3, #0
 800052c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800052e:	2300      	movs	r3, #0
 8000530:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000532:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000536:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000538:	463b      	mov	r3, r7
 800053a:	4618      	mov	r0, r3
 800053c:	f002 fd90 	bl	8003060 <HAL_RCCEx_PeriphCLKConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000546:	f000 f8f5 	bl	8000734 <Error_Handler>
  }
}
 800054a:	bf00      	nop
 800054c:	3778      	adds	r7, #120	; 0x78
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	00020021 	.word	0x00020021

08000558 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800055c:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <MX_I2C1_Init+0x74>)
 800055e:	4a1c      	ldr	r2, [pc, #112]	; (80005d0 <MX_I2C1_Init+0x78>)
 8000560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000562:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <MX_I2C1_Init+0x74>)
 8000564:	4a1b      	ldr	r2, [pc, #108]	; (80005d4 <MX_I2C1_Init+0x7c>)
 8000566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000568:	4b18      	ldr	r3, [pc, #96]	; (80005cc <MX_I2C1_Init+0x74>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_I2C1_Init+0x74>)
 8000570:	2201      	movs	r2, #1
 8000572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_I2C1_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_I2C1_Init+0x74>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_I2C1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_I2C1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_I2C1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000592:	480e      	ldr	r0, [pc, #56]	; (80005cc <MX_I2C1_Init+0x74>)
 8000594:	f000 fd1e 	bl	8000fd4 <HAL_I2C_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800059e:	f000 f8c9 	bl	8000734 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005a2:	2100      	movs	r1, #0
 80005a4:	4809      	ldr	r0, [pc, #36]	; (80005cc <MX_I2C1_Init+0x74>)
 80005a6:	f001 fa65 	bl	8001a74 <HAL_I2CEx_ConfigAnalogFilter>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005b0:	f000 f8c0 	bl	8000734 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005b4:	2100      	movs	r1, #0
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_I2C1_Init+0x74>)
 80005b8:	f001 faa7 	bl	8001b0a <HAL_I2CEx_ConfigDigitalFilter>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005c2:	f000 f8b7 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000078 	.word	0x20000078
 80005d0:	40005400 	.word	0x40005400
 80005d4:	2000090e 	.word	0x2000090e

080005d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_USART1_UART_Init+0x58>)
 80005de:	4a15      	ldr	r2, [pc, #84]	; (8000634 <MX_USART1_UART_Init+0x5c>)
 80005e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005e2:	4b13      	ldr	r3, [pc, #76]	; (8000630 <MX_USART1_UART_Init+0x58>)
 80005e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_USART1_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_USART1_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_USART1_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_USART1_UART_Init+0x58>)
 80005fe:	220c      	movs	r2, #12
 8000600:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <MX_USART1_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_USART1_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <MX_USART1_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_USART1_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_USART1_UART_Init+0x58>)
 800061c:	f002 fed0 	bl	80033c0 <HAL_UART_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000626:	f000 f885 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200000cc 	.word	0x200000cc
 8000634:	40013800 	.word	0x40013800

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800064e:	4b37      	ldr	r3, [pc, #220]	; (800072c <MX_GPIO_Init+0xf4>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a36      	ldr	r2, [pc, #216]	; (800072c <MX_GPIO_Init+0xf4>)
 8000654:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b34      	ldr	r3, [pc, #208]	; (800072c <MX_GPIO_Init+0xf4>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000662:	613b      	str	r3, [r7, #16]
 8000664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	4b31      	ldr	r3, [pc, #196]	; (800072c <MX_GPIO_Init+0xf4>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a30      	ldr	r2, [pc, #192]	; (800072c <MX_GPIO_Init+0xf4>)
 800066c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b2e      	ldr	r3, [pc, #184]	; (800072c <MX_GPIO_Init+0xf4>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800067e:	4b2b      	ldr	r3, [pc, #172]	; (800072c <MX_GPIO_Init+0xf4>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	4a2a      	ldr	r2, [pc, #168]	; (800072c <MX_GPIO_Init+0xf4>)
 8000684:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000688:	6153      	str	r3, [r2, #20]
 800068a:	4b28      	ldr	r3, [pc, #160]	; (800072c <MX_GPIO_Init+0xf4>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b25      	ldr	r3, [pc, #148]	; (800072c <MX_GPIO_Init+0xf4>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a24      	ldr	r2, [pc, #144]	; (800072c <MX_GPIO_Init+0xf4>)
 800069c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a0:	6153      	str	r3, [r2, #20]
 80006a2:	4b22      	ldr	r3, [pc, #136]	; (800072c <MX_GPIO_Init+0xf4>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4b1f      	ldr	r3, [pc, #124]	; (800072c <MX_GPIO_Init+0xf4>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a1e      	ldr	r2, [pc, #120]	; (800072c <MX_GPIO_Init+0xf4>)
 80006b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_GPIO_Init+0xf4>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006c6:	2200      	movs	r2, #0
 80006c8:	f64f 7108 	movw	r1, #65288	; 0xff08
 80006cc:	4818      	ldr	r0, [pc, #96]	; (8000730 <MX_GPIO_Init+0xf8>)
 80006ce:	f000 fc69 	bl	8000fa4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80006d2:	2337      	movs	r3, #55	; 0x37
 80006d4:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006d6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	4812      	ldr	r0, [pc, #72]	; (8000730 <MX_GPIO_Init+0xf8>)
 80006e8:	f000 fae2 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80006ec:	f64f 7308 	movw	r3, #65288	; 0xff08
 80006f0:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	480a      	ldr	r0, [pc, #40]	; (8000730 <MX_GPIO_Init+0xf8>)
 8000706:	f000 fad3 	bl	8000cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800070a:	2301      	movs	r3, #1
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000720:	f000 fac6 	bl	8000cb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	; 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000
 8000730:	48001000 	.word	0x48001000

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	e7fe      	b.n	800073c <Error_Handler+0x8>
	...

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <HAL_MspInit+0x44>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <HAL_MspInit+0x44>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6193      	str	r3, [r2, #24]
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <HAL_MspInit+0x44>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_MspInit+0x44>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <HAL_MspInit+0x44>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000768:	61d3      	str	r3, [r2, #28]
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_MspInit+0x44>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000776:	2007      	movs	r0, #7
 8000778:	f000 fa66 	bl	8000c48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000

08000788 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a17      	ldr	r2, [pc, #92]	; (8000804 <HAL_I2C_MspInit+0x7c>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d127      	bne.n	80007fa <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <HAL_I2C_MspInit+0x80>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	4a16      	ldr	r2, [pc, #88]	; (8000808 <HAL_I2C_MspInit+0x80>)
 80007b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007b4:	6153      	str	r3, [r2, #20]
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <HAL_I2C_MspInit+0x80>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80007c2:	23c0      	movs	r3, #192	; 0xc0
 80007c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c6:	2312      	movs	r3, #18
 80007c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007d2:	2304      	movs	r3, #4
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <HAL_I2C_MspInit+0x84>)
 80007de:	f000 fa67 	bl	8000cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_I2C_MspInit+0x80>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <HAL_I2C_MspInit+0x80>)
 80007e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007ec:	61d3      	str	r3, [r2, #28]
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_I2C_MspInit+0x80>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007fa:	bf00      	nop
 80007fc:	3728      	adds	r7, #40	; 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40005400 	.word	0x40005400
 8000808:	40021000 	.word	0x40021000
 800080c:	48000400 	.word	0x48000400

08000810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a17      	ldr	r2, [pc, #92]	; (800088c <HAL_UART_MspInit+0x7c>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d127      	bne.n	8000882 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <HAL_UART_MspInit+0x80>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	4a16      	ldr	r2, [pc, #88]	; (8000890 <HAL_UART_MspInit+0x80>)
 8000838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083c:	6193      	str	r3, [r2, #24]
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <HAL_UART_MspInit+0x80>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_UART_MspInit+0x80>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	4a10      	ldr	r2, [pc, #64]	; (8000890 <HAL_UART_MspInit+0x80>)
 8000850:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000854:	6153      	str	r3, [r2, #20]
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <HAL_UART_MspInit+0x80>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000862:	2330      	movs	r3, #48	; 0x30
 8000864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000872:	2307      	movs	r3, #7
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <HAL_UART_MspInit+0x84>)
 800087e:	f000 fa17 	bl	8000cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40013800 	.word	0x40013800
 8000890:	40021000 	.word	0x40021000
 8000894:	48000800 	.word	0x48000800

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800089c:	e7fe      	b.n	800089c <NMI_Handler+0x4>

0800089e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <HardFault_Handler+0x4>

080008a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MemManage_Handler+0x4>

080008aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e4:	f000 f8ba 	bl	8000a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f4:	4a14      	ldr	r2, [pc, #80]	; (8000948 <_sbrk+0x5c>)
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <_sbrk+0x60>)
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <_sbrk+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d102      	bne.n	800090e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <_sbrk+0x64>)
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <_sbrk+0x68>)
 800090c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	429a      	cmp	r2, r3
 800091a:	d207      	bcs.n	800092c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800091c:	f003 fa54 	bl	8003dc8 <__errno>
 8000920:	4603      	mov	r3, r0
 8000922:	220c      	movs	r2, #12
 8000924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800092a:	e009      	b.n	8000940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000932:	4b07      	ldr	r3, [pc, #28]	; (8000950 <_sbrk+0x64>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <_sbrk+0x64>)
 800093c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800093e:	68fb      	ldr	r3, [r7, #12]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000a000 	.word	0x2000a000
 800094c:	00000400 	.word	0x00000400
 8000950:	20000154 	.word	0x20000154
 8000954:	200002a8 	.word	0x200002a8

08000958 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <SystemInit+0x20>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <SystemInit+0x20>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000980:	f7ff ffea 	bl	8000958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	; (80009bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <LoopForever+0xe>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	; (80009c8 <LoopForever+0x16>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009aa:	f003 fa13 	bl	8003dd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ae:	f7ff fc67 	bl	8000280 <main>

080009b2 <LoopForever>:

LoopForever:
    b LoopForever
 80009b2:	e7fe      	b.n	80009b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009b4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009c0:	080047b0 	.word	0x080047b0
  ldr r2, =_sbss
 80009c4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009c8:	200002a4 	.word	0x200002a4

080009cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC1_2_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_Init+0x28>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_Init+0x28>)
 80009da:	f043 0310 	orr.w	r3, r3, #16
 80009de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 f931 	bl	8000c48 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 f808 	bl	80009fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ec:	f7ff fea8 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40022000 	.word	0x40022000

080009fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x54>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_InitTick+0x58>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f93b 	bl	8000c96 <HAL_SYSTICK_Config>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00e      	b.n	8000a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d80a      	bhi.n	8000a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a38:	f000 f911 	bl	8000c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <HAL_InitTick+0x5c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000004 	.word	0x20000004

08000a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x20>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_IncTick+0x24>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_IncTick+0x24>)
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000158 	.word	0x20000158

08000a84 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <HAL_GetTick+0x14>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000158 	.word	0x20000158

08000a9c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa4:	f7ff ffee 	bl	8000a84 <HAL_GetTick>
 8000aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ab4:	d005      	beq.n	8000ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <HAL_Delay+0x44>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4413      	add	r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ac2:	bf00      	nop
 8000ac4:	f7ff ffde 	bl	8000a84 <HAL_GetTick>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d8f7      	bhi.n	8000ac4 <HAL_Delay+0x28>
  {
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000008 	.word	0x20000008

08000ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b00:	4013      	ands	r3, r2
 8000b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b16:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	60d3      	str	r3, [r2, #12]
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <__NVIC_GetPriorityGrouping+0x18>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	f003 0307 	and.w	r3, r3, #7
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	6039      	str	r1, [r7, #0]
 8000b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	db0a      	blt.n	8000b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	490c      	ldr	r1, [pc, #48]	; (8000b94 <__NVIC_SetPriority+0x4c>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	0112      	lsls	r2, r2, #4
 8000b68:	b2d2      	uxtb	r2, r2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b70:	e00a      	b.n	8000b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4908      	ldr	r1, [pc, #32]	; (8000b98 <__NVIC_SetPriority+0x50>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	3b04      	subs	r3, #4
 8000b80:	0112      	lsls	r2, r2, #4
 8000b82:	b2d2      	uxtb	r2, r2
 8000b84:	440b      	add	r3, r1
 8000b86:	761a      	strb	r2, [r3, #24]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	f1c3 0307 	rsb	r3, r3, #7
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	bf28      	it	cs
 8000bba:	2304      	movcs	r3, #4
 8000bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	d902      	bls.n	8000bcc <NVIC_EncodePriority+0x30>
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3b03      	subs	r3, #3
 8000bca:	e000      	b.n	8000bce <NVIC_EncodePriority+0x32>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	401a      	ands	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa01 f303 	lsl.w	r3, r1, r3
 8000bee:	43d9      	mvns	r1, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	4313      	orrs	r3, r2
         );
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3724      	adds	r7, #36	; 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c14:	d301      	bcc.n	8000c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00f      	b.n	8000c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <SysTick_Config+0x40>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c22:	210f      	movs	r1, #15
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c28:	f7ff ff8e 	bl	8000b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <SysTick_Config+0x40>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <SysTick_Config+0x40>)
 8000c34:	2207      	movs	r2, #7
 8000c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	e000e010 	.word	0xe000e010

08000c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff47 	bl	8000ae4 <__NVIC_SetPriorityGrouping>
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c70:	f7ff ff5c 	bl	8000b2c <__NVIC_GetPriorityGrouping>
 8000c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	6978      	ldr	r0, [r7, #20]
 8000c7c:	f7ff ff8e 	bl	8000b9c <NVIC_EncodePriority>
 8000c80:	4602      	mov	r2, r0
 8000c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c86:	4611      	mov	r1, r2
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff5d 	bl	8000b48 <__NVIC_SetPriority>
}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff ffb0 	bl	8000c04 <SysTick_Config>
 8000ca4:	4603      	mov	r3, r0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b087      	sub	sp, #28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cbe:	e154      	b.n	8000f6a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 8146 	beq.w	8000f64 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0303 	and.w	r3, r3, #3
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d005      	beq.n	8000cf0 <HAL_GPIO_Init+0x40>
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d130      	bne.n	8000d52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d26:	2201      	movs	r2, #1
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	091b      	lsrs	r3, r3, #4
 8000d3c:	f003 0201 	and.w	r2, r3, #1
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d017      	beq.n	8000d8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	2203      	movs	r2, #3
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d123      	bne.n	8000de2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	08da      	lsrs	r2, r3, #3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3208      	adds	r2, #8
 8000da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	220f      	movs	r2, #15
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	691a      	ldr	r2, [r3, #16]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	08da      	lsrs	r2, r3, #3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3208      	adds	r2, #8
 8000ddc:	6939      	ldr	r1, [r7, #16]
 8000dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0203 	and.w	r2, r3, #3
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 80a0 	beq.w	8000f64 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e24:	4b58      	ldr	r3, [pc, #352]	; (8000f88 <HAL_GPIO_Init+0x2d8>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a57      	ldr	r2, [pc, #348]	; (8000f88 <HAL_GPIO_Init+0x2d8>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b55      	ldr	r3, [pc, #340]	; (8000f88 <HAL_GPIO_Init+0x2d8>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e3c:	4a53      	ldr	r2, [pc, #332]	; (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	3302      	adds	r3, #2
 8000e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	220f      	movs	r2, #15
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e66:	d019      	beq.n	8000e9c <HAL_GPIO_Init+0x1ec>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a49      	ldr	r2, [pc, #292]	; (8000f90 <HAL_GPIO_Init+0x2e0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d013      	beq.n	8000e98 <HAL_GPIO_Init+0x1e8>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a48      	ldr	r2, [pc, #288]	; (8000f94 <HAL_GPIO_Init+0x2e4>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d00d      	beq.n	8000e94 <HAL_GPIO_Init+0x1e4>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a47      	ldr	r2, [pc, #284]	; (8000f98 <HAL_GPIO_Init+0x2e8>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d007      	beq.n	8000e90 <HAL_GPIO_Init+0x1e0>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a46      	ldr	r2, [pc, #280]	; (8000f9c <HAL_GPIO_Init+0x2ec>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d101      	bne.n	8000e8c <HAL_GPIO_Init+0x1dc>
 8000e88:	2304      	movs	r3, #4
 8000e8a:	e008      	b.n	8000e9e <HAL_GPIO_Init+0x1ee>
 8000e8c:	2305      	movs	r3, #5
 8000e8e:	e006      	b.n	8000e9e <HAL_GPIO_Init+0x1ee>
 8000e90:	2303      	movs	r3, #3
 8000e92:	e004      	b.n	8000e9e <HAL_GPIO_Init+0x1ee>
 8000e94:	2302      	movs	r3, #2
 8000e96:	e002      	b.n	8000e9e <HAL_GPIO_Init+0x1ee>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e000      	b.n	8000e9e <HAL_GPIO_Init+0x1ee>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	f002 0203 	and.w	r2, r2, #3
 8000ea4:	0092      	lsls	r2, r2, #2
 8000ea6:	4093      	lsls	r3, r2
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eae:	4937      	ldr	r1, [pc, #220]	; (8000f8c <HAL_GPIO_Init+0x2dc>)
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	089b      	lsrs	r3, r3, #2
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ebc:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ee0:	4a2f      	ldr	r2, [pc, #188]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f0a:	4a25      	ldr	r2, [pc, #148]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f10:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f34:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f5e:	4a10      	ldr	r2, [pc, #64]	; (8000fa0 <HAL_GPIO_Init+0x2f0>)
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3301      	adds	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	fa22 f303 	lsr.w	r3, r2, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f47f aea3 	bne.w	8000cc0 <HAL_GPIO_Init+0x10>
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	371c      	adds	r7, #28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010000 	.word	0x40010000
 8000f90:	48000400 	.word	0x48000400
 8000f94:	48000800 	.word	0x48000800
 8000f98:	48000c00 	.word	0x48000c00
 8000f9c:	48001000 	.word	0x48001000
 8000fa0:	40010400 	.word	0x40010400

08000fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	807b      	strh	r3, [r7, #2]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb4:	787b      	ldrb	r3, [r7, #1]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fc0:	e002      	b.n	8000fc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fc2:	887a      	ldrh	r2, [r7, #2]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e08d      	b.n	8001102 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d106      	bne.n	8001000 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff fbc4 	bl	8000788 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2224      	movs	r2, #36	; 0x24
 8001004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0201 	bic.w	r2, r2, #1
 8001016:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001024:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001034:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d107      	bne.n	800104e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	e006      	b.n	800105c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800105a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d108      	bne.n	8001076 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	e007      	b.n	8001086 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001084:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	6812      	ldr	r2, [r2, #0]
 8001090:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001098:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	691a      	ldr	r2, [r3, #16]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69d9      	ldr	r1, [r3, #28]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a1a      	ldr	r2, [r3, #32]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	430a      	orrs	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f042 0201 	orr.w	r2, r2, #1
 80010e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2220      	movs	r2, #32
 80010ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af02      	add	r7, sp, #8
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	461a      	mov	r2, r3
 8001118:	460b      	mov	r3, r1
 800111a:	817b      	strh	r3, [r7, #10]
 800111c:	4613      	mov	r3, r2
 800111e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b20      	cmp	r3, #32
 800112a:	f040 80fd 	bne.w	8001328 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001134:	2b01      	cmp	r3, #1
 8001136:	d101      	bne.n	800113c <HAL_I2C_Master_Transmit+0x30>
 8001138:	2302      	movs	r3, #2
 800113a:	e0f6      	b.n	800132a <HAL_I2C_Master_Transmit+0x21e>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001144:	f7ff fc9e 	bl	8000a84 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2319      	movs	r3, #25
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f000 fa0a 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e0e1      	b.n	800132a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2221      	movs	r2, #33	; 0x21
 800116a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2210      	movs	r2, #16
 8001172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2200      	movs	r2, #0
 800117a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	893a      	ldrh	r2, [r7, #8]
 8001186:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2200      	movs	r2, #0
 800118c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001192:	b29b      	uxth	r3, r3
 8001194:	2bff      	cmp	r3, #255	; 0xff
 8001196:	d906      	bls.n	80011a6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	22ff      	movs	r2, #255	; 0xff
 800119c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800119e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	e007      	b.n	80011b6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80011b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011b4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d024      	beq.n	8001208 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	781a      	ldrb	r2, [r3, #0]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d8:	b29b      	uxth	r3, r3
 80011da:	3b01      	subs	r3, #1
 80011dc:	b29a      	uxth	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e6:	3b01      	subs	r3, #1
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	3301      	adds	r3, #1
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	8979      	ldrh	r1, [r7, #10]
 80011fa:	4b4e      	ldr	r3, [pc, #312]	; (8001334 <HAL_I2C_Master_Transmit+0x228>)
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f000 fc05 	bl	8001a10 <I2C_TransferConfig>
 8001206:	e066      	b.n	80012d6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800120c:	b2da      	uxtb	r2, r3
 800120e:	8979      	ldrh	r1, [r7, #10]
 8001210:	4b48      	ldr	r3, [pc, #288]	; (8001334 <HAL_I2C_Master_Transmit+0x228>)
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f000 fbfa 	bl	8001a10 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800121c:	e05b      	b.n	80012d6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	6a39      	ldr	r1, [r7, #32]
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f000 f9fd 	bl	8001622 <I2C_WaitOnTXISFlagUntilTimeout>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e07b      	b.n	800132a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800124c:	b29b      	uxth	r3, r3
 800124e:	3b01      	subs	r3, #1
 8001250:	b29a      	uxth	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800125a:	3b01      	subs	r3, #1
 800125c:	b29a      	uxth	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001266:	b29b      	uxth	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d034      	beq.n	80012d6 <HAL_I2C_Master_Transmit+0x1ca>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001270:	2b00      	cmp	r3, #0
 8001272:	d130      	bne.n	80012d6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	2200      	movs	r2, #0
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f000 f976 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e04d      	b.n	800132a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001292:	b29b      	uxth	r3, r3
 8001294:	2bff      	cmp	r3, #255	; 0xff
 8001296:	d90e      	bls.n	80012b6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	22ff      	movs	r2, #255	; 0xff
 800129c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	8979      	ldrh	r1, [r7, #10]
 80012a6:	2300      	movs	r3, #0
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f000 fbae 	bl	8001a10 <I2C_TransferConfig>
 80012b4:	e00f      	b.n	80012d6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	8979      	ldrh	r1, [r7, #10]
 80012c8:	2300      	movs	r3, #0
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f000 fb9d 	bl	8001a10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012da:	b29b      	uxth	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d19e      	bne.n	800121e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	6a39      	ldr	r1, [r7, #32]
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f000 f9e3 	bl	80016b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e01a      	b.n	800132a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2220      	movs	r2, #32
 80012fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6859      	ldr	r1, [r3, #4]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <HAL_I2C_Master_Transmit+0x22c>)
 8001308:	400b      	ands	r3, r1
 800130a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2220      	movs	r2, #32
 8001310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	e000      	b.n	800132a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001328:	2302      	movs	r3, #2
  }
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	80002000 	.word	0x80002000
 8001338:	fe00e800 	.word	0xfe00e800

0800133c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af02      	add	r7, sp, #8
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	461a      	mov	r2, r3
 8001348:	460b      	mov	r3, r1
 800134a:	817b      	strh	r3, [r7, #10]
 800134c:	4613      	mov	r3, r2
 800134e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b20      	cmp	r3, #32
 800135a:	f040 80db 	bne.w	8001514 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <HAL_I2C_Master_Receive+0x30>
 8001368:	2302      	movs	r3, #2
 800136a:	e0d4      	b.n	8001516 <HAL_I2C_Master_Receive+0x1da>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001374:	f7ff fb86 	bl	8000a84 <HAL_GetTick>
 8001378:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2319      	movs	r3, #25
 8001380:	2201      	movs	r2, #1
 8001382:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	f000 f8f2 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e0bf      	b.n	8001516 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2222      	movs	r2, #34	; 0x22
 800139a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2210      	movs	r2, #16
 80013a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2200      	movs	r2, #0
 80013aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	893a      	ldrh	r2, [r7, #8]
 80013b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2200      	movs	r2, #0
 80013bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	2bff      	cmp	r3, #255	; 0xff
 80013c6:	d90e      	bls.n	80013e6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2201      	movs	r2, #1
 80013cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	8979      	ldrh	r1, [r7, #10]
 80013d6:	4b52      	ldr	r3, [pc, #328]	; (8001520 <HAL_I2C_Master_Receive+0x1e4>)
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f000 fb16 	bl	8001a10 <I2C_TransferConfig>
 80013e4:	e06d      	b.n	80014c2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	8979      	ldrh	r1, [r7, #10]
 80013f8:	4b49      	ldr	r3, [pc, #292]	; (8001520 <HAL_I2C_Master_Receive+0x1e4>)
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f000 fb05 	bl	8001a10 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001406:	e05c      	b.n	80014c2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	6a39      	ldr	r1, [r7, #32]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f000 f993 	bl	8001738 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e07c      	b.n	8001516 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001438:	3b01      	subs	r3, #1
 800143a:	b29a      	uxth	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001444:	b29b      	uxth	r3, r3
 8001446:	3b01      	subs	r3, #1
 8001448:	b29a      	uxth	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001452:	b29b      	uxth	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	d034      	beq.n	80014c2 <HAL_I2C_Master_Receive+0x186>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800145c:	2b00      	cmp	r3, #0
 800145e:	d130      	bne.n	80014c2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	2200      	movs	r2, #0
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f000 f880 	bl	8001570 <I2C_WaitOnFlagUntilTimeout>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e04d      	b.n	8001516 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800147e:	b29b      	uxth	r3, r3
 8001480:	2bff      	cmp	r3, #255	; 0xff
 8001482:	d90e      	bls.n	80014a2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	22ff      	movs	r2, #255	; 0xff
 8001488:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800148e:	b2da      	uxtb	r2, r3
 8001490:	8979      	ldrh	r1, [r7, #10]
 8001492:	2300      	movs	r3, #0
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 fab8 	bl	8001a10 <I2C_TransferConfig>
 80014a0:	e00f      	b.n	80014c2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	8979      	ldrh	r1, [r7, #10]
 80014b4:	2300      	movs	r3, #0
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f000 faa7 	bl	8001a10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d19d      	bne.n	8001408 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	6a39      	ldr	r1, [r7, #32]
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 f8ed 	bl	80016b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e01a      	b.n	8001516 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2220      	movs	r2, #32
 80014e6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6859      	ldr	r1, [r3, #4]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <HAL_I2C_Master_Receive+0x1e8>)
 80014f4:	400b      	ands	r3, r1
 80014f6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2220      	movs	r2, #32
 80014fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	e000      	b.n	8001516 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001514:	2302      	movs	r3, #2
  }
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	80002400 	.word	0x80002400
 8001524:	fe00e800 	.word	0xfe00e800

08001528 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b02      	cmp	r3, #2
 800153c:	d103      	bne.n	8001546 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2200      	movs	r2, #0
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b01      	cmp	r3, #1
 8001552:	d007      	beq.n	8001564 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	699a      	ldr	r2, [r3, #24]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0201 	orr.w	r2, r2, #1
 8001562:	619a      	str	r2, [r3, #24]
  }
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	4613      	mov	r3, r2
 800157e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001580:	e03b      	b.n	80015fa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	6839      	ldr	r1, [r7, #0]
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f962 	bl	8001850 <I2C_IsErrorOccurred>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e041      	b.n	800161a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800159c:	d02d      	beq.n	80015fa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800159e:	f7ff fa71 	bl	8000a84 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d302      	bcc.n	80015b4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d122      	bne.n	80015fa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	699a      	ldr	r2, [r3, #24]
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	4013      	ands	r3, r2
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	bf0c      	ite	eq
 80015c4:	2301      	moveq	r3, #1
 80015c6:	2300      	movne	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d113      	bne.n	80015fa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f043 0220 	orr.w	r2, r3, #32
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2220      	movs	r2, #32
 80015e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00f      	b.n	800161a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	699a      	ldr	r2, [r3, #24]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4013      	ands	r3, r2
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	429a      	cmp	r2, r3
 8001608:	bf0c      	ite	eq
 800160a:	2301      	moveq	r3, #1
 800160c:	2300      	movne	r3, #0
 800160e:	b2db      	uxtb	r3, r3
 8001610:	461a      	mov	r2, r3
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	429a      	cmp	r2, r3
 8001616:	d0b4      	beq.n	8001582 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b084      	sub	sp, #16
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800162e:	e033      	b.n	8001698 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	68b9      	ldr	r1, [r7, #8]
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 f90b 	bl	8001850 <I2C_IsErrorOccurred>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e031      	b.n	80016a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800164a:	d025      	beq.n	8001698 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800164c:	f7ff fa1a 	bl	8000a84 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	429a      	cmp	r2, r3
 800165a:	d302      	bcc.n	8001662 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d11a      	bne.n	8001698 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b02      	cmp	r3, #2
 800166e:	d013      	beq.n	8001698 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	f043 0220 	orr.w	r2, r3, #32
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2220      	movs	r2, #32
 8001680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e007      	b.n	80016a8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d1c4      	bne.n	8001630 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016bc:	e02f      	b.n	800171e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f000 f8c4 	bl	8001850 <I2C_IsErrorOccurred>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e02d      	b.n	800172e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016d2:	f7ff f9d7 	bl	8000a84 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d302      	bcc.n	80016e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d11a      	bne.n	800171e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	f003 0320 	and.w	r3, r3, #32
 80016f2:	2b20      	cmp	r3, #32
 80016f4:	d013      	beq.n	800171e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f043 0220 	orr.w	r2, r3, #32
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2220      	movs	r2, #32
 8001706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e007      	b.n	800172e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0320 	and.w	r3, r3, #32
 8001728:	2b20      	cmp	r3, #32
 800172a:	d1c8      	bne.n	80016be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001748:	e071      	b.n	800182e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 f87e 	bl	8001850 <I2C_IsErrorOccurred>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0320 	and.w	r3, r3, #32
 8001768:	2b20      	cmp	r3, #32
 800176a:	d13b      	bne.n	80017e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d138      	bne.n	80017e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b04      	cmp	r3, #4
 800177e:	d105      	bne.n	800178c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	2b10      	cmp	r3, #16
 8001798:	d121      	bne.n	80017de <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2210      	movs	r2, #16
 80017a0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2204      	movs	r2, #4
 80017a6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2220      	movs	r2, #32
 80017ae:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6859      	ldr	r1, [r3, #4]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4b24      	ldr	r3, [pc, #144]	; (800184c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80017bc:	400b      	ands	r3, r1
 80017be:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2220      	movs	r2, #32
 80017c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	75fb      	strb	r3, [r7, #23]
 80017dc:	e002      	b.n	80017e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80017e4:	f7ff f94e 	bl	8000a84 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d302      	bcc.n	80017fa <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d119      	bne.n	800182e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d116      	bne.n	800182e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	2b04      	cmp	r3, #4
 800180c:	d00f      	beq.n	800182e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	f043 0220 	orr.w	r2, r3, #32
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2220      	movs	r2, #32
 800181e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b04      	cmp	r3, #4
 800183a:	d002      	beq.n	8001842 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800183c:	7dfb      	ldrb	r3, [r7, #23]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d083      	beq.n	800174a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001842:	7dfb      	ldrb	r3, [r7, #23]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	fe00e800 	.word	0xfe00e800

08001850 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	2b00      	cmp	r3, #0
 800187a:	d068      	beq.n	800194e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2210      	movs	r2, #16
 8001882:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001884:	e049      	b.n	800191a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800188c:	d045      	beq.n	800191a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800188e:	f7ff f8f9 	bl	8000a84 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	429a      	cmp	r2, r3
 800189c:	d302      	bcc.n	80018a4 <I2C_IsErrorOccurred+0x54>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d13a      	bne.n	800191a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80018b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018c6:	d121      	bne.n	800190c <I2C_IsErrorOccurred+0xbc>
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018ce:	d01d      	beq.n	800190c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80018d0:	7cfb      	ldrb	r3, [r7, #19]
 80018d2:	2b20      	cmp	r3, #32
 80018d4:	d01a      	beq.n	800190c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80018e6:	f7ff f8cd 	bl	8000a84 <HAL_GetTick>
 80018ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018ec:	e00e      	b.n	800190c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80018ee:	f7ff f8c9 	bl	8000a84 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b19      	cmp	r3, #25
 80018fa:	d907      	bls.n	800190c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	f043 0320 	orr.w	r3, r3, #32
 8001902:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800190a:	e006      	b.n	800191a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f003 0320 	and.w	r3, r3, #32
 8001916:	2b20      	cmp	r3, #32
 8001918:	d1e9      	bne.n	80018ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f003 0320 	and.w	r3, r3, #32
 8001924:	2b20      	cmp	r3, #32
 8001926:	d003      	beq.n	8001930 <I2C_IsErrorOccurred+0xe0>
 8001928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0aa      	beq.n	8001886 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001934:	2b00      	cmp	r3, #0
 8001936:	d103      	bne.n	8001940 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2220      	movs	r2, #32
 800193e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	f043 0304 	orr.w	r3, r3, #4
 8001946:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00b      	beq.n	8001978 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001970:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00b      	beq.n	800199a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	f043 0308 	orr.w	r3, r3, #8
 8001988:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001992:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00b      	beq.n	80019bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	f043 0302 	orr.w	r3, r3, #2
 80019aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80019bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01c      	beq.n	80019fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f7ff fdaf 	bl	8001528 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6859      	ldr	r1, [r3, #4]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <I2C_IsErrorOccurred+0x1bc>)
 80019d6:	400b      	ands	r3, r1
 80019d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	431a      	orrs	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2220      	movs	r2, #32
 80019ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80019fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3728      	adds	r7, #40	; 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	fe00e800 	.word	0xfe00e800

08001a10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	817b      	strh	r3, [r7, #10]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a22:	897b      	ldrh	r3, [r7, #10]
 8001a24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a28:	7a7b      	ldrb	r3, [r7, #9]
 8001a2a:	041b      	lsls	r3, r3, #16
 8001a2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	0d5b      	lsrs	r3, r3, #21
 8001a4a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <I2C_TransferConfig+0x60>)
 8001a50:	430b      	orrs	r3, r1
 8001a52:	43db      	mvns	r3, r3
 8001a54:	ea02 0103 	and.w	r1, r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a62:	bf00      	nop
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	03ff63ff 	.word	0x03ff63ff

08001a74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b20      	cmp	r3, #32
 8001a88:	d138      	bne.n	8001afc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e032      	b.n	8001afe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2224      	movs	r2, #36	; 0x24
 8001aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ac6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6819      	ldr	r1, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0201 	orr.w	r2, r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	e000      	b.n	8001afe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001afc:	2302      	movs	r3, #2
  }
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b20      	cmp	r3, #32
 8001b1e:	d139      	bne.n	8001b94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d101      	bne.n	8001b2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e033      	b.n	8001b96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2224      	movs	r2, #36	; 0x24
 8001b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0201 	bic.w	r2, r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	e000      	b.n	8001b96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b94:	2302      	movs	r3, #2
  }
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bb4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f001 b823 	b.w	8002c10 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 817d 	beq.w	8001eda <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001be0:	4bbc      	ldr	r3, [pc, #752]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d00c      	beq.n	8001c06 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bec:	4bb9      	ldr	r3, [pc, #740]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d15c      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x10e>
 8001bf8:	4bb6      	ldr	r3, [pc, #728]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c04:	d155      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x10e>
 8001c06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c0a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1e:	fab3 f383 	clz	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	095b      	lsrs	r3, r3, #5
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d102      	bne.n	8001c38 <HAL_RCC_OscConfig+0x94>
 8001c32:	4ba8      	ldr	r3, [pc, #672]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	e015      	b.n	8001c64 <HAL_RCC_OscConfig+0xc0>
 8001c38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c3c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c50:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c54:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001c60:	4b9c      	ldr	r3, [pc, #624]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c68:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001c6c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c70:	fa92 f2a2 	rbit	r2, r2
 8001c74:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001c78:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001c7c:	fab2 f282 	clz	r2, r2
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	f042 0220 	orr.w	r2, r2, #32
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	f002 021f 	and.w	r2, r2, #31
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 811f 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x334>
 8001c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f040 8116 	bne.w	8001ed8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	f000 bfaf 	b.w	8002c10 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc2:	d106      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x12e>
 8001cc4:	4b83      	ldr	r3, [pc, #524]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a82      	ldr	r2, [pc, #520]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	e036      	b.n	8001d40 <HAL_RCC_OscConfig+0x19c>
 8001cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x158>
 8001ce2:	4b7c      	ldr	r3, [pc, #496]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a7b      	ldr	r2, [pc, #492]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b79      	ldr	r3, [pc, #484]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a78      	ldr	r2, [pc, #480]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e021      	b.n	8001d40 <HAL_RCC_OscConfig+0x19c>
 8001cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x184>
 8001d0e:	4b71      	ldr	r3, [pc, #452]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a70      	ldr	r2, [pc, #448]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	4b6e      	ldr	r3, [pc, #440]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a6d      	ldr	r2, [pc, #436]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e00b      	b.n	8001d40 <HAL_RCC_OscConfig+0x19c>
 8001d28:	4b6a      	ldr	r3, [pc, #424]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a69      	ldr	r2, [pc, #420]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4b67      	ldr	r3, [pc, #412]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a66      	ldr	r2, [pc, #408]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d3e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d40:	4b64      	ldr	r3, [pc, #400]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	f023 020f 	bic.w	r2, r3, #15
 8001d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	495f      	ldr	r1, [pc, #380]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d059      	beq.n	8001e1e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6a:	f7fe fe8b 	bl	8000a84 <HAL_GetTick>
 8001d6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d74:	f7fe fe86 	bl	8000a84 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b64      	cmp	r3, #100	; 0x64
 8001d82:	d902      	bls.n	8001d8a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	f000 bf43 	b.w	8002c10 <HAL_RCC_OscConfig+0x106c>
 8001d8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d8e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001d9e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	095b      	lsrs	r3, r3, #5
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d102      	bne.n	8001dbc <HAL_RCC_OscConfig+0x218>
 8001db6:	4b47      	ldr	r3, [pc, #284]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	e015      	b.n	8001de8 <HAL_RCC_OscConfig+0x244>
 8001dbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dc0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001dd8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001de4:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dec:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001df0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001df4:	fa92 f2a2 	rbit	r2, r2
 8001df8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001dfc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001e00:	fab2 f282 	clz	r2, r2
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	f042 0220 	orr.w	r2, r2, #32
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	f002 021f 	and.w	r2, r2, #31
 8001e10:	2101      	movs	r1, #1
 8001e12:	fa01 f202 	lsl.w	r2, r1, r2
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0ab      	beq.n	8001d74 <HAL_RCC_OscConfig+0x1d0>
 8001e1c:	e05d      	b.n	8001eda <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7fe fe31 	bl	8000a84 <HAL_GetTick>
 8001e22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e26:	e00a      	b.n	8001e3e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e28:	f7fe fe2c 	bl	8000a84 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b64      	cmp	r3, #100	; 0x64
 8001e36:	d902      	bls.n	8001e3e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	f000 bee9 	b.w	8002c10 <HAL_RCC_OscConfig+0x106c>
 8001e3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e42:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001e52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	095b      	lsrs	r3, r3, #5
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d102      	bne.n	8001e70 <HAL_RCC_OscConfig+0x2cc>
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	e015      	b.n	8001e9c <HAL_RCC_OscConfig+0x2f8>
 8001e70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e74:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e88:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e8c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001e98:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_RCC_OscConfig+0x330>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ea0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001ea4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ea8:	fa92 f2a2 	rbit	r2, r2
 8001eac:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001eb0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001eb4:	fab2 f282 	clz	r2, r2
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	f042 0220 	orr.w	r2, r2, #32
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	f002 021f 	and.w	r2, r2, #31
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1ab      	bne.n	8001e28 <HAL_RCC_OscConfig+0x284>
 8001ed0:	e003      	b.n	8001eda <HAL_RCC_OscConfig+0x336>
 8001ed2:	bf00      	nop
 8001ed4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ede:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 817d 	beq.w	80021ea <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ef0:	4ba6      	ldr	r3, [pc, #664]	; (800218c <HAL_RCC_OscConfig+0x5e8>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00b      	beq.n	8001f14 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001efc:	4ba3      	ldr	r3, [pc, #652]	; (800218c <HAL_RCC_OscConfig+0x5e8>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d172      	bne.n	8001fee <HAL_RCC_OscConfig+0x44a>
 8001f08:	4ba0      	ldr	r3, [pc, #640]	; (800218c <HAL_RCC_OscConfig+0x5e8>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d16c      	bne.n	8001fee <HAL_RCC_OscConfig+0x44a>
 8001f14:	2302      	movs	r3, #2
 8001f16:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001f26:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	095b      	lsrs	r3, r3, #5
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d102      	bne.n	8001f44 <HAL_RCC_OscConfig+0x3a0>
 8001f3e:	4b93      	ldr	r3, [pc, #588]	; (800218c <HAL_RCC_OscConfig+0x5e8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	e013      	b.n	8001f6c <HAL_RCC_OscConfig+0x3c8>
 8001f44:	2302      	movs	r3, #2
 8001f46:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001f56:	2302      	movs	r3, #2
 8001f58:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001f68:	4b88      	ldr	r3, [pc, #544]	; (800218c <HAL_RCC_OscConfig+0x5e8>)
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001f72:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f76:	fa92 f2a2 	rbit	r2, r2
 8001f7a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001f7e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001f82:	fab2 f282 	clz	r2, r2
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	f042 0220 	orr.w	r2, r2, #32
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	f002 021f 	and.w	r2, r2, #31
 8001f92:	2101      	movs	r1, #1
 8001f94:	fa01 f202 	lsl.w	r2, r1, r2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x410>
 8001f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d002      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	f000 be2e 	b.w	8002c10 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb4:	4b75      	ldr	r3, [pc, #468]	; (800218c <HAL_RCC_OscConfig+0x5e8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	21f8      	movs	r1, #248	; 0xf8
 8001fca:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001fd2:	fa91 f1a1 	rbit	r1, r1
 8001fd6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001fda:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001fde:	fab1 f181 	clz	r1, r1
 8001fe2:	b2c9      	uxtb	r1, r1
 8001fe4:	408b      	lsls	r3, r1
 8001fe6:	4969      	ldr	r1, [pc, #420]	; (800218c <HAL_RCC_OscConfig+0x5e8>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fec:	e0fd      	b.n	80021ea <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8088 	beq.w	8002110 <HAL_RCC_OscConfig+0x56c>
 8002000:	2301      	movs	r3, #1
 8002002:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002012:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002020:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	461a      	mov	r2, r3
 8002028:	2301      	movs	r3, #1
 800202a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7fe fd2a 	bl	8000a84 <HAL_GetTick>
 8002030:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002034:	e00a      	b.n	800204c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002036:	f7fe fd25 	bl	8000a84 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d902      	bls.n	800204c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	f000 bde2 	b.w	8002c10 <HAL_RCC_OscConfig+0x106c>
 800204c:	2302      	movs	r3, #2
 800204e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800205e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	095b      	lsrs	r3, r3, #5
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d102      	bne.n	800207c <HAL_RCC_OscConfig+0x4d8>
 8002076:	4b45      	ldr	r3, [pc, #276]	; (800218c <HAL_RCC_OscConfig+0x5e8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	e013      	b.n	80020a4 <HAL_RCC_OscConfig+0x500>
 800207c:	2302      	movs	r3, #2
 800207e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800208e:	2302      	movs	r3, #2
 8002090:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002094:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80020a0:	4b3a      	ldr	r3, [pc, #232]	; (800218c <HAL_RCC_OscConfig+0x5e8>)
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	2202      	movs	r2, #2
 80020a6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80020aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80020ae:	fa92 f2a2 	rbit	r2, r2
 80020b2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80020b6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80020ba:	fab2 f282 	clz	r2, r2
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	f042 0220 	orr.w	r2, r2, #32
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	f002 021f 	and.w	r2, r2, #31
 80020ca:	2101      	movs	r1, #1
 80020cc:	fa01 f202 	lsl.w	r2, r1, r2
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0af      	beq.n	8002036 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d6:	4b2d      	ldr	r3, [pc, #180]	; (800218c <HAL_RCC_OscConfig+0x5e8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	21f8      	movs	r1, #248	; 0xf8
 80020ec:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80020f4:	fa91 f1a1 	rbit	r1, r1
 80020f8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80020fc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002100:	fab1 f181 	clz	r1, r1
 8002104:	b2c9      	uxtb	r1, r1
 8002106:	408b      	lsls	r3, r1
 8002108:	4920      	ldr	r1, [pc, #128]	; (800218c <HAL_RCC_OscConfig+0x5e8>)
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]
 800210e:	e06c      	b.n	80021ea <HAL_RCC_OscConfig+0x646>
 8002110:	2301      	movs	r3, #1
 8002112:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002122:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002126:	fab3 f383 	clz	r3, r3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002130:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	461a      	mov	r2, r3
 8002138:	2300      	movs	r3, #0
 800213a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213c:	f7fe fca2 	bl	8000a84 <HAL_GetTick>
 8002140:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002146:	f7fe fc9d 	bl	8000a84 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d902      	bls.n	800215c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	f000 bd5a 	b.w	8002c10 <HAL_RCC_OscConfig+0x106c>
 800215c:	2302      	movs	r3, #2
 800215e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800216e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b01      	cmp	r3, #1
 8002184:	d104      	bne.n	8002190 <HAL_RCC_OscConfig+0x5ec>
 8002186:	4b01      	ldr	r3, [pc, #4]	; (800218c <HAL_RCC_OscConfig+0x5e8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	e015      	b.n	80021b8 <HAL_RCC_OscConfig+0x614>
 800218c:	40021000 	.word	0x40021000
 8002190:	2302      	movs	r3, #2
 8002192:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80021a2:	2302      	movs	r3, #2
 80021a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80021a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80021b4:	4bc8      	ldr	r3, [pc, #800]	; (80024d8 <HAL_RCC_OscConfig+0x934>)
 80021b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b8:	2202      	movs	r2, #2
 80021ba:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80021be:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80021c2:	fa92 f2a2 	rbit	r2, r2
 80021c6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80021ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80021ce:	fab2 f282 	clz	r2, r2
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	f042 0220 	orr.w	r2, r2, #32
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	f002 021f 	and.w	r2, r2, #31
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f202 	lsl.w	r2, r1, r2
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1ad      	bne.n	8002146 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 8110 	beq.w	8002420 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002204:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d079      	beq.n	8002304 <HAL_RCC_OscConfig+0x760>
 8002210:	2301      	movs	r3, #1
 8002212:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002222:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002226:	fab3 f383 	clz	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	4bab      	ldr	r3, [pc, #684]	; (80024dc <HAL_RCC_OscConfig+0x938>)
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	461a      	mov	r2, r3
 8002236:	2301      	movs	r3, #1
 8002238:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223a:	f7fe fc23 	bl	8000a84 <HAL_GetTick>
 800223e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002242:	e00a      	b.n	800225a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002244:	f7fe fc1e 	bl	8000a84 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d902      	bls.n	800225a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	f000 bcdb 	b.w	8002c10 <HAL_RCC_OscConfig+0x106c>
 800225a:	2302      	movs	r3, #2
 800225c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800226c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002270:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002274:	2202      	movs	r2, #2
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	fa93 f2a3 	rbit	r2, r3
 8002286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002298:	2202      	movs	r2, #2
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	fa93 f2a3 	rbit	r2, r3
 80022aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022b2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b4:	4b88      	ldr	r3, [pc, #544]	; (80024d8 <HAL_RCC_OscConfig+0x934>)
 80022b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022bc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022c0:	2102      	movs	r1, #2
 80022c2:	6019      	str	r1, [r3, #0]
 80022c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	fa93 f1a3 	rbit	r1, r3
 80022d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80022da:	6019      	str	r1, [r3, #0]
  return result;
 80022dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	2101      	movs	r1, #1
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0a0      	beq.n	8002244 <HAL_RCC_OscConfig+0x6a0>
 8002302:	e08d      	b.n	8002420 <HAL_RCC_OscConfig+0x87c>
 8002304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002308:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800230c:	2201      	movs	r2, #1
 800230e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002314:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	fa93 f2a3 	rbit	r2, r3
 800231e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002322:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002326:	601a      	str	r2, [r3, #0]
  return result;
 8002328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002330:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	4b68      	ldr	r3, [pc, #416]	; (80024dc <HAL_RCC_OscConfig+0x938>)
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	461a      	mov	r2, r3
 8002342:	2300      	movs	r3, #0
 8002344:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002346:	f7fe fb9d 	bl	8000a84 <HAL_GetTick>
 800234a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234e:	e00a      	b.n	8002366 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002350:	f7fe fb98 	bl	8000a84 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d902      	bls.n	8002366 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	f000 bc55 	b.w	8002c10 <HAL_RCC_OscConfig+0x106c>
 8002366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800236e:	2202      	movs	r2, #2
 8002370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002376:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	fa93 f2a3 	rbit	r2, r3
 8002380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002384:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002392:	2202      	movs	r2, #2
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	fa93 f2a3 	rbit	r2, r3
 80023a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80023b6:	2202      	movs	r2, #2
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	fa93 f2a3 	rbit	r2, r3
 80023c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80023d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d2:	4b41      	ldr	r3, [pc, #260]	; (80024d8 <HAL_RCC_OscConfig+0x934>)
 80023d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023da:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80023de:	2102      	movs	r1, #2
 80023e0:	6019      	str	r1, [r3, #0]
 80023e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	fa93 f1a3 	rbit	r1, r3
 80023f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80023f8:	6019      	str	r1, [r3, #0]
  return result;
 80023fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	fab3 f383 	clz	r3, r3
 8002408:	b2db      	uxtb	r3, r3
 800240a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	2101      	movs	r1, #1
 8002416:	fa01 f303 	lsl.w	r3, r1, r3
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d197      	bne.n	8002350 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002424:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 81a1 	beq.w	8002778 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243c:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <HAL_RCC_OscConfig+0x934>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d116      	bne.n	8002476 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002448:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <HAL_RCC_OscConfig+0x934>)
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <HAL_RCC_OscConfig+0x934>)
 800244e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002452:	61d3      	str	r3, [r2, #28]
 8002454:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_RCC_OscConfig+0x934>)
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800245c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002460:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800246e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002470:	2301      	movs	r3, #1
 8002472:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002476:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <HAL_RCC_OscConfig+0x93c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d11a      	bne.n	80024b8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002482:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <HAL_RCC_OscConfig+0x93c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a16      	ldr	r2, [pc, #88]	; (80024e0 <HAL_RCC_OscConfig+0x93c>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248e:	f7fe faf9 	bl	8000a84 <HAL_GetTick>
 8002492:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002496:	e009      	b.n	80024ac <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002498:	f7fe faf4 	bl	8000a84 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b64      	cmp	r3, #100	; 0x64
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e3b1      	b.n	8002c10 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <HAL_RCC_OscConfig+0x93c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0ef      	beq.n	8002498 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024bc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d10d      	bne.n	80024e4 <HAL_RCC_OscConfig+0x940>
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <HAL_RCC_OscConfig+0x934>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4a02      	ldr	r2, [pc, #8]	; (80024d8 <HAL_RCC_OscConfig+0x934>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6213      	str	r3, [r2, #32]
 80024d4:	e03c      	b.n	8002550 <HAL_RCC_OscConfig+0x9ac>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	10908120 	.word	0x10908120
 80024e0:	40007000 	.word	0x40007000
 80024e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10c      	bne.n	800250e <HAL_RCC_OscConfig+0x96a>
 80024f4:	4bc1      	ldr	r3, [pc, #772]	; (80027fc <HAL_RCC_OscConfig+0xc58>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4ac0      	ldr	r2, [pc, #768]	; (80027fc <HAL_RCC_OscConfig+0xc58>)
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	6213      	str	r3, [r2, #32]
 8002500:	4bbe      	ldr	r3, [pc, #760]	; (80027fc <HAL_RCC_OscConfig+0xc58>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4abd      	ldr	r2, [pc, #756]	; (80027fc <HAL_RCC_OscConfig+0xc58>)
 8002506:	f023 0304 	bic.w	r3, r3, #4
 800250a:	6213      	str	r3, [r2, #32]
 800250c:	e020      	b.n	8002550 <HAL_RCC_OscConfig+0x9ac>
 800250e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002512:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b05      	cmp	r3, #5
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0x994>
 800251e:	4bb7      	ldr	r3, [pc, #732]	; (80027fc <HAL_RCC_OscConfig+0xc58>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4ab6      	ldr	r2, [pc, #728]	; (80027fc <HAL_RCC_OscConfig+0xc58>)
 8002524:	f043 0304 	orr.w	r3, r3, #4
 8002528:	6213      	str	r3, [r2, #32]
 800252a:	4bb4      	ldr	r3, [pc, #720]	; (80027fc <HAL_RCC_OscConfig+0xc58>)
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4ab3      	ldr	r2, [pc, #716]	; (80027fc <HAL_RCC_OscConfig+0xc58>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6213      	str	r3, [r2, #32]
 8002536:	e00b      	b.n	8002550 <HAL_RCC_OscConfig+0x9ac>
 8002538:	4bb0      	ldr	r3, [pc, #704]	; (80027fc <HAL_RCC_OscConfig+0xc58>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	4aaf      	ldr	r2, [pc, #700]	; (80027fc <HAL_RCC_OscConfig+0xc58>)
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	6213      	str	r3, [r2, #32]
 8002544:	4bad      	ldr	r3, [pc, #692]	; (80027fc <HAL_RCC_OscConfig+0xc58>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	4aac      	ldr	r2, [pc, #688]	; (80027fc <HAL_RCC_OscConfig+0xc58>)
 800254a:	f023 0304 	bic.w	r3, r3, #4
 800254e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002554:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 8081 	beq.w	8002664 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002562:	f7fe fa8f 	bl	8000a84 <HAL_GetTick>
 8002566:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256a:	e00b      	b.n	8002584 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800256c:	f7fe fa8a 	bl	8000a84 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	; 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e345      	b.n	8002c10 <HAL_RCC_OscConfig+0x106c>
 8002584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002588:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800258c:	2202      	movs	r2, #2
 800258e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002594:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	fa93 f2a3 	rbit	r2, r3
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ac:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80025b0:	2202      	movs	r2, #2
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	fa93 f2a3 	rbit	r2, r3
 80025c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80025ca:	601a      	str	r2, [r3, #0]
  return result;
 80025cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80025d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	095b      	lsrs	r3, r3, #5
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f043 0302 	orr.w	r3, r3, #2
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d102      	bne.n	80025f0 <HAL_RCC_OscConfig+0xa4c>
 80025ea:	4b84      	ldr	r3, [pc, #528]	; (80027fc <HAL_RCC_OscConfig+0xc58>)
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	e013      	b.n	8002618 <HAL_RCC_OscConfig+0xa74>
 80025f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80025f8:	2202      	movs	r2, #2
 80025fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002600:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	fa93 f2a3 	rbit	r2, r3
 800260a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	4b79      	ldr	r3, [pc, #484]	; (80027fc <HAL_RCC_OscConfig+0xc58>)
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800261c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002620:	2102      	movs	r1, #2
 8002622:	6011      	str	r1, [r2, #0]
 8002624:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002628:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800262c:	6812      	ldr	r2, [r2, #0]
 800262e:	fa92 f1a2 	rbit	r1, r2
 8002632:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002636:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800263a:	6011      	str	r1, [r2, #0]
  return result;
 800263c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002640:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	fab2 f282 	clz	r2, r2
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	f002 021f 	and.w	r2, r2, #31
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f202 	lsl.w	r2, r1, r2
 800265c:	4013      	ands	r3, r2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d084      	beq.n	800256c <HAL_RCC_OscConfig+0x9c8>
 8002662:	e07f      	b.n	8002764 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002664:	f7fe fa0e 	bl	8000a84 <HAL_GetTick>
 8002668:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266c:	e00b      	b.n	8002686 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800266e:	f7fe fa09 	bl	8000a84 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e2c4      	b.n	8002c10 <HAL_RCC_OscConfig+0x106c>
 8002686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800268e:	2202      	movs	r2, #2
 8002690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002696:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	fa93 f2a3 	rbit	r2, r3
 80026a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ae:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80026b2:	2202      	movs	r2, #2
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ba:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	fa93 f2a3 	rbit	r2, r3
 80026c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80026cc:	601a      	str	r2, [r3, #0]
  return result;
 80026ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80026d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d8:	fab3 f383 	clz	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	f043 0302 	orr.w	r3, r3, #2
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d102      	bne.n	80026f2 <HAL_RCC_OscConfig+0xb4e>
 80026ec:	4b43      	ldr	r3, [pc, #268]	; (80027fc <HAL_RCC_OscConfig+0xc58>)
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	e013      	b.n	800271a <HAL_RCC_OscConfig+0xb76>
 80026f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80026fa:	2202      	movs	r2, #2
 80026fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	fa93 f2a3 	rbit	r2, r3
 800270c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002710:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	4b39      	ldr	r3, [pc, #228]	; (80027fc <HAL_RCC_OscConfig+0xc58>)
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800271e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002722:	2102      	movs	r1, #2
 8002724:	6011      	str	r1, [r2, #0]
 8002726:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800272a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	fa92 f1a2 	rbit	r1, r2
 8002734:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002738:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800273c:	6011      	str	r1, [r2, #0]
  return result;
 800273e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002742:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	fab2 f282 	clz	r2, r2
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	f002 021f 	and.w	r2, r2, #31
 8002758:	2101      	movs	r1, #1
 800275a:	fa01 f202 	lsl.w	r2, r1, r2
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d184      	bne.n	800266e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002764:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002768:	2b01      	cmp	r3, #1
 800276a:	d105      	bne.n	8002778 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276c:	4b23      	ldr	r3, [pc, #140]	; (80027fc <HAL_RCC_OscConfig+0xc58>)
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	4a22      	ldr	r2, [pc, #136]	; (80027fc <HAL_RCC_OscConfig+0xc58>)
 8002772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002776:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 8242 	beq.w	8002c0e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800278a:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <HAL_RCC_OscConfig+0xc58>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b08      	cmp	r3, #8
 8002794:	f000 8213 	beq.w	8002bbe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	f040 8162 	bne.w	8002a6e <HAL_RCC_OscConfig+0xeca>
 80027aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ae:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80027b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027bc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	fa93 f2a3 	rbit	r2, r3
 80027c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80027ce:	601a      	str	r2, [r3, #0]
  return result;
 80027d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027d4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80027d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	461a      	mov	r2, r3
 80027ec:	2300      	movs	r3, #0
 80027ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f0:	f7fe f948 	bl	8000a84 <HAL_GetTick>
 80027f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f8:	e00c      	b.n	8002814 <HAL_RCC_OscConfig+0xc70>
 80027fa:	bf00      	nop
 80027fc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002800:	f7fe f940 	bl	8000a84 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1fd      	b.n	8002c10 <HAL_RCC_OscConfig+0x106c>
 8002814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002818:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800281c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002820:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002826:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	fa93 f2a3 	rbit	r2, r3
 8002830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002834:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002838:	601a      	str	r2, [r3, #0]
  return result;
 800283a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002842:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d102      	bne.n	800285e <HAL_RCC_OscConfig+0xcba>
 8002858:	4bb0      	ldr	r3, [pc, #704]	; (8002b1c <HAL_RCC_OscConfig+0xf78>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	e027      	b.n	80028ae <HAL_RCC_OscConfig+0xd0a>
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002866:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800286a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002870:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	fa93 f2a3 	rbit	r2, r3
 800287a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002888:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800288c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002896:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	fa93 f2a3 	rbit	r2, r3
 80028a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	4b9c      	ldr	r3, [pc, #624]	; (8002b1c <HAL_RCC_OscConfig+0xf78>)
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028b2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80028b6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028ba:	6011      	str	r1, [r2, #0]
 80028bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028c0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80028c4:	6812      	ldr	r2, [r2, #0]
 80028c6:	fa92 f1a2 	rbit	r1, r2
 80028ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028ce:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80028d2:	6011      	str	r1, [r2, #0]
  return result;
 80028d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80028d8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	fab2 f282 	clz	r2, r2
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	f042 0220 	orr.w	r2, r2, #32
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	f002 021f 	and.w	r2, r2, #31
 80028ee:	2101      	movs	r1, #1
 80028f0:	fa01 f202 	lsl.w	r2, r1, r2
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d182      	bne.n	8002800 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028fa:	4b88      	ldr	r3, [pc, #544]	; (8002b1c <HAL_RCC_OscConfig+0xf78>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002906:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800290e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002912:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	430b      	orrs	r3, r1
 800291c:	497f      	ldr	r1, [pc, #508]	; (8002b1c <HAL_RCC_OscConfig+0xf78>)
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]
 8002922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002926:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800292a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800292e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002934:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	fa93 f2a3 	rbit	r2, r3
 800293e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002942:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002946:	601a      	str	r2, [r3, #0]
  return result;
 8002948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002950:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800295c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	461a      	mov	r2, r3
 8002964:	2301      	movs	r3, #1
 8002966:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7fe f88c 	bl	8000a84 <HAL_GetTick>
 800296c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002970:	e009      	b.n	8002986 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002972:	f7fe f887 	bl	8000a84 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e144      	b.n	8002c10 <HAL_RCC_OscConfig+0x106c>
 8002986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800298e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002992:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002998:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	fa93 f2a3 	rbit	r2, r3
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80029aa:	601a      	str	r2, [r3, #0]
  return result;
 80029ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80029b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	095b      	lsrs	r3, r3, #5
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d102      	bne.n	80029d0 <HAL_RCC_OscConfig+0xe2c>
 80029ca:	4b54      	ldr	r3, [pc, #336]	; (8002b1c <HAL_RCC_OscConfig+0xf78>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	e027      	b.n	8002a20 <HAL_RCC_OscConfig+0xe7c>
 80029d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80029d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	fa93 f2a3 	rbit	r2, r3
 80029ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fa:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80029fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a08:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	fa93 f2a3 	rbit	r2, r3
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	4b3f      	ldr	r3, [pc, #252]	; (8002b1c <HAL_RCC_OscConfig+0xf78>)
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a24:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002a28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a2c:	6011      	str	r1, [r2, #0]
 8002a2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a32:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	fa92 f1a2 	rbit	r1, r2
 8002a3c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a40:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a44:	6011      	str	r1, [r2, #0]
  return result;
 8002a46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a4a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	fab2 f282 	clz	r2, r2
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	f042 0220 	orr.w	r2, r2, #32
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	f002 021f 	and.w	r2, r2, #31
 8002a60:	2101      	movs	r1, #1
 8002a62:	fa01 f202 	lsl.w	r2, r1, r2
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d082      	beq.n	8002972 <HAL_RCC_OscConfig+0xdce>
 8002a6c:	e0cf      	b.n	8002c0e <HAL_RCC_OscConfig+0x106a>
 8002a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a72:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a80:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	fa93 f2a3 	rbit	r2, r3
 8002a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a92:	601a      	str	r2, [r3, #0]
  return result;
 8002a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a98:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002a9c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002aa8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fd ffe6 	bl	8000a84 <HAL_GetTick>
 8002ab8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002abc:	e009      	b.n	8002ad2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002abe:	f7fd ffe1 	bl	8000a84 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e09e      	b.n	8002c10 <HAL_RCC_OscConfig+0x106c>
 8002ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ada:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ade:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	fa93 f2a3 	rbit	r2, r3
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002af6:	601a      	str	r2, [r3, #0]
  return result;
 8002af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d104      	bne.n	8002b20 <HAL_RCC_OscConfig+0xf7c>
 8002b16:	4b01      	ldr	r3, [pc, #4]	; (8002b1c <HAL_RCC_OscConfig+0xf78>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	e029      	b.n	8002b70 <HAL_RCC_OscConfig+0xfcc>
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b24:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b32:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	fa93 f2a3 	rbit	r2, r3
 8002b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b40:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b58:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	fa93 f2a3 	rbit	r2, r3
 8002b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b66:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <HAL_RCC_OscConfig+0x1078>)
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b74:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002b78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b7c:	6011      	str	r1, [r2, #0]
 8002b7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b82:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	fa92 f1a2 	rbit	r1, r2
 8002b8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b90:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b94:	6011      	str	r1, [r2, #0]
  return result;
 8002b96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b9a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	fab2 f282 	clz	r2, r2
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	f042 0220 	orr.w	r2, r2, #32
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	f002 021f 	and.w	r2, r2, #31
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d180      	bne.n	8002abe <HAL_RCC_OscConfig+0xf1a>
 8002bbc:	e027      	b.n	8002c0e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e01e      	b.n	8002c10 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_RCC_OscConfig+0x1078>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bde:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d10b      	bne.n	8002c0a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002bf2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002bf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d001      	beq.n	8002c0e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000

08002c20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b09e      	sub	sp, #120	; 0x78
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e162      	b.n	8002efe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c38:	4b90      	ldr	r3, [pc, #576]	; (8002e7c <HAL_RCC_ClockConfig+0x25c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d910      	bls.n	8002c68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c46:	4b8d      	ldr	r3, [pc, #564]	; (8002e7c <HAL_RCC_ClockConfig+0x25c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 0207 	bic.w	r2, r3, #7
 8002c4e:	498b      	ldr	r1, [pc, #556]	; (8002e7c <HAL_RCC_ClockConfig+0x25c>)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c56:	4b89      	ldr	r3, [pc, #548]	; (8002e7c <HAL_RCC_ClockConfig+0x25c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d001      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e14a      	b.n	8002efe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c74:	4b82      	ldr	r3, [pc, #520]	; (8002e80 <HAL_RCC_ClockConfig+0x260>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	497f      	ldr	r1, [pc, #508]	; (8002e80 <HAL_RCC_ClockConfig+0x260>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80dc 	beq.w	8002e4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d13c      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xf6>
 8002c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ca0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ca4:	fa93 f3a3 	rbit	r3, r3
 8002ca8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cac:	fab3 f383 	clz	r3, r3
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d102      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xa6>
 8002cc0:	4b6f      	ldr	r3, [pc, #444]	; (8002e80 <HAL_RCC_ClockConfig+0x260>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	e00f      	b.n	8002ce6 <HAL_RCC_ClockConfig+0xc6>
 8002cc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	667b      	str	r3, [r7, #100]	; 0x64
 8002cd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cd8:	663b      	str	r3, [r7, #96]	; 0x60
 8002cda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ce2:	4b67      	ldr	r3, [pc, #412]	; (8002e80 <HAL_RCC_ClockConfig+0x260>)
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cea:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cee:	fa92 f2a2 	rbit	r2, r2
 8002cf2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002cf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002cf6:	fab2 f282 	clz	r2, r2
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	f042 0220 	orr.w	r2, r2, #32
 8002d00:	b2d2      	uxtb	r2, r2
 8002d02:	f002 021f 	and.w	r2, r2, #31
 8002d06:	2101      	movs	r1, #1
 8002d08:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d17b      	bne.n	8002e0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e0f3      	b.n	8002efe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d13c      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x178>
 8002d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2e:	fab3 f383 	clz	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	095b      	lsrs	r3, r3, #5
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d102      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x128>
 8002d42:	4b4f      	ldr	r3, [pc, #316]	; (8002e80 <HAL_RCC_ClockConfig+0x260>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	e00f      	b.n	8002d68 <HAL_RCC_ClockConfig+0x148>
 8002d48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d50:	fa93 f3a3 	rbit	r3, r3
 8002d54:	647b      	str	r3, [r7, #68]	; 0x44
 8002d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d5a:	643b      	str	r3, [r7, #64]	; 0x40
 8002d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d64:	4b46      	ldr	r3, [pc, #280]	; (8002e80 <HAL_RCC_ClockConfig+0x260>)
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d6c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d70:	fa92 f2a2 	rbit	r2, r2
 8002d74:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d78:	fab2 f282 	clz	r2, r2
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	f042 0220 	orr.w	r2, r2, #32
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	f002 021f 	and.w	r2, r2, #31
 8002d88:	2101      	movs	r1, #1
 8002d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d13a      	bne.n	8002e0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0b2      	b.n	8002efe <HAL_RCC_ClockConfig+0x2de>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d102      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x1a0>
 8002dba:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <HAL_RCC_ClockConfig+0x260>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	e00d      	b.n	8002ddc <HAL_RCC_ClockConfig+0x1bc>
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
 8002dcc:	2302      	movs	r3, #2
 8002dce:	623b      	str	r3, [r7, #32]
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	61fb      	str	r3, [r7, #28]
 8002dd8:	4b29      	ldr	r3, [pc, #164]	; (8002e80 <HAL_RCC_ClockConfig+0x260>)
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	2202      	movs	r2, #2
 8002dde:	61ba      	str	r2, [r7, #24]
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	fa92 f2a2 	rbit	r2, r2
 8002de6:	617a      	str	r2, [r7, #20]
  return result;
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	fab2 f282 	clz	r2, r2
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	f042 0220 	orr.w	r2, r2, #32
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	f002 021f 	and.w	r2, r2, #31
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e079      	b.n	8002efe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e0a:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <HAL_RCC_ClockConfig+0x260>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f023 0203 	bic.w	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	491a      	ldr	r1, [pc, #104]	; (8002e80 <HAL_RCC_ClockConfig+0x260>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e1c:	f7fd fe32 	bl	8000a84 <HAL_GetTick>
 8002e20:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e22:	e00a      	b.n	8002e3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e24:	f7fd fe2e 	bl	8000a84 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e061      	b.n	8002efe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <HAL_RCC_ClockConfig+0x260>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 020c 	and.w	r2, r3, #12
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1eb      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_RCC_ClockConfig+0x25c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d214      	bcs.n	8002e84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <HAL_RCC_ClockConfig+0x25c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 0207 	bic.w	r2, r3, #7
 8002e62:	4906      	ldr	r1, [pc, #24]	; (8002e7c <HAL_RCC_ClockConfig+0x25c>)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6a:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <HAL_RCC_ClockConfig+0x25c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e040      	b.n	8002efe <HAL_RCC_ClockConfig+0x2de>
 8002e7c:	40022000 	.word	0x40022000
 8002e80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e90:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <HAL_RCC_ClockConfig+0x2e8>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	491a      	ldr	r1, [pc, #104]	; (8002f08 <HAL_RCC_ClockConfig+0x2e8>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d009      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eae:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <HAL_RCC_ClockConfig+0x2e8>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4912      	ldr	r1, [pc, #72]	; (8002f08 <HAL_RCC_ClockConfig+0x2e8>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ec2:	f000 f829 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 8002ec6:	4601      	mov	r1, r0
 8002ec8:	4b0f      	ldr	r3, [pc, #60]	; (8002f08 <HAL_RCC_ClockConfig+0x2e8>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ed0:	22f0      	movs	r2, #240	; 0xf0
 8002ed2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	fa92 f2a2 	rbit	r2, r2
 8002eda:	60fa      	str	r2, [r7, #12]
  return result;
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	fab2 f282 	clz	r2, r2
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	40d3      	lsrs	r3, r2
 8002ee6:	4a09      	ldr	r2, [pc, #36]	; (8002f0c <HAL_RCC_ClockConfig+0x2ec>)
 8002ee8:	5cd3      	ldrb	r3, [r2, r3]
 8002eea:	fa21 f303 	lsr.w	r3, r1, r3
 8002eee:	4a08      	ldr	r2, [pc, #32]	; (8002f10 <HAL_RCC_ClockConfig+0x2f0>)
 8002ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ef2:	4b08      	ldr	r3, [pc, #32]	; (8002f14 <HAL_RCC_ClockConfig+0x2f4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd fd80 	bl	80009fc <HAL_InitTick>
  
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3778      	adds	r7, #120	; 0x78
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	0800473c 	.word	0x0800473c
 8002f10:	20000000 	.word	0x20000000
 8002f14:	20000004 	.word	0x20000004

08002f18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	2300      	movs	r3, #0
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002f32:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <HAL_RCC_GetSysClockFreq+0x94>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d002      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0x30>
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d003      	beq.n	8002f4e <HAL_RCC_GetSysClockFreq+0x36>
 8002f46:	e026      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f48:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f4a:	613b      	str	r3, [r7, #16]
      break;
 8002f4c:	e026      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	0c9b      	lsrs	r3, r3, #18
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	4a17      	ldr	r2, [pc, #92]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f58:	5cd3      	ldrb	r3, [r2, r3]
 8002f5a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002f5c:	4b13      	ldr	r3, [pc, #76]	; (8002fac <HAL_RCC_GetSysClockFreq+0x94>)
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	4a14      	ldr	r2, [pc, #80]	; (8002fb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f66:	5cd3      	ldrb	r3, [r2, r3]
 8002f68:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f74:	4a0e      	ldr	r2, [pc, #56]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	e004      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a0c      	ldr	r2, [pc, #48]	; (8002fbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	613b      	str	r3, [r7, #16]
      break;
 8002f94:	e002      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f96:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f98:	613b      	str	r3, [r7, #16]
      break;
 8002f9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f9c:	693b      	ldr	r3, [r7, #16]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	371c      	adds	r7, #28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	007a1200 	.word	0x007a1200
 8002fb4:	08004754 	.word	0x08004754
 8002fb8:	08004764 	.word	0x08004764
 8002fbc:	003d0900 	.word	0x003d0900

08002fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000000 	.word	0x20000000

08002fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002fde:	f7ff ffef 	bl	8002fc0 <HAL_RCC_GetHCLKFreq>
 8002fe2:	4601      	mov	r1, r0
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ff0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	fa92 f2a2 	rbit	r2, r2
 8002ff8:	603a      	str	r2, [r7, #0]
  return result;
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	fab2 f282 	clz	r2, r2
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	40d3      	lsrs	r3, r2
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003006:	5cd3      	ldrb	r3, [r2, r3]
 8003008:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40021000 	.word	0x40021000
 8003018:	0800474c 	.word	0x0800474c

0800301c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003022:	f7ff ffcd 	bl	8002fc0 <HAL_RCC_GetHCLKFreq>
 8003026:	4601      	mov	r1, r0
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003030:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003034:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	fa92 f2a2 	rbit	r2, r2
 800303c:	603a      	str	r2, [r7, #0]
  return result;
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	fab2 f282 	clz	r2, r2
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	40d3      	lsrs	r3, r2
 8003048:	4a04      	ldr	r2, [pc, #16]	; (800305c <HAL_RCC_GetPCLK2Freq+0x40>)
 800304a:	5cd3      	ldrb	r3, [r2, r3]
 800304c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40021000 	.word	0x40021000
 800305c:	0800474c 	.word	0x0800474c

08003060 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b092      	sub	sp, #72	; 0x48
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003070:	2300      	movs	r3, #0
 8003072:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 80d4 	beq.w	800322c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003084:	4b4e      	ldr	r3, [pc, #312]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10e      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003090:	4b4b      	ldr	r3, [pc, #300]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	4a4a      	ldr	r2, [pc, #296]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309a:	61d3      	str	r3, [r2, #28]
 800309c:	4b48      	ldr	r3, [pc, #288]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ae:	4b45      	ldr	r3, [pc, #276]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d118      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ba:	4b42      	ldr	r3, [pc, #264]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a41      	ldr	r2, [pc, #260]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c6:	f7fd fcdd 	bl	8000a84 <HAL_GetTick>
 80030ca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030cc:	e008      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ce:	f7fd fcd9 	bl	8000a84 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b64      	cmp	r3, #100	; 0x64
 80030da:	d901      	bls.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e169      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e0:	4b38      	ldr	r3, [pc, #224]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030ec:	4b34      	ldr	r3, [pc, #208]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8084 	beq.w	8003206 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003108:	429a      	cmp	r2, r3
 800310a:	d07c      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800310c:	4b2c      	ldr	r3, [pc, #176]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003114:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003116:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800311a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311e:	fa93 f3a3 	rbit	r3, r3
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003126:	fab3 f383 	clz	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	461a      	mov	r2, r3
 8003136:	2301      	movs	r3, #1
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800313e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	461a      	mov	r2, r3
 8003152:	4b1d      	ldr	r3, [pc, #116]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	461a      	mov	r2, r3
 800315a:	2300      	movs	r3, #0
 800315c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800315e:	4a18      	ldr	r2, [pc, #96]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003162:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d04b      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316e:	f7fd fc89 	bl	8000a84 <HAL_GetTick>
 8003172:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003174:	e00a      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003176:	f7fd fc85 	bl	8000a84 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f241 3288 	movw	r2, #5000	; 0x1388
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e113      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800318c:	2302      	movs	r3, #2
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
 8003198:	2302      	movs	r3, #2
 800319a:	623b      	str	r3, [r7, #32]
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	fa93 f3a3 	rbit	r3, r3
 80031a2:	61fb      	str	r3, [r7, #28]
  return result;
 80031a4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f043 0302 	orr.w	r3, r3, #2
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d108      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80031ba:	4b01      	ldr	r3, [pc, #4]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	e00d      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40007000 	.word	0x40007000
 80031c8:	10908100 	.word	0x10908100
 80031cc:	2302      	movs	r3, #2
 80031ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	fa93 f3a3 	rbit	r3, r3
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	4b78      	ldr	r3, [pc, #480]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	2202      	movs	r2, #2
 80031de:	613a      	str	r2, [r7, #16]
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	fa92 f2a2 	rbit	r2, r2
 80031e6:	60fa      	str	r2, [r7, #12]
  return result;
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	fab2 f282 	clz	r2, r2
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	f002 021f 	and.w	r2, r2, #31
 80031fa:	2101      	movs	r1, #1
 80031fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003200:	4013      	ands	r3, r2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0b7      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003206:	4b6d      	ldr	r3, [pc, #436]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	496a      	ldr	r1, [pc, #424]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003214:	4313      	orrs	r3, r2
 8003216:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003218:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800321c:	2b01      	cmp	r3, #1
 800321e:	d105      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003220:	4b66      	ldr	r3, [pc, #408]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	4a65      	ldr	r2, [pc, #404]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800322a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003238:	4b60      	ldr	r3, [pc, #384]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	f023 0203 	bic.w	r2, r3, #3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	495d      	ldr	r1, [pc, #372]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003246:	4313      	orrs	r3, r2
 8003248:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d008      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003256:	4b59      	ldr	r3, [pc, #356]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	4956      	ldr	r1, [pc, #344]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003264:	4313      	orrs	r3, r2
 8003266:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003274:	4b51      	ldr	r3, [pc, #324]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	494e      	ldr	r1, [pc, #312]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003282:	4313      	orrs	r3, r2
 8003284:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003292:	4b4a      	ldr	r3, [pc, #296]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	f023 0210 	bic.w	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	4947      	ldr	r1, [pc, #284]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80032b0:	4b42      	ldr	r3, [pc, #264]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032bc:	493f      	ldr	r1, [pc, #252]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d008      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032ce:	4b3b      	ldr	r3, [pc, #236]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f023 0220 	bic.w	r2, r3, #32
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	4938      	ldr	r1, [pc, #224]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032ec:	4b33      	ldr	r3, [pc, #204]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	4930      	ldr	r1, [pc, #192]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800330a:	4b2c      	ldr	r3, [pc, #176]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	4929      	ldr	r1, [pc, #164]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003318:	4313      	orrs	r3, r2
 800331a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003328:	4b24      	ldr	r3, [pc, #144]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	4921      	ldr	r1, [pc, #132]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003336:	4313      	orrs	r3, r2
 8003338:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003342:	2b00      	cmp	r3, #0
 8003344:	d008      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003346:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	491a      	ldr	r1, [pc, #104]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003354:	4313      	orrs	r3, r2
 8003356:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d008      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003364:	4b15      	ldr	r3, [pc, #84]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	4912      	ldr	r1, [pc, #72]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003372:	4313      	orrs	r3, r2
 8003374:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003382:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	490b      	ldr	r1, [pc, #44]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003390:	4313      	orrs	r3, r2
 8003392:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ac:	4903      	ldr	r1, [pc, #12]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3748      	adds	r7, #72	; 0x48
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40021000 	.word	0x40021000

080033c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e040      	b.n	8003454 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fd fa14 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2224      	movs	r2, #36	; 0x24
 80033ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0201 	bic.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fa86 	bl	8003918 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f8af 	bl	8003570 <UART_SetConfig>
 8003412:	4603      	mov	r3, r0
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e01b      	b.n	8003454 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800342a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800343a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fb05 	bl	8003a5c <UART_CheckIdleState>
 8003452:	4603      	mov	r3, r0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	; 0x28
 8003460:	af02      	add	r7, sp, #8
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003470:	2b20      	cmp	r3, #32
 8003472:	d178      	bne.n	8003566 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_UART_Transmit+0x24>
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e071      	b.n	8003568 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2221      	movs	r2, #33	; 0x21
 8003490:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003492:	f7fd faf7 	bl	8000a84 <HAL_GetTick>
 8003496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	88fa      	ldrh	r2, [r7, #6]
 800349c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	88fa      	ldrh	r2, [r7, #6]
 80034a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b0:	d108      	bne.n	80034c4 <HAL_UART_Transmit+0x68>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d104      	bne.n	80034c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	e003      	b.n	80034cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034cc:	e030      	b.n	8003530 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2200      	movs	r2, #0
 80034d6:	2180      	movs	r1, #128	; 0x80
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 fb67 	bl	8003bac <UART_WaitOnFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d004      	beq.n	80034ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e03c      	b.n	8003568 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10b      	bne.n	800350c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	881a      	ldrh	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003500:	b292      	uxth	r2, r2
 8003502:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	3302      	adds	r3, #2
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	e008      	b.n	800351e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	781a      	ldrb	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	b292      	uxth	r2, r2
 8003516:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	3301      	adds	r3, #1
 800351c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003524:	b29b      	uxth	r3, r3
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1c8      	bne.n	80034ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2200      	movs	r2, #0
 8003544:	2140      	movs	r1, #64	; 0x40
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fb30 	bl	8003bac <UART_WaitOnFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e005      	b.n	8003568 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	e000      	b.n	8003568 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003566:	2302      	movs	r3, #2
  }
}
 8003568:	4618      	mov	r0, r3
 800356a:	3720      	adds	r7, #32
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800359e:	f023 030c 	bic.w	r3, r3, #12
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	6979      	ldr	r1, [r7, #20]
 80035a8:	430b      	orrs	r3, r1
 80035aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4aa7      	ldr	r2, [pc, #668]	; (8003888 <UART_SetConfig+0x318>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d120      	bne.n	8003632 <UART_SetConfig+0xc2>
 80035f0:	4ba6      	ldr	r3, [pc, #664]	; (800388c <UART_SetConfig+0x31c>)
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d817      	bhi.n	800362c <UART_SetConfig+0xbc>
 80035fc:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <UART_SetConfig+0x94>)
 80035fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003602:	bf00      	nop
 8003604:	08003615 	.word	0x08003615
 8003608:	08003621 	.word	0x08003621
 800360c:	08003627 	.word	0x08003627
 8003610:	0800361b 	.word	0x0800361b
 8003614:	2301      	movs	r3, #1
 8003616:	77fb      	strb	r3, [r7, #31]
 8003618:	e0b5      	b.n	8003786 <UART_SetConfig+0x216>
 800361a:	2302      	movs	r3, #2
 800361c:	77fb      	strb	r3, [r7, #31]
 800361e:	e0b2      	b.n	8003786 <UART_SetConfig+0x216>
 8003620:	2304      	movs	r3, #4
 8003622:	77fb      	strb	r3, [r7, #31]
 8003624:	e0af      	b.n	8003786 <UART_SetConfig+0x216>
 8003626:	2308      	movs	r3, #8
 8003628:	77fb      	strb	r3, [r7, #31]
 800362a:	e0ac      	b.n	8003786 <UART_SetConfig+0x216>
 800362c:	2310      	movs	r3, #16
 800362e:	77fb      	strb	r3, [r7, #31]
 8003630:	e0a9      	b.n	8003786 <UART_SetConfig+0x216>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a96      	ldr	r2, [pc, #600]	; (8003890 <UART_SetConfig+0x320>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d124      	bne.n	8003686 <UART_SetConfig+0x116>
 800363c:	4b93      	ldr	r3, [pc, #588]	; (800388c <UART_SetConfig+0x31c>)
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003644:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003648:	d011      	beq.n	800366e <UART_SetConfig+0xfe>
 800364a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800364e:	d817      	bhi.n	8003680 <UART_SetConfig+0x110>
 8003650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003654:	d011      	beq.n	800367a <UART_SetConfig+0x10a>
 8003656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800365a:	d811      	bhi.n	8003680 <UART_SetConfig+0x110>
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <UART_SetConfig+0xf8>
 8003660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003664:	d006      	beq.n	8003674 <UART_SetConfig+0x104>
 8003666:	e00b      	b.n	8003680 <UART_SetConfig+0x110>
 8003668:	2300      	movs	r3, #0
 800366a:	77fb      	strb	r3, [r7, #31]
 800366c:	e08b      	b.n	8003786 <UART_SetConfig+0x216>
 800366e:	2302      	movs	r3, #2
 8003670:	77fb      	strb	r3, [r7, #31]
 8003672:	e088      	b.n	8003786 <UART_SetConfig+0x216>
 8003674:	2304      	movs	r3, #4
 8003676:	77fb      	strb	r3, [r7, #31]
 8003678:	e085      	b.n	8003786 <UART_SetConfig+0x216>
 800367a:	2308      	movs	r3, #8
 800367c:	77fb      	strb	r3, [r7, #31]
 800367e:	e082      	b.n	8003786 <UART_SetConfig+0x216>
 8003680:	2310      	movs	r3, #16
 8003682:	77fb      	strb	r3, [r7, #31]
 8003684:	e07f      	b.n	8003786 <UART_SetConfig+0x216>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a82      	ldr	r2, [pc, #520]	; (8003894 <UART_SetConfig+0x324>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d124      	bne.n	80036da <UART_SetConfig+0x16a>
 8003690:	4b7e      	ldr	r3, [pc, #504]	; (800388c <UART_SetConfig+0x31c>)
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003698:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800369c:	d011      	beq.n	80036c2 <UART_SetConfig+0x152>
 800369e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036a2:	d817      	bhi.n	80036d4 <UART_SetConfig+0x164>
 80036a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036a8:	d011      	beq.n	80036ce <UART_SetConfig+0x15e>
 80036aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036ae:	d811      	bhi.n	80036d4 <UART_SetConfig+0x164>
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <UART_SetConfig+0x14c>
 80036b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036b8:	d006      	beq.n	80036c8 <UART_SetConfig+0x158>
 80036ba:	e00b      	b.n	80036d4 <UART_SetConfig+0x164>
 80036bc:	2300      	movs	r3, #0
 80036be:	77fb      	strb	r3, [r7, #31]
 80036c0:	e061      	b.n	8003786 <UART_SetConfig+0x216>
 80036c2:	2302      	movs	r3, #2
 80036c4:	77fb      	strb	r3, [r7, #31]
 80036c6:	e05e      	b.n	8003786 <UART_SetConfig+0x216>
 80036c8:	2304      	movs	r3, #4
 80036ca:	77fb      	strb	r3, [r7, #31]
 80036cc:	e05b      	b.n	8003786 <UART_SetConfig+0x216>
 80036ce:	2308      	movs	r3, #8
 80036d0:	77fb      	strb	r3, [r7, #31]
 80036d2:	e058      	b.n	8003786 <UART_SetConfig+0x216>
 80036d4:	2310      	movs	r3, #16
 80036d6:	77fb      	strb	r3, [r7, #31]
 80036d8:	e055      	b.n	8003786 <UART_SetConfig+0x216>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a6e      	ldr	r2, [pc, #440]	; (8003898 <UART_SetConfig+0x328>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d124      	bne.n	800372e <UART_SetConfig+0x1be>
 80036e4:	4b69      	ldr	r3, [pc, #420]	; (800388c <UART_SetConfig+0x31c>)
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80036ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036f0:	d011      	beq.n	8003716 <UART_SetConfig+0x1a6>
 80036f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036f6:	d817      	bhi.n	8003728 <UART_SetConfig+0x1b8>
 80036f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036fc:	d011      	beq.n	8003722 <UART_SetConfig+0x1b2>
 80036fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003702:	d811      	bhi.n	8003728 <UART_SetConfig+0x1b8>
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <UART_SetConfig+0x1a0>
 8003708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800370c:	d006      	beq.n	800371c <UART_SetConfig+0x1ac>
 800370e:	e00b      	b.n	8003728 <UART_SetConfig+0x1b8>
 8003710:	2300      	movs	r3, #0
 8003712:	77fb      	strb	r3, [r7, #31]
 8003714:	e037      	b.n	8003786 <UART_SetConfig+0x216>
 8003716:	2302      	movs	r3, #2
 8003718:	77fb      	strb	r3, [r7, #31]
 800371a:	e034      	b.n	8003786 <UART_SetConfig+0x216>
 800371c:	2304      	movs	r3, #4
 800371e:	77fb      	strb	r3, [r7, #31]
 8003720:	e031      	b.n	8003786 <UART_SetConfig+0x216>
 8003722:	2308      	movs	r3, #8
 8003724:	77fb      	strb	r3, [r7, #31]
 8003726:	e02e      	b.n	8003786 <UART_SetConfig+0x216>
 8003728:	2310      	movs	r3, #16
 800372a:	77fb      	strb	r3, [r7, #31]
 800372c:	e02b      	b.n	8003786 <UART_SetConfig+0x216>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a5a      	ldr	r2, [pc, #360]	; (800389c <UART_SetConfig+0x32c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d124      	bne.n	8003782 <UART_SetConfig+0x212>
 8003738:	4b54      	ldr	r3, [pc, #336]	; (800388c <UART_SetConfig+0x31c>)
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003740:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003744:	d011      	beq.n	800376a <UART_SetConfig+0x1fa>
 8003746:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800374a:	d817      	bhi.n	800377c <UART_SetConfig+0x20c>
 800374c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003750:	d011      	beq.n	8003776 <UART_SetConfig+0x206>
 8003752:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003756:	d811      	bhi.n	800377c <UART_SetConfig+0x20c>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <UART_SetConfig+0x1f4>
 800375c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003760:	d006      	beq.n	8003770 <UART_SetConfig+0x200>
 8003762:	e00b      	b.n	800377c <UART_SetConfig+0x20c>
 8003764:	2300      	movs	r3, #0
 8003766:	77fb      	strb	r3, [r7, #31]
 8003768:	e00d      	b.n	8003786 <UART_SetConfig+0x216>
 800376a:	2302      	movs	r3, #2
 800376c:	77fb      	strb	r3, [r7, #31]
 800376e:	e00a      	b.n	8003786 <UART_SetConfig+0x216>
 8003770:	2304      	movs	r3, #4
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e007      	b.n	8003786 <UART_SetConfig+0x216>
 8003776:	2308      	movs	r3, #8
 8003778:	77fb      	strb	r3, [r7, #31]
 800377a:	e004      	b.n	8003786 <UART_SetConfig+0x216>
 800377c:	2310      	movs	r3, #16
 800377e:	77fb      	strb	r3, [r7, #31]
 8003780:	e001      	b.n	8003786 <UART_SetConfig+0x216>
 8003782:	2310      	movs	r3, #16
 8003784:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800378e:	d15b      	bne.n	8003848 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003790:	7ffb      	ldrb	r3, [r7, #31]
 8003792:	2b08      	cmp	r3, #8
 8003794:	d827      	bhi.n	80037e6 <UART_SetConfig+0x276>
 8003796:	a201      	add	r2, pc, #4	; (adr r2, 800379c <UART_SetConfig+0x22c>)
 8003798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379c:	080037c1 	.word	0x080037c1
 80037a0:	080037c9 	.word	0x080037c9
 80037a4:	080037d1 	.word	0x080037d1
 80037a8:	080037e7 	.word	0x080037e7
 80037ac:	080037d7 	.word	0x080037d7
 80037b0:	080037e7 	.word	0x080037e7
 80037b4:	080037e7 	.word	0x080037e7
 80037b8:	080037e7 	.word	0x080037e7
 80037bc:	080037df 	.word	0x080037df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037c0:	f7ff fc0a 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 80037c4:	61b8      	str	r0, [r7, #24]
        break;
 80037c6:	e013      	b.n	80037f0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037c8:	f7ff fc28 	bl	800301c <HAL_RCC_GetPCLK2Freq>
 80037cc:	61b8      	str	r0, [r7, #24]
        break;
 80037ce:	e00f      	b.n	80037f0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037d0:	4b33      	ldr	r3, [pc, #204]	; (80038a0 <UART_SetConfig+0x330>)
 80037d2:	61bb      	str	r3, [r7, #24]
        break;
 80037d4:	e00c      	b.n	80037f0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037d6:	f7ff fb9f 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 80037da:	61b8      	str	r0, [r7, #24]
        break;
 80037dc:	e008      	b.n	80037f0 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037e2:	61bb      	str	r3, [r7, #24]
        break;
 80037e4:	e004      	b.n	80037f0 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	77bb      	strb	r3, [r7, #30]
        break;
 80037ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8082 	beq.w	80038fc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	005a      	lsls	r2, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	085b      	lsrs	r3, r3, #1
 8003802:	441a      	add	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	fbb2 f3f3 	udiv	r3, r2, r3
 800380c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b0f      	cmp	r3, #15
 8003812:	d916      	bls.n	8003842 <UART_SetConfig+0x2d2>
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381a:	d212      	bcs.n	8003842 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	b29b      	uxth	r3, r3
 8003820:	f023 030f 	bic.w	r3, r3, #15
 8003824:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	085b      	lsrs	r3, r3, #1
 800382a:	b29b      	uxth	r3, r3
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	b29a      	uxth	r2, r3
 8003832:	89fb      	ldrh	r3, [r7, #14]
 8003834:	4313      	orrs	r3, r2
 8003836:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	89fa      	ldrh	r2, [r7, #14]
 800383e:	60da      	str	r2, [r3, #12]
 8003840:	e05c      	b.n	80038fc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	77bb      	strb	r3, [r7, #30]
 8003846:	e059      	b.n	80038fc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003848:	7ffb      	ldrb	r3, [r7, #31]
 800384a:	2b08      	cmp	r3, #8
 800384c:	d835      	bhi.n	80038ba <UART_SetConfig+0x34a>
 800384e:	a201      	add	r2, pc, #4	; (adr r2, 8003854 <UART_SetConfig+0x2e4>)
 8003850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003854:	08003879 	.word	0x08003879
 8003858:	08003881 	.word	0x08003881
 800385c:	080038a5 	.word	0x080038a5
 8003860:	080038bb 	.word	0x080038bb
 8003864:	080038ab 	.word	0x080038ab
 8003868:	080038bb 	.word	0x080038bb
 800386c:	080038bb 	.word	0x080038bb
 8003870:	080038bb 	.word	0x080038bb
 8003874:	080038b3 	.word	0x080038b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003878:	f7ff fbae 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 800387c:	61b8      	str	r0, [r7, #24]
        break;
 800387e:	e021      	b.n	80038c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003880:	f7ff fbcc 	bl	800301c <HAL_RCC_GetPCLK2Freq>
 8003884:	61b8      	str	r0, [r7, #24]
        break;
 8003886:	e01d      	b.n	80038c4 <UART_SetConfig+0x354>
 8003888:	40013800 	.word	0x40013800
 800388c:	40021000 	.word	0x40021000
 8003890:	40004400 	.word	0x40004400
 8003894:	40004800 	.word	0x40004800
 8003898:	40004c00 	.word	0x40004c00
 800389c:	40005000 	.word	0x40005000
 80038a0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038a4:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <UART_SetConfig+0x3a4>)
 80038a6:	61bb      	str	r3, [r7, #24]
        break;
 80038a8:	e00c      	b.n	80038c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038aa:	f7ff fb35 	bl	8002f18 <HAL_RCC_GetSysClockFreq>
 80038ae:	61b8      	str	r0, [r7, #24]
        break;
 80038b0:	e008      	b.n	80038c4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038b6:	61bb      	str	r3, [r7, #24]
        break;
 80038b8:	e004      	b.n	80038c4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	77bb      	strb	r3, [r7, #30]
        break;
 80038c2:	bf00      	nop
    }

    if (pclk != 0U)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d018      	beq.n	80038fc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	085a      	lsrs	r2, r3, #1
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	441a      	add	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b0f      	cmp	r3, #15
 80038e2:	d909      	bls.n	80038f8 <UART_SetConfig+0x388>
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ea:	d205      	bcs.n	80038f8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	e001      	b.n	80038fc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003908:	7fbb      	ldrb	r3, [r7, #30]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3720      	adds	r7, #32
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	007a1200 	.word	0x007a1200

08003918 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	f003 0310 	and.w	r3, r3, #16
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d01a      	beq.n	8003a2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a16:	d10a      	bne.n	8003a2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	605a      	str	r2, [r3, #4]
  }
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b098      	sub	sp, #96	; 0x60
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a6c:	f7fd f80a 	bl	8000a84 <HAL_GetTick>
 8003a70:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d12e      	bne.n	8003ade <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f88c 	bl	8003bac <UART_WaitOnFlagUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d021      	beq.n	8003ade <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa2:	e853 3f00 	ldrex	r3, [r3]
 8003aa6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aae:	653b      	str	r3, [r7, #80]	; 0x50
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8003aba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003abe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ac0:	e841 2300 	strex	r3, r2, [r1]
 8003ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1e6      	bne.n	8003a9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e062      	b.n	8003ba4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d149      	bne.n	8003b80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af4:	2200      	movs	r2, #0
 8003af6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f856 	bl	8003bac <UART_WaitOnFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d03c      	beq.n	8003b80 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	e853 3f00 	ldrex	r3, [r3]
 8003b12:	623b      	str	r3, [r7, #32]
   return(result);
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b24:	633b      	str	r3, [r7, #48]	; 0x30
 8003b26:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2c:	e841 2300 	strex	r3, r2, [r1]
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e6      	bne.n	8003b06 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0301 	bic.w	r3, r3, #1
 8003b4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3308      	adds	r3, #8
 8003b56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b58:	61fa      	str	r2, [r7, #28]
 8003b5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	69b9      	ldr	r1, [r7, #24]
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	617b      	str	r3, [r7, #20]
   return(result);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e5      	bne.n	8003b38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e011      	b.n	8003ba4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3758      	adds	r7, #88	; 0x58
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bbc:	e04f      	b.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bc4:	d04b      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc6:	f7fc ff5d 	bl	8000a84 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d302      	bcc.n	8003bdc <UART_WaitOnFlagUntilTimeout+0x30>
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e04e      	b.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d037      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b80      	cmp	r3, #128	; 0x80
 8003bf2:	d034      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b40      	cmp	r3, #64	; 0x40
 8003bf8:	d031      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d110      	bne.n	8003c2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2208      	movs	r2, #8
 8003c0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f838 	bl	8003c86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2208      	movs	r2, #8
 8003c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e029      	b.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c38:	d111      	bne.n	8003c5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f81e 	bl	8003c86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e00f      	b.n	8003c7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4013      	ands	r3, r2
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	bf0c      	ite	eq
 8003c6e:	2301      	moveq	r3, #1
 8003c70:	2300      	movne	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d0a0      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b095      	sub	sp, #84	; 0x54
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cac:	643b      	str	r3, [r7, #64]	; 0x40
 8003cae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e6      	bne.n	8003c8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	e853 3f00 	ldrex	r3, [r3]
 8003cce:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f023 0301 	bic.w	r3, r3, #1
 8003cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3308      	adds	r3, #8
 8003cde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ce0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ce8:	e841 2300 	strex	r3, r2, [r1]
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e5      	bne.n	8003cc0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d118      	bne.n	8003d2e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f023 0310 	bic.w	r3, r3, #16
 8003d10:	647b      	str	r3, [r7, #68]	; 0x44
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6979      	ldr	r1, [r7, #20]
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	613b      	str	r3, [r7, #16]
   return(result);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e6      	bne.n	8003cfc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d42:	bf00      	nop
 8003d44:	3754      	adds	r7, #84	; 0x54
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <sniprintf>:
 8003d50:	b40c      	push	{r2, r3}
 8003d52:	b530      	push	{r4, r5, lr}
 8003d54:	4b17      	ldr	r3, [pc, #92]	; (8003db4 <sniprintf+0x64>)
 8003d56:	1e0c      	subs	r4, r1, #0
 8003d58:	681d      	ldr	r5, [r3, #0]
 8003d5a:	b09d      	sub	sp, #116	; 0x74
 8003d5c:	da08      	bge.n	8003d70 <sniprintf+0x20>
 8003d5e:	238b      	movs	r3, #139	; 0x8b
 8003d60:	602b      	str	r3, [r5, #0]
 8003d62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d66:	b01d      	add	sp, #116	; 0x74
 8003d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d6c:	b002      	add	sp, #8
 8003d6e:	4770      	bx	lr
 8003d70:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003d74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003d78:	bf14      	ite	ne
 8003d7a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8003d7e:	4623      	moveq	r3, r4
 8003d80:	9304      	str	r3, [sp, #16]
 8003d82:	9307      	str	r3, [sp, #28]
 8003d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d88:	9002      	str	r0, [sp, #8]
 8003d8a:	9006      	str	r0, [sp, #24]
 8003d8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003d90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003d92:	ab21      	add	r3, sp, #132	; 0x84
 8003d94:	a902      	add	r1, sp, #8
 8003d96:	4628      	mov	r0, r5
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	f000 f89b 	bl	8003ed4 <_svfiprintf_r>
 8003d9e:	1c43      	adds	r3, r0, #1
 8003da0:	bfbc      	itt	lt
 8003da2:	238b      	movlt	r3, #139	; 0x8b
 8003da4:	602b      	strlt	r3, [r5, #0]
 8003da6:	2c00      	cmp	r4, #0
 8003da8:	d0dd      	beq.n	8003d66 <sniprintf+0x16>
 8003daa:	9b02      	ldr	r3, [sp, #8]
 8003dac:	2200      	movs	r2, #0
 8003dae:	701a      	strb	r2, [r3, #0]
 8003db0:	e7d9      	b.n	8003d66 <sniprintf+0x16>
 8003db2:	bf00      	nop
 8003db4:	20000058 	.word	0x20000058

08003db8 <memset>:
 8003db8:	4402      	add	r2, r0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d100      	bne.n	8003dc2 <memset+0xa>
 8003dc0:	4770      	bx	lr
 8003dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8003dc6:	e7f9      	b.n	8003dbc <memset+0x4>

08003dc8 <__errno>:
 8003dc8:	4b01      	ldr	r3, [pc, #4]	; (8003dd0 <__errno+0x8>)
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20000058 	.word	0x20000058

08003dd4 <__libc_init_array>:
 8003dd4:	b570      	push	{r4, r5, r6, lr}
 8003dd6:	4d0d      	ldr	r5, [pc, #52]	; (8003e0c <__libc_init_array+0x38>)
 8003dd8:	4c0d      	ldr	r4, [pc, #52]	; (8003e10 <__libc_init_array+0x3c>)
 8003dda:	1b64      	subs	r4, r4, r5
 8003ddc:	10a4      	asrs	r4, r4, #2
 8003dde:	2600      	movs	r6, #0
 8003de0:	42a6      	cmp	r6, r4
 8003de2:	d109      	bne.n	8003df8 <__libc_init_array+0x24>
 8003de4:	4d0b      	ldr	r5, [pc, #44]	; (8003e14 <__libc_init_array+0x40>)
 8003de6:	4c0c      	ldr	r4, [pc, #48]	; (8003e18 <__libc_init_array+0x44>)
 8003de8:	f000 fc6a 	bl	80046c0 <_init>
 8003dec:	1b64      	subs	r4, r4, r5
 8003dee:	10a4      	asrs	r4, r4, #2
 8003df0:	2600      	movs	r6, #0
 8003df2:	42a6      	cmp	r6, r4
 8003df4:	d105      	bne.n	8003e02 <__libc_init_array+0x2e>
 8003df6:	bd70      	pop	{r4, r5, r6, pc}
 8003df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dfc:	4798      	blx	r3
 8003dfe:	3601      	adds	r6, #1
 8003e00:	e7ee      	b.n	8003de0 <__libc_init_array+0xc>
 8003e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e06:	4798      	blx	r3
 8003e08:	3601      	adds	r6, #1
 8003e0a:	e7f2      	b.n	8003df2 <__libc_init_array+0x1e>
 8003e0c:	080047a8 	.word	0x080047a8
 8003e10:	080047a8 	.word	0x080047a8
 8003e14:	080047a8 	.word	0x080047a8
 8003e18:	080047ac 	.word	0x080047ac

08003e1c <__retarget_lock_acquire_recursive>:
 8003e1c:	4770      	bx	lr

08003e1e <__retarget_lock_release_recursive>:
 8003e1e:	4770      	bx	lr

08003e20 <__ssputs_r>:
 8003e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e24:	688e      	ldr	r6, [r1, #8]
 8003e26:	461f      	mov	r7, r3
 8003e28:	42be      	cmp	r6, r7
 8003e2a:	680b      	ldr	r3, [r1, #0]
 8003e2c:	4682      	mov	sl, r0
 8003e2e:	460c      	mov	r4, r1
 8003e30:	4690      	mov	r8, r2
 8003e32:	d82c      	bhi.n	8003e8e <__ssputs_r+0x6e>
 8003e34:	898a      	ldrh	r2, [r1, #12]
 8003e36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e3a:	d026      	beq.n	8003e8a <__ssputs_r+0x6a>
 8003e3c:	6965      	ldr	r5, [r4, #20]
 8003e3e:	6909      	ldr	r1, [r1, #16]
 8003e40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e44:	eba3 0901 	sub.w	r9, r3, r1
 8003e48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e4c:	1c7b      	adds	r3, r7, #1
 8003e4e:	444b      	add	r3, r9
 8003e50:	106d      	asrs	r5, r5, #1
 8003e52:	429d      	cmp	r5, r3
 8003e54:	bf38      	it	cc
 8003e56:	461d      	movcc	r5, r3
 8003e58:	0553      	lsls	r3, r2, #21
 8003e5a:	d527      	bpl.n	8003eac <__ssputs_r+0x8c>
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	f000 f957 	bl	8004110 <_malloc_r>
 8003e62:	4606      	mov	r6, r0
 8003e64:	b360      	cbz	r0, 8003ec0 <__ssputs_r+0xa0>
 8003e66:	6921      	ldr	r1, [r4, #16]
 8003e68:	464a      	mov	r2, r9
 8003e6a:	f000 fbc7 	bl	80045fc <memcpy>
 8003e6e:	89a3      	ldrh	r3, [r4, #12]
 8003e70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e78:	81a3      	strh	r3, [r4, #12]
 8003e7a:	6126      	str	r6, [r4, #16]
 8003e7c:	6165      	str	r5, [r4, #20]
 8003e7e:	444e      	add	r6, r9
 8003e80:	eba5 0509 	sub.w	r5, r5, r9
 8003e84:	6026      	str	r6, [r4, #0]
 8003e86:	60a5      	str	r5, [r4, #8]
 8003e88:	463e      	mov	r6, r7
 8003e8a:	42be      	cmp	r6, r7
 8003e8c:	d900      	bls.n	8003e90 <__ssputs_r+0x70>
 8003e8e:	463e      	mov	r6, r7
 8003e90:	6820      	ldr	r0, [r4, #0]
 8003e92:	4632      	mov	r2, r6
 8003e94:	4641      	mov	r1, r8
 8003e96:	f000 fb86 	bl	80045a6 <memmove>
 8003e9a:	68a3      	ldr	r3, [r4, #8]
 8003e9c:	1b9b      	subs	r3, r3, r6
 8003e9e:	60a3      	str	r3, [r4, #8]
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	4433      	add	r3, r6
 8003ea4:	6023      	str	r3, [r4, #0]
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eac:	462a      	mov	r2, r5
 8003eae:	f000 fb4b 	bl	8004548 <_realloc_r>
 8003eb2:	4606      	mov	r6, r0
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d1e0      	bne.n	8003e7a <__ssputs_r+0x5a>
 8003eb8:	6921      	ldr	r1, [r4, #16]
 8003eba:	4650      	mov	r0, sl
 8003ebc:	f000 fbac 	bl	8004618 <_free_r>
 8003ec0:	230c      	movs	r3, #12
 8003ec2:	f8ca 3000 	str.w	r3, [sl]
 8003ec6:	89a3      	ldrh	r3, [r4, #12]
 8003ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ecc:	81a3      	strh	r3, [r4, #12]
 8003ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ed2:	e7e9      	b.n	8003ea8 <__ssputs_r+0x88>

08003ed4 <_svfiprintf_r>:
 8003ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed8:	4698      	mov	r8, r3
 8003eda:	898b      	ldrh	r3, [r1, #12]
 8003edc:	061b      	lsls	r3, r3, #24
 8003ede:	b09d      	sub	sp, #116	; 0x74
 8003ee0:	4607      	mov	r7, r0
 8003ee2:	460d      	mov	r5, r1
 8003ee4:	4614      	mov	r4, r2
 8003ee6:	d50e      	bpl.n	8003f06 <_svfiprintf_r+0x32>
 8003ee8:	690b      	ldr	r3, [r1, #16]
 8003eea:	b963      	cbnz	r3, 8003f06 <_svfiprintf_r+0x32>
 8003eec:	2140      	movs	r1, #64	; 0x40
 8003eee:	f000 f90f 	bl	8004110 <_malloc_r>
 8003ef2:	6028      	str	r0, [r5, #0]
 8003ef4:	6128      	str	r0, [r5, #16]
 8003ef6:	b920      	cbnz	r0, 8003f02 <_svfiprintf_r+0x2e>
 8003ef8:	230c      	movs	r3, #12
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f00:	e0d0      	b.n	80040a4 <_svfiprintf_r+0x1d0>
 8003f02:	2340      	movs	r3, #64	; 0x40
 8003f04:	616b      	str	r3, [r5, #20]
 8003f06:	2300      	movs	r3, #0
 8003f08:	9309      	str	r3, [sp, #36]	; 0x24
 8003f0a:	2320      	movs	r3, #32
 8003f0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f10:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f14:	2330      	movs	r3, #48	; 0x30
 8003f16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80040bc <_svfiprintf_r+0x1e8>
 8003f1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f1e:	f04f 0901 	mov.w	r9, #1
 8003f22:	4623      	mov	r3, r4
 8003f24:	469a      	mov	sl, r3
 8003f26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f2a:	b10a      	cbz	r2, 8003f30 <_svfiprintf_r+0x5c>
 8003f2c:	2a25      	cmp	r2, #37	; 0x25
 8003f2e:	d1f9      	bne.n	8003f24 <_svfiprintf_r+0x50>
 8003f30:	ebba 0b04 	subs.w	fp, sl, r4
 8003f34:	d00b      	beq.n	8003f4e <_svfiprintf_r+0x7a>
 8003f36:	465b      	mov	r3, fp
 8003f38:	4622      	mov	r2, r4
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	4638      	mov	r0, r7
 8003f3e:	f7ff ff6f 	bl	8003e20 <__ssputs_r>
 8003f42:	3001      	adds	r0, #1
 8003f44:	f000 80a9 	beq.w	800409a <_svfiprintf_r+0x1c6>
 8003f48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f4a:	445a      	add	r2, fp
 8003f4c:	9209      	str	r2, [sp, #36]	; 0x24
 8003f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 80a1 	beq.w	800409a <_svfiprintf_r+0x1c6>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f62:	f10a 0a01 	add.w	sl, sl, #1
 8003f66:	9304      	str	r3, [sp, #16]
 8003f68:	9307      	str	r3, [sp, #28]
 8003f6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f6e:	931a      	str	r3, [sp, #104]	; 0x68
 8003f70:	4654      	mov	r4, sl
 8003f72:	2205      	movs	r2, #5
 8003f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f78:	4850      	ldr	r0, [pc, #320]	; (80040bc <_svfiprintf_r+0x1e8>)
 8003f7a:	f7fc f931 	bl	80001e0 <memchr>
 8003f7e:	9a04      	ldr	r2, [sp, #16]
 8003f80:	b9d8      	cbnz	r0, 8003fba <_svfiprintf_r+0xe6>
 8003f82:	06d0      	lsls	r0, r2, #27
 8003f84:	bf44      	itt	mi
 8003f86:	2320      	movmi	r3, #32
 8003f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f8c:	0711      	lsls	r1, r2, #28
 8003f8e:	bf44      	itt	mi
 8003f90:	232b      	movmi	r3, #43	; 0x2b
 8003f92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f96:	f89a 3000 	ldrb.w	r3, [sl]
 8003f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f9c:	d015      	beq.n	8003fca <_svfiprintf_r+0xf6>
 8003f9e:	9a07      	ldr	r2, [sp, #28]
 8003fa0:	4654      	mov	r4, sl
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	f04f 0c0a 	mov.w	ip, #10
 8003fa8:	4621      	mov	r1, r4
 8003faa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fae:	3b30      	subs	r3, #48	; 0x30
 8003fb0:	2b09      	cmp	r3, #9
 8003fb2:	d94d      	bls.n	8004050 <_svfiprintf_r+0x17c>
 8003fb4:	b1b0      	cbz	r0, 8003fe4 <_svfiprintf_r+0x110>
 8003fb6:	9207      	str	r2, [sp, #28]
 8003fb8:	e014      	b.n	8003fe4 <_svfiprintf_r+0x110>
 8003fba:	eba0 0308 	sub.w	r3, r0, r8
 8003fbe:	fa09 f303 	lsl.w	r3, r9, r3
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	9304      	str	r3, [sp, #16]
 8003fc6:	46a2      	mov	sl, r4
 8003fc8:	e7d2      	b.n	8003f70 <_svfiprintf_r+0x9c>
 8003fca:	9b03      	ldr	r3, [sp, #12]
 8003fcc:	1d19      	adds	r1, r3, #4
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	9103      	str	r1, [sp, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	bfbb      	ittet	lt
 8003fd6:	425b      	neglt	r3, r3
 8003fd8:	f042 0202 	orrlt.w	r2, r2, #2
 8003fdc:	9307      	strge	r3, [sp, #28]
 8003fde:	9307      	strlt	r3, [sp, #28]
 8003fe0:	bfb8      	it	lt
 8003fe2:	9204      	strlt	r2, [sp, #16]
 8003fe4:	7823      	ldrb	r3, [r4, #0]
 8003fe6:	2b2e      	cmp	r3, #46	; 0x2e
 8003fe8:	d10c      	bne.n	8004004 <_svfiprintf_r+0x130>
 8003fea:	7863      	ldrb	r3, [r4, #1]
 8003fec:	2b2a      	cmp	r3, #42	; 0x2a
 8003fee:	d134      	bne.n	800405a <_svfiprintf_r+0x186>
 8003ff0:	9b03      	ldr	r3, [sp, #12]
 8003ff2:	1d1a      	adds	r2, r3, #4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	9203      	str	r2, [sp, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bfb8      	it	lt
 8003ffc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004000:	3402      	adds	r4, #2
 8004002:	9305      	str	r3, [sp, #20]
 8004004:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80040cc <_svfiprintf_r+0x1f8>
 8004008:	7821      	ldrb	r1, [r4, #0]
 800400a:	2203      	movs	r2, #3
 800400c:	4650      	mov	r0, sl
 800400e:	f7fc f8e7 	bl	80001e0 <memchr>
 8004012:	b138      	cbz	r0, 8004024 <_svfiprintf_r+0x150>
 8004014:	9b04      	ldr	r3, [sp, #16]
 8004016:	eba0 000a 	sub.w	r0, r0, sl
 800401a:	2240      	movs	r2, #64	; 0x40
 800401c:	4082      	lsls	r2, r0
 800401e:	4313      	orrs	r3, r2
 8004020:	3401      	adds	r4, #1
 8004022:	9304      	str	r3, [sp, #16]
 8004024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004028:	4825      	ldr	r0, [pc, #148]	; (80040c0 <_svfiprintf_r+0x1ec>)
 800402a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800402e:	2206      	movs	r2, #6
 8004030:	f7fc f8d6 	bl	80001e0 <memchr>
 8004034:	2800      	cmp	r0, #0
 8004036:	d038      	beq.n	80040aa <_svfiprintf_r+0x1d6>
 8004038:	4b22      	ldr	r3, [pc, #136]	; (80040c4 <_svfiprintf_r+0x1f0>)
 800403a:	bb1b      	cbnz	r3, 8004084 <_svfiprintf_r+0x1b0>
 800403c:	9b03      	ldr	r3, [sp, #12]
 800403e:	3307      	adds	r3, #7
 8004040:	f023 0307 	bic.w	r3, r3, #7
 8004044:	3308      	adds	r3, #8
 8004046:	9303      	str	r3, [sp, #12]
 8004048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800404a:	4433      	add	r3, r6
 800404c:	9309      	str	r3, [sp, #36]	; 0x24
 800404e:	e768      	b.n	8003f22 <_svfiprintf_r+0x4e>
 8004050:	fb0c 3202 	mla	r2, ip, r2, r3
 8004054:	460c      	mov	r4, r1
 8004056:	2001      	movs	r0, #1
 8004058:	e7a6      	b.n	8003fa8 <_svfiprintf_r+0xd4>
 800405a:	2300      	movs	r3, #0
 800405c:	3401      	adds	r4, #1
 800405e:	9305      	str	r3, [sp, #20]
 8004060:	4619      	mov	r1, r3
 8004062:	f04f 0c0a 	mov.w	ip, #10
 8004066:	4620      	mov	r0, r4
 8004068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800406c:	3a30      	subs	r2, #48	; 0x30
 800406e:	2a09      	cmp	r2, #9
 8004070:	d903      	bls.n	800407a <_svfiprintf_r+0x1a6>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0c6      	beq.n	8004004 <_svfiprintf_r+0x130>
 8004076:	9105      	str	r1, [sp, #20]
 8004078:	e7c4      	b.n	8004004 <_svfiprintf_r+0x130>
 800407a:	fb0c 2101 	mla	r1, ip, r1, r2
 800407e:	4604      	mov	r4, r0
 8004080:	2301      	movs	r3, #1
 8004082:	e7f0      	b.n	8004066 <_svfiprintf_r+0x192>
 8004084:	ab03      	add	r3, sp, #12
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	462a      	mov	r2, r5
 800408a:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <_svfiprintf_r+0x1f4>)
 800408c:	a904      	add	r1, sp, #16
 800408e:	4638      	mov	r0, r7
 8004090:	f3af 8000 	nop.w
 8004094:	1c42      	adds	r2, r0, #1
 8004096:	4606      	mov	r6, r0
 8004098:	d1d6      	bne.n	8004048 <_svfiprintf_r+0x174>
 800409a:	89ab      	ldrh	r3, [r5, #12]
 800409c:	065b      	lsls	r3, r3, #25
 800409e:	f53f af2d 	bmi.w	8003efc <_svfiprintf_r+0x28>
 80040a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040a4:	b01d      	add	sp, #116	; 0x74
 80040a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040aa:	ab03      	add	r3, sp, #12
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	462a      	mov	r2, r5
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <_svfiprintf_r+0x1f4>)
 80040b2:	a904      	add	r1, sp, #16
 80040b4:	4638      	mov	r0, r7
 80040b6:	f000 f919 	bl	80042ec <_printf_i>
 80040ba:	e7eb      	b.n	8004094 <_svfiprintf_r+0x1c0>
 80040bc:	08004774 	.word	0x08004774
 80040c0:	0800477e 	.word	0x0800477e
 80040c4:	00000000 	.word	0x00000000
 80040c8:	08003e21 	.word	0x08003e21
 80040cc:	0800477a 	.word	0x0800477a

080040d0 <sbrk_aligned>:
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	4e0e      	ldr	r6, [pc, #56]	; (800410c <sbrk_aligned+0x3c>)
 80040d4:	460c      	mov	r4, r1
 80040d6:	6831      	ldr	r1, [r6, #0]
 80040d8:	4605      	mov	r5, r0
 80040da:	b911      	cbnz	r1, 80040e2 <sbrk_aligned+0x12>
 80040dc:	f000 fa7e 	bl	80045dc <_sbrk_r>
 80040e0:	6030      	str	r0, [r6, #0]
 80040e2:	4621      	mov	r1, r4
 80040e4:	4628      	mov	r0, r5
 80040e6:	f000 fa79 	bl	80045dc <_sbrk_r>
 80040ea:	1c43      	adds	r3, r0, #1
 80040ec:	d00a      	beq.n	8004104 <sbrk_aligned+0x34>
 80040ee:	1cc4      	adds	r4, r0, #3
 80040f0:	f024 0403 	bic.w	r4, r4, #3
 80040f4:	42a0      	cmp	r0, r4
 80040f6:	d007      	beq.n	8004108 <sbrk_aligned+0x38>
 80040f8:	1a21      	subs	r1, r4, r0
 80040fa:	4628      	mov	r0, r5
 80040fc:	f000 fa6e 	bl	80045dc <_sbrk_r>
 8004100:	3001      	adds	r0, #1
 8004102:	d101      	bne.n	8004108 <sbrk_aligned+0x38>
 8004104:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004108:	4620      	mov	r0, r4
 800410a:	bd70      	pop	{r4, r5, r6, pc}
 800410c:	2000029c 	.word	0x2000029c

08004110 <_malloc_r>:
 8004110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004114:	1ccd      	adds	r5, r1, #3
 8004116:	f025 0503 	bic.w	r5, r5, #3
 800411a:	3508      	adds	r5, #8
 800411c:	2d0c      	cmp	r5, #12
 800411e:	bf38      	it	cc
 8004120:	250c      	movcc	r5, #12
 8004122:	2d00      	cmp	r5, #0
 8004124:	4607      	mov	r7, r0
 8004126:	db01      	blt.n	800412c <_malloc_r+0x1c>
 8004128:	42a9      	cmp	r1, r5
 800412a:	d905      	bls.n	8004138 <_malloc_r+0x28>
 800412c:	230c      	movs	r3, #12
 800412e:	603b      	str	r3, [r7, #0]
 8004130:	2600      	movs	r6, #0
 8004132:	4630      	mov	r0, r6
 8004134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004138:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800420c <_malloc_r+0xfc>
 800413c:	f000 f9f8 	bl	8004530 <__malloc_lock>
 8004140:	f8d8 3000 	ldr.w	r3, [r8]
 8004144:	461c      	mov	r4, r3
 8004146:	bb5c      	cbnz	r4, 80041a0 <_malloc_r+0x90>
 8004148:	4629      	mov	r1, r5
 800414a:	4638      	mov	r0, r7
 800414c:	f7ff ffc0 	bl	80040d0 <sbrk_aligned>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	4604      	mov	r4, r0
 8004154:	d155      	bne.n	8004202 <_malloc_r+0xf2>
 8004156:	f8d8 4000 	ldr.w	r4, [r8]
 800415a:	4626      	mov	r6, r4
 800415c:	2e00      	cmp	r6, #0
 800415e:	d145      	bne.n	80041ec <_malloc_r+0xdc>
 8004160:	2c00      	cmp	r4, #0
 8004162:	d048      	beq.n	80041f6 <_malloc_r+0xe6>
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	4631      	mov	r1, r6
 8004168:	4638      	mov	r0, r7
 800416a:	eb04 0903 	add.w	r9, r4, r3
 800416e:	f000 fa35 	bl	80045dc <_sbrk_r>
 8004172:	4581      	cmp	r9, r0
 8004174:	d13f      	bne.n	80041f6 <_malloc_r+0xe6>
 8004176:	6821      	ldr	r1, [r4, #0]
 8004178:	1a6d      	subs	r5, r5, r1
 800417a:	4629      	mov	r1, r5
 800417c:	4638      	mov	r0, r7
 800417e:	f7ff ffa7 	bl	80040d0 <sbrk_aligned>
 8004182:	3001      	adds	r0, #1
 8004184:	d037      	beq.n	80041f6 <_malloc_r+0xe6>
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	442b      	add	r3, r5
 800418a:	6023      	str	r3, [r4, #0]
 800418c:	f8d8 3000 	ldr.w	r3, [r8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d038      	beq.n	8004206 <_malloc_r+0xf6>
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	42a2      	cmp	r2, r4
 8004198:	d12b      	bne.n	80041f2 <_malloc_r+0xe2>
 800419a:	2200      	movs	r2, #0
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	e00f      	b.n	80041c0 <_malloc_r+0xb0>
 80041a0:	6822      	ldr	r2, [r4, #0]
 80041a2:	1b52      	subs	r2, r2, r5
 80041a4:	d41f      	bmi.n	80041e6 <_malloc_r+0xd6>
 80041a6:	2a0b      	cmp	r2, #11
 80041a8:	d917      	bls.n	80041da <_malloc_r+0xca>
 80041aa:	1961      	adds	r1, r4, r5
 80041ac:	42a3      	cmp	r3, r4
 80041ae:	6025      	str	r5, [r4, #0]
 80041b0:	bf18      	it	ne
 80041b2:	6059      	strne	r1, [r3, #4]
 80041b4:	6863      	ldr	r3, [r4, #4]
 80041b6:	bf08      	it	eq
 80041b8:	f8c8 1000 	streq.w	r1, [r8]
 80041bc:	5162      	str	r2, [r4, r5]
 80041be:	604b      	str	r3, [r1, #4]
 80041c0:	4638      	mov	r0, r7
 80041c2:	f104 060b 	add.w	r6, r4, #11
 80041c6:	f000 f9b9 	bl	800453c <__malloc_unlock>
 80041ca:	f026 0607 	bic.w	r6, r6, #7
 80041ce:	1d23      	adds	r3, r4, #4
 80041d0:	1af2      	subs	r2, r6, r3
 80041d2:	d0ae      	beq.n	8004132 <_malloc_r+0x22>
 80041d4:	1b9b      	subs	r3, r3, r6
 80041d6:	50a3      	str	r3, [r4, r2]
 80041d8:	e7ab      	b.n	8004132 <_malloc_r+0x22>
 80041da:	42a3      	cmp	r3, r4
 80041dc:	6862      	ldr	r2, [r4, #4]
 80041de:	d1dd      	bne.n	800419c <_malloc_r+0x8c>
 80041e0:	f8c8 2000 	str.w	r2, [r8]
 80041e4:	e7ec      	b.n	80041c0 <_malloc_r+0xb0>
 80041e6:	4623      	mov	r3, r4
 80041e8:	6864      	ldr	r4, [r4, #4]
 80041ea:	e7ac      	b.n	8004146 <_malloc_r+0x36>
 80041ec:	4634      	mov	r4, r6
 80041ee:	6876      	ldr	r6, [r6, #4]
 80041f0:	e7b4      	b.n	800415c <_malloc_r+0x4c>
 80041f2:	4613      	mov	r3, r2
 80041f4:	e7cc      	b.n	8004190 <_malloc_r+0x80>
 80041f6:	230c      	movs	r3, #12
 80041f8:	603b      	str	r3, [r7, #0]
 80041fa:	4638      	mov	r0, r7
 80041fc:	f000 f99e 	bl	800453c <__malloc_unlock>
 8004200:	e797      	b.n	8004132 <_malloc_r+0x22>
 8004202:	6025      	str	r5, [r4, #0]
 8004204:	e7dc      	b.n	80041c0 <_malloc_r+0xb0>
 8004206:	605b      	str	r3, [r3, #4]
 8004208:	deff      	udf	#255	; 0xff
 800420a:	bf00      	nop
 800420c:	20000298 	.word	0x20000298

08004210 <_printf_common>:
 8004210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004214:	4616      	mov	r6, r2
 8004216:	4699      	mov	r9, r3
 8004218:	688a      	ldr	r2, [r1, #8]
 800421a:	690b      	ldr	r3, [r1, #16]
 800421c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004220:	4293      	cmp	r3, r2
 8004222:	bfb8      	it	lt
 8004224:	4613      	movlt	r3, r2
 8004226:	6033      	str	r3, [r6, #0]
 8004228:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800422c:	4607      	mov	r7, r0
 800422e:	460c      	mov	r4, r1
 8004230:	b10a      	cbz	r2, 8004236 <_printf_common+0x26>
 8004232:	3301      	adds	r3, #1
 8004234:	6033      	str	r3, [r6, #0]
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	0699      	lsls	r1, r3, #26
 800423a:	bf42      	ittt	mi
 800423c:	6833      	ldrmi	r3, [r6, #0]
 800423e:	3302      	addmi	r3, #2
 8004240:	6033      	strmi	r3, [r6, #0]
 8004242:	6825      	ldr	r5, [r4, #0]
 8004244:	f015 0506 	ands.w	r5, r5, #6
 8004248:	d106      	bne.n	8004258 <_printf_common+0x48>
 800424a:	f104 0a19 	add.w	sl, r4, #25
 800424e:	68e3      	ldr	r3, [r4, #12]
 8004250:	6832      	ldr	r2, [r6, #0]
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	42ab      	cmp	r3, r5
 8004256:	dc26      	bgt.n	80042a6 <_printf_common+0x96>
 8004258:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800425c:	1e13      	subs	r3, r2, #0
 800425e:	6822      	ldr	r2, [r4, #0]
 8004260:	bf18      	it	ne
 8004262:	2301      	movne	r3, #1
 8004264:	0692      	lsls	r2, r2, #26
 8004266:	d42b      	bmi.n	80042c0 <_printf_common+0xb0>
 8004268:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800426c:	4649      	mov	r1, r9
 800426e:	4638      	mov	r0, r7
 8004270:	47c0      	blx	r8
 8004272:	3001      	adds	r0, #1
 8004274:	d01e      	beq.n	80042b4 <_printf_common+0xa4>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	6922      	ldr	r2, [r4, #16]
 800427a:	f003 0306 	and.w	r3, r3, #6
 800427e:	2b04      	cmp	r3, #4
 8004280:	bf02      	ittt	eq
 8004282:	68e5      	ldreq	r5, [r4, #12]
 8004284:	6833      	ldreq	r3, [r6, #0]
 8004286:	1aed      	subeq	r5, r5, r3
 8004288:	68a3      	ldr	r3, [r4, #8]
 800428a:	bf0c      	ite	eq
 800428c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004290:	2500      	movne	r5, #0
 8004292:	4293      	cmp	r3, r2
 8004294:	bfc4      	itt	gt
 8004296:	1a9b      	subgt	r3, r3, r2
 8004298:	18ed      	addgt	r5, r5, r3
 800429a:	2600      	movs	r6, #0
 800429c:	341a      	adds	r4, #26
 800429e:	42b5      	cmp	r5, r6
 80042a0:	d11a      	bne.n	80042d8 <_printf_common+0xc8>
 80042a2:	2000      	movs	r0, #0
 80042a4:	e008      	b.n	80042b8 <_printf_common+0xa8>
 80042a6:	2301      	movs	r3, #1
 80042a8:	4652      	mov	r2, sl
 80042aa:	4649      	mov	r1, r9
 80042ac:	4638      	mov	r0, r7
 80042ae:	47c0      	blx	r8
 80042b0:	3001      	adds	r0, #1
 80042b2:	d103      	bne.n	80042bc <_printf_common+0xac>
 80042b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042bc:	3501      	adds	r5, #1
 80042be:	e7c6      	b.n	800424e <_printf_common+0x3e>
 80042c0:	18e1      	adds	r1, r4, r3
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	2030      	movs	r0, #48	; 0x30
 80042c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042ca:	4422      	add	r2, r4
 80042cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042d4:	3302      	adds	r3, #2
 80042d6:	e7c7      	b.n	8004268 <_printf_common+0x58>
 80042d8:	2301      	movs	r3, #1
 80042da:	4622      	mov	r2, r4
 80042dc:	4649      	mov	r1, r9
 80042de:	4638      	mov	r0, r7
 80042e0:	47c0      	blx	r8
 80042e2:	3001      	adds	r0, #1
 80042e4:	d0e6      	beq.n	80042b4 <_printf_common+0xa4>
 80042e6:	3601      	adds	r6, #1
 80042e8:	e7d9      	b.n	800429e <_printf_common+0x8e>
	...

080042ec <_printf_i>:
 80042ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042f0:	7e0f      	ldrb	r7, [r1, #24]
 80042f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042f4:	2f78      	cmp	r7, #120	; 0x78
 80042f6:	4691      	mov	r9, r2
 80042f8:	4680      	mov	r8, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	469a      	mov	sl, r3
 80042fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004302:	d807      	bhi.n	8004314 <_printf_i+0x28>
 8004304:	2f62      	cmp	r7, #98	; 0x62
 8004306:	d80a      	bhi.n	800431e <_printf_i+0x32>
 8004308:	2f00      	cmp	r7, #0
 800430a:	f000 80d4 	beq.w	80044b6 <_printf_i+0x1ca>
 800430e:	2f58      	cmp	r7, #88	; 0x58
 8004310:	f000 80c0 	beq.w	8004494 <_printf_i+0x1a8>
 8004314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004318:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800431c:	e03a      	b.n	8004394 <_printf_i+0xa8>
 800431e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004322:	2b15      	cmp	r3, #21
 8004324:	d8f6      	bhi.n	8004314 <_printf_i+0x28>
 8004326:	a101      	add	r1, pc, #4	; (adr r1, 800432c <_printf_i+0x40>)
 8004328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800432c:	08004385 	.word	0x08004385
 8004330:	08004399 	.word	0x08004399
 8004334:	08004315 	.word	0x08004315
 8004338:	08004315 	.word	0x08004315
 800433c:	08004315 	.word	0x08004315
 8004340:	08004315 	.word	0x08004315
 8004344:	08004399 	.word	0x08004399
 8004348:	08004315 	.word	0x08004315
 800434c:	08004315 	.word	0x08004315
 8004350:	08004315 	.word	0x08004315
 8004354:	08004315 	.word	0x08004315
 8004358:	0800449d 	.word	0x0800449d
 800435c:	080043c5 	.word	0x080043c5
 8004360:	08004457 	.word	0x08004457
 8004364:	08004315 	.word	0x08004315
 8004368:	08004315 	.word	0x08004315
 800436c:	080044bf 	.word	0x080044bf
 8004370:	08004315 	.word	0x08004315
 8004374:	080043c5 	.word	0x080043c5
 8004378:	08004315 	.word	0x08004315
 800437c:	08004315 	.word	0x08004315
 8004380:	0800445f 	.word	0x0800445f
 8004384:	682b      	ldr	r3, [r5, #0]
 8004386:	1d1a      	adds	r2, r3, #4
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	602a      	str	r2, [r5, #0]
 800438c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004394:	2301      	movs	r3, #1
 8004396:	e09f      	b.n	80044d8 <_printf_i+0x1ec>
 8004398:	6820      	ldr	r0, [r4, #0]
 800439a:	682b      	ldr	r3, [r5, #0]
 800439c:	0607      	lsls	r7, r0, #24
 800439e:	f103 0104 	add.w	r1, r3, #4
 80043a2:	6029      	str	r1, [r5, #0]
 80043a4:	d501      	bpl.n	80043aa <_printf_i+0xbe>
 80043a6:	681e      	ldr	r6, [r3, #0]
 80043a8:	e003      	b.n	80043b2 <_printf_i+0xc6>
 80043aa:	0646      	lsls	r6, r0, #25
 80043ac:	d5fb      	bpl.n	80043a6 <_printf_i+0xba>
 80043ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80043b2:	2e00      	cmp	r6, #0
 80043b4:	da03      	bge.n	80043be <_printf_i+0xd2>
 80043b6:	232d      	movs	r3, #45	; 0x2d
 80043b8:	4276      	negs	r6, r6
 80043ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043be:	485a      	ldr	r0, [pc, #360]	; (8004528 <_printf_i+0x23c>)
 80043c0:	230a      	movs	r3, #10
 80043c2:	e012      	b.n	80043ea <_printf_i+0xfe>
 80043c4:	682b      	ldr	r3, [r5, #0]
 80043c6:	6820      	ldr	r0, [r4, #0]
 80043c8:	1d19      	adds	r1, r3, #4
 80043ca:	6029      	str	r1, [r5, #0]
 80043cc:	0605      	lsls	r5, r0, #24
 80043ce:	d501      	bpl.n	80043d4 <_printf_i+0xe8>
 80043d0:	681e      	ldr	r6, [r3, #0]
 80043d2:	e002      	b.n	80043da <_printf_i+0xee>
 80043d4:	0641      	lsls	r1, r0, #25
 80043d6:	d5fb      	bpl.n	80043d0 <_printf_i+0xe4>
 80043d8:	881e      	ldrh	r6, [r3, #0]
 80043da:	4853      	ldr	r0, [pc, #332]	; (8004528 <_printf_i+0x23c>)
 80043dc:	2f6f      	cmp	r7, #111	; 0x6f
 80043de:	bf0c      	ite	eq
 80043e0:	2308      	moveq	r3, #8
 80043e2:	230a      	movne	r3, #10
 80043e4:	2100      	movs	r1, #0
 80043e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043ea:	6865      	ldr	r5, [r4, #4]
 80043ec:	60a5      	str	r5, [r4, #8]
 80043ee:	2d00      	cmp	r5, #0
 80043f0:	bfa2      	ittt	ge
 80043f2:	6821      	ldrge	r1, [r4, #0]
 80043f4:	f021 0104 	bicge.w	r1, r1, #4
 80043f8:	6021      	strge	r1, [r4, #0]
 80043fa:	b90e      	cbnz	r6, 8004400 <_printf_i+0x114>
 80043fc:	2d00      	cmp	r5, #0
 80043fe:	d04b      	beq.n	8004498 <_printf_i+0x1ac>
 8004400:	4615      	mov	r5, r2
 8004402:	fbb6 f1f3 	udiv	r1, r6, r3
 8004406:	fb03 6711 	mls	r7, r3, r1, r6
 800440a:	5dc7      	ldrb	r7, [r0, r7]
 800440c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004410:	4637      	mov	r7, r6
 8004412:	42bb      	cmp	r3, r7
 8004414:	460e      	mov	r6, r1
 8004416:	d9f4      	bls.n	8004402 <_printf_i+0x116>
 8004418:	2b08      	cmp	r3, #8
 800441a:	d10b      	bne.n	8004434 <_printf_i+0x148>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	07de      	lsls	r6, r3, #31
 8004420:	d508      	bpl.n	8004434 <_printf_i+0x148>
 8004422:	6923      	ldr	r3, [r4, #16]
 8004424:	6861      	ldr	r1, [r4, #4]
 8004426:	4299      	cmp	r1, r3
 8004428:	bfde      	ittt	le
 800442a:	2330      	movle	r3, #48	; 0x30
 800442c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004430:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004434:	1b52      	subs	r2, r2, r5
 8004436:	6122      	str	r2, [r4, #16]
 8004438:	f8cd a000 	str.w	sl, [sp]
 800443c:	464b      	mov	r3, r9
 800443e:	aa03      	add	r2, sp, #12
 8004440:	4621      	mov	r1, r4
 8004442:	4640      	mov	r0, r8
 8004444:	f7ff fee4 	bl	8004210 <_printf_common>
 8004448:	3001      	adds	r0, #1
 800444a:	d14a      	bne.n	80044e2 <_printf_i+0x1f6>
 800444c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004450:	b004      	add	sp, #16
 8004452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	f043 0320 	orr.w	r3, r3, #32
 800445c:	6023      	str	r3, [r4, #0]
 800445e:	4833      	ldr	r0, [pc, #204]	; (800452c <_printf_i+0x240>)
 8004460:	2778      	movs	r7, #120	; 0x78
 8004462:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	6829      	ldr	r1, [r5, #0]
 800446a:	061f      	lsls	r7, r3, #24
 800446c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004470:	d402      	bmi.n	8004478 <_printf_i+0x18c>
 8004472:	065f      	lsls	r7, r3, #25
 8004474:	bf48      	it	mi
 8004476:	b2b6      	uxthmi	r6, r6
 8004478:	07df      	lsls	r7, r3, #31
 800447a:	bf48      	it	mi
 800447c:	f043 0320 	orrmi.w	r3, r3, #32
 8004480:	6029      	str	r1, [r5, #0]
 8004482:	bf48      	it	mi
 8004484:	6023      	strmi	r3, [r4, #0]
 8004486:	b91e      	cbnz	r6, 8004490 <_printf_i+0x1a4>
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	f023 0320 	bic.w	r3, r3, #32
 800448e:	6023      	str	r3, [r4, #0]
 8004490:	2310      	movs	r3, #16
 8004492:	e7a7      	b.n	80043e4 <_printf_i+0xf8>
 8004494:	4824      	ldr	r0, [pc, #144]	; (8004528 <_printf_i+0x23c>)
 8004496:	e7e4      	b.n	8004462 <_printf_i+0x176>
 8004498:	4615      	mov	r5, r2
 800449a:	e7bd      	b.n	8004418 <_printf_i+0x12c>
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	6826      	ldr	r6, [r4, #0]
 80044a0:	6961      	ldr	r1, [r4, #20]
 80044a2:	1d18      	adds	r0, r3, #4
 80044a4:	6028      	str	r0, [r5, #0]
 80044a6:	0635      	lsls	r5, r6, #24
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	d501      	bpl.n	80044b0 <_printf_i+0x1c4>
 80044ac:	6019      	str	r1, [r3, #0]
 80044ae:	e002      	b.n	80044b6 <_printf_i+0x1ca>
 80044b0:	0670      	lsls	r0, r6, #25
 80044b2:	d5fb      	bpl.n	80044ac <_printf_i+0x1c0>
 80044b4:	8019      	strh	r1, [r3, #0]
 80044b6:	2300      	movs	r3, #0
 80044b8:	6123      	str	r3, [r4, #16]
 80044ba:	4615      	mov	r5, r2
 80044bc:	e7bc      	b.n	8004438 <_printf_i+0x14c>
 80044be:	682b      	ldr	r3, [r5, #0]
 80044c0:	1d1a      	adds	r2, r3, #4
 80044c2:	602a      	str	r2, [r5, #0]
 80044c4:	681d      	ldr	r5, [r3, #0]
 80044c6:	6862      	ldr	r2, [r4, #4]
 80044c8:	2100      	movs	r1, #0
 80044ca:	4628      	mov	r0, r5
 80044cc:	f7fb fe88 	bl	80001e0 <memchr>
 80044d0:	b108      	cbz	r0, 80044d6 <_printf_i+0x1ea>
 80044d2:	1b40      	subs	r0, r0, r5
 80044d4:	6060      	str	r0, [r4, #4]
 80044d6:	6863      	ldr	r3, [r4, #4]
 80044d8:	6123      	str	r3, [r4, #16]
 80044da:	2300      	movs	r3, #0
 80044dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044e0:	e7aa      	b.n	8004438 <_printf_i+0x14c>
 80044e2:	6923      	ldr	r3, [r4, #16]
 80044e4:	462a      	mov	r2, r5
 80044e6:	4649      	mov	r1, r9
 80044e8:	4640      	mov	r0, r8
 80044ea:	47d0      	blx	sl
 80044ec:	3001      	adds	r0, #1
 80044ee:	d0ad      	beq.n	800444c <_printf_i+0x160>
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	079b      	lsls	r3, r3, #30
 80044f4:	d413      	bmi.n	800451e <_printf_i+0x232>
 80044f6:	68e0      	ldr	r0, [r4, #12]
 80044f8:	9b03      	ldr	r3, [sp, #12]
 80044fa:	4298      	cmp	r0, r3
 80044fc:	bfb8      	it	lt
 80044fe:	4618      	movlt	r0, r3
 8004500:	e7a6      	b.n	8004450 <_printf_i+0x164>
 8004502:	2301      	movs	r3, #1
 8004504:	4632      	mov	r2, r6
 8004506:	4649      	mov	r1, r9
 8004508:	4640      	mov	r0, r8
 800450a:	47d0      	blx	sl
 800450c:	3001      	adds	r0, #1
 800450e:	d09d      	beq.n	800444c <_printf_i+0x160>
 8004510:	3501      	adds	r5, #1
 8004512:	68e3      	ldr	r3, [r4, #12]
 8004514:	9903      	ldr	r1, [sp, #12]
 8004516:	1a5b      	subs	r3, r3, r1
 8004518:	42ab      	cmp	r3, r5
 800451a:	dcf2      	bgt.n	8004502 <_printf_i+0x216>
 800451c:	e7eb      	b.n	80044f6 <_printf_i+0x20a>
 800451e:	2500      	movs	r5, #0
 8004520:	f104 0619 	add.w	r6, r4, #25
 8004524:	e7f5      	b.n	8004512 <_printf_i+0x226>
 8004526:	bf00      	nop
 8004528:	08004785 	.word	0x08004785
 800452c:	08004796 	.word	0x08004796

08004530 <__malloc_lock>:
 8004530:	4801      	ldr	r0, [pc, #4]	; (8004538 <__malloc_lock+0x8>)
 8004532:	f7ff bc73 	b.w	8003e1c <__retarget_lock_acquire_recursive>
 8004536:	bf00      	nop
 8004538:	20000294 	.word	0x20000294

0800453c <__malloc_unlock>:
 800453c:	4801      	ldr	r0, [pc, #4]	; (8004544 <__malloc_unlock+0x8>)
 800453e:	f7ff bc6e 	b.w	8003e1e <__retarget_lock_release_recursive>
 8004542:	bf00      	nop
 8004544:	20000294 	.word	0x20000294

08004548 <_realloc_r>:
 8004548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800454c:	4680      	mov	r8, r0
 800454e:	4614      	mov	r4, r2
 8004550:	460e      	mov	r6, r1
 8004552:	b921      	cbnz	r1, 800455e <_realloc_r+0x16>
 8004554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004558:	4611      	mov	r1, r2
 800455a:	f7ff bdd9 	b.w	8004110 <_malloc_r>
 800455e:	b92a      	cbnz	r2, 800456c <_realloc_r+0x24>
 8004560:	f000 f85a 	bl	8004618 <_free_r>
 8004564:	4625      	mov	r5, r4
 8004566:	4628      	mov	r0, r5
 8004568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800456c:	f000 f8a0 	bl	80046b0 <_malloc_usable_size_r>
 8004570:	4284      	cmp	r4, r0
 8004572:	4607      	mov	r7, r0
 8004574:	d802      	bhi.n	800457c <_realloc_r+0x34>
 8004576:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800457a:	d812      	bhi.n	80045a2 <_realloc_r+0x5a>
 800457c:	4621      	mov	r1, r4
 800457e:	4640      	mov	r0, r8
 8004580:	f7ff fdc6 	bl	8004110 <_malloc_r>
 8004584:	4605      	mov	r5, r0
 8004586:	2800      	cmp	r0, #0
 8004588:	d0ed      	beq.n	8004566 <_realloc_r+0x1e>
 800458a:	42bc      	cmp	r4, r7
 800458c:	4622      	mov	r2, r4
 800458e:	4631      	mov	r1, r6
 8004590:	bf28      	it	cs
 8004592:	463a      	movcs	r2, r7
 8004594:	f000 f832 	bl	80045fc <memcpy>
 8004598:	4631      	mov	r1, r6
 800459a:	4640      	mov	r0, r8
 800459c:	f000 f83c 	bl	8004618 <_free_r>
 80045a0:	e7e1      	b.n	8004566 <_realloc_r+0x1e>
 80045a2:	4635      	mov	r5, r6
 80045a4:	e7df      	b.n	8004566 <_realloc_r+0x1e>

080045a6 <memmove>:
 80045a6:	4288      	cmp	r0, r1
 80045a8:	b510      	push	{r4, lr}
 80045aa:	eb01 0402 	add.w	r4, r1, r2
 80045ae:	d902      	bls.n	80045b6 <memmove+0x10>
 80045b0:	4284      	cmp	r4, r0
 80045b2:	4623      	mov	r3, r4
 80045b4:	d807      	bhi.n	80045c6 <memmove+0x20>
 80045b6:	1e43      	subs	r3, r0, #1
 80045b8:	42a1      	cmp	r1, r4
 80045ba:	d008      	beq.n	80045ce <memmove+0x28>
 80045bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045c4:	e7f8      	b.n	80045b8 <memmove+0x12>
 80045c6:	4402      	add	r2, r0
 80045c8:	4601      	mov	r1, r0
 80045ca:	428a      	cmp	r2, r1
 80045cc:	d100      	bne.n	80045d0 <memmove+0x2a>
 80045ce:	bd10      	pop	{r4, pc}
 80045d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045d8:	e7f7      	b.n	80045ca <memmove+0x24>
	...

080045dc <_sbrk_r>:
 80045dc:	b538      	push	{r3, r4, r5, lr}
 80045de:	4d06      	ldr	r5, [pc, #24]	; (80045f8 <_sbrk_r+0x1c>)
 80045e0:	2300      	movs	r3, #0
 80045e2:	4604      	mov	r4, r0
 80045e4:	4608      	mov	r0, r1
 80045e6:	602b      	str	r3, [r5, #0]
 80045e8:	f7fc f980 	bl	80008ec <_sbrk>
 80045ec:	1c43      	adds	r3, r0, #1
 80045ee:	d102      	bne.n	80045f6 <_sbrk_r+0x1a>
 80045f0:	682b      	ldr	r3, [r5, #0]
 80045f2:	b103      	cbz	r3, 80045f6 <_sbrk_r+0x1a>
 80045f4:	6023      	str	r3, [r4, #0]
 80045f6:	bd38      	pop	{r3, r4, r5, pc}
 80045f8:	200002a0 	.word	0x200002a0

080045fc <memcpy>:
 80045fc:	440a      	add	r2, r1
 80045fe:	4291      	cmp	r1, r2
 8004600:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004604:	d100      	bne.n	8004608 <memcpy+0xc>
 8004606:	4770      	bx	lr
 8004608:	b510      	push	{r4, lr}
 800460a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800460e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004612:	4291      	cmp	r1, r2
 8004614:	d1f9      	bne.n	800460a <memcpy+0xe>
 8004616:	bd10      	pop	{r4, pc}

08004618 <_free_r>:
 8004618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800461a:	2900      	cmp	r1, #0
 800461c:	d044      	beq.n	80046a8 <_free_r+0x90>
 800461e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004622:	9001      	str	r0, [sp, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	f1a1 0404 	sub.w	r4, r1, #4
 800462a:	bfb8      	it	lt
 800462c:	18e4      	addlt	r4, r4, r3
 800462e:	f7ff ff7f 	bl	8004530 <__malloc_lock>
 8004632:	4a1e      	ldr	r2, [pc, #120]	; (80046ac <_free_r+0x94>)
 8004634:	9801      	ldr	r0, [sp, #4]
 8004636:	6813      	ldr	r3, [r2, #0]
 8004638:	b933      	cbnz	r3, 8004648 <_free_r+0x30>
 800463a:	6063      	str	r3, [r4, #4]
 800463c:	6014      	str	r4, [r2, #0]
 800463e:	b003      	add	sp, #12
 8004640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004644:	f7ff bf7a 	b.w	800453c <__malloc_unlock>
 8004648:	42a3      	cmp	r3, r4
 800464a:	d908      	bls.n	800465e <_free_r+0x46>
 800464c:	6825      	ldr	r5, [r4, #0]
 800464e:	1961      	adds	r1, r4, r5
 8004650:	428b      	cmp	r3, r1
 8004652:	bf01      	itttt	eq
 8004654:	6819      	ldreq	r1, [r3, #0]
 8004656:	685b      	ldreq	r3, [r3, #4]
 8004658:	1949      	addeq	r1, r1, r5
 800465a:	6021      	streq	r1, [r4, #0]
 800465c:	e7ed      	b.n	800463a <_free_r+0x22>
 800465e:	461a      	mov	r2, r3
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	b10b      	cbz	r3, 8004668 <_free_r+0x50>
 8004664:	42a3      	cmp	r3, r4
 8004666:	d9fa      	bls.n	800465e <_free_r+0x46>
 8004668:	6811      	ldr	r1, [r2, #0]
 800466a:	1855      	adds	r5, r2, r1
 800466c:	42a5      	cmp	r5, r4
 800466e:	d10b      	bne.n	8004688 <_free_r+0x70>
 8004670:	6824      	ldr	r4, [r4, #0]
 8004672:	4421      	add	r1, r4
 8004674:	1854      	adds	r4, r2, r1
 8004676:	42a3      	cmp	r3, r4
 8004678:	6011      	str	r1, [r2, #0]
 800467a:	d1e0      	bne.n	800463e <_free_r+0x26>
 800467c:	681c      	ldr	r4, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	6053      	str	r3, [r2, #4]
 8004682:	440c      	add	r4, r1
 8004684:	6014      	str	r4, [r2, #0]
 8004686:	e7da      	b.n	800463e <_free_r+0x26>
 8004688:	d902      	bls.n	8004690 <_free_r+0x78>
 800468a:	230c      	movs	r3, #12
 800468c:	6003      	str	r3, [r0, #0]
 800468e:	e7d6      	b.n	800463e <_free_r+0x26>
 8004690:	6825      	ldr	r5, [r4, #0]
 8004692:	1961      	adds	r1, r4, r5
 8004694:	428b      	cmp	r3, r1
 8004696:	bf04      	itt	eq
 8004698:	6819      	ldreq	r1, [r3, #0]
 800469a:	685b      	ldreq	r3, [r3, #4]
 800469c:	6063      	str	r3, [r4, #4]
 800469e:	bf04      	itt	eq
 80046a0:	1949      	addeq	r1, r1, r5
 80046a2:	6021      	streq	r1, [r4, #0]
 80046a4:	6054      	str	r4, [r2, #4]
 80046a6:	e7ca      	b.n	800463e <_free_r+0x26>
 80046a8:	b003      	add	sp, #12
 80046aa:	bd30      	pop	{r4, r5, pc}
 80046ac:	20000298 	.word	0x20000298

080046b0 <_malloc_usable_size_r>:
 80046b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046b4:	1f18      	subs	r0, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	bfbc      	itt	lt
 80046ba:	580b      	ldrlt	r3, [r1, r0]
 80046bc:	18c0      	addlt	r0, r0, r3
 80046be:	4770      	bx	lr

080046c0 <_init>:
 80046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c2:	bf00      	nop
 80046c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c6:	bc08      	pop	{r3}
 80046c8:	469e      	mov	lr, r3
 80046ca:	4770      	bx	lr

080046cc <_fini>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	bf00      	nop
 80046d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d2:	bc08      	pop	{r3}
 80046d4:	469e      	mov	lr, r3
 80046d6:	4770      	bx	lr
